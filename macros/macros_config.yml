# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2

macros:

# Cohort macros

  - name: get_snapshot_date

    description: |
      Returns the snapshot date declared by the `cohort_snapshot_date` variable.

      If cohort_snapshot_date = 'today', then CURRENT_DATE is returned.


  - name: alive

    description: |
      Evaluates whether a patient was alive on a given date.


  - name: age

    description: |
      Calculates a patient's age on a given date from their date of birth.

      By default this macro will calculate the patient's age as of today's date. If a date is
      specified by the `cohort_snapshot_date` project variable, then the macro will calculate the
      patient's age on that date.

    arguments:
      - name: date_of_birth
        type: string
        description: |
          Patient's date of birth. Default argument is the `birthDate` field from the Patient FHIR
          resource.


  - name: has_encounter

    description: |
      Evaluates whether a patient had an encounter in the past.

      By default the evaluation will be based on today's date, looking back. If a date is specified
      by the `cohort_snapshot_date` project variable, then the macro will only look for encounters
      prior to that date.

    arguments:
      - name: class
        type: list
        description: |
          Restrict the search to a list of specified encounter types as per HL7
          [ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode) value set,
          noting case-sensitivity.
      - name: lookback
        type: string
        description: |
          Restrict the search for an encounter to this time interval back from the
          `cohort_snapshot_date`. Value must be in the format "int64 date_part", using one of the
          following supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. "3 MONTH)".


  - name: has_condition

    description: |
      Evaluates whether a patient has a condition based on codes defined in
      `clinical_code_groups.csv`.

      By default the evaluation will be based on today's date and therefore include condition codes
      recorded up to today. If a date is specified by the `cohort_snapshot_date` project variable,
      then the macro will ignore codes recorded after this snapshot date to determine whether the
      patient had the condition at that time.

    arguments:
      - name: condition
        type: string
        description: |
          Name of the condition as defined in the `group` field within `clinical_code_groups.csv`.
      - name: lookback
        type: string
        description: |
          Restrict the search for a condition to this time interval back from the
          `cohort_snapshot_date`. Value must be in the format "int64 date_part", using one of the
          following supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. "3 MONTH)".
      - name: code_system
        type: string
        description: |
          Restrict the search for a condition to only codes from this `code_system` in
          `clinical_code_groups.csv`.


  - name: has_procedure

    description: |
      Evaluates whether a patient had a procedure based on codes defined in
      `clinical_code_groups.csv`.

      By default the evaluation will be based on today's date and therefore include procedure codes
      recorded up to today. If a date is specified by the `cohort_snapshot_date` project variable,
      then the macro will ignore codes recorded after this snapshot date to determine whether the
      patient had the procedure prior to that time.

    arguments:
      - name: procedure
        type: string
        description: |
          Name of the procedure as defined in the `group` field within `clinical_code_groups.csv`.
      - name: lookback
        type: string
        description: |
          Restrict the search for a procedure to this time interval back from the
          `cohort_snapshot_date`. Value must be in the format "int64 date_part", using one of the
          following supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. "3 MONTH)".
      - name: code_system
        type: string
        description: |
          Restrict the search for a procedure to only codes from this `code_system` in
          `clinical_code_groups.csv`.


  - name: has_observation

    description: |
      Evaluates whether a patient had an observation based on codes defined in
      `clinical_code_groups.csv`.

      This search can be further refined by evaluating whether the value for that observation was
      above or below a specified value.

      By default the evaluation will be based on today's date and therefore include observation
      codes recorded up to today. If a date is specified by the `cohort_snapshot_date` project
      variable, then the macro will ignore codes recorded after this snapshot date to determine
      whether the patient had the observation prior to that time.

    arguments:
      - name: observation
        type: string
        description: |
          Name of the observation as defined in the `group` field within `clinical_code_groups.csv`
      - name: value_less_than
        type: float
        description: |
          The observation value (`Observation.value.quantity.value`) must be less than this value.
      - name: value_greater_than
        type: float
        description: |
          The observation value (`Observation.value.quantity.value`) must be greater than this
          value.
      - name: lookback
        type: string
        description: |
          Restrict the search for an observation to this time interval back from the
          `cohort_snapshot_date`. Value must be in the format "int64 date_part", using one of the
          following supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. "3 MONTH)".
      - name: code_system
        type: string
        description: |
          Restrict the search for a observation to only codes from this `code_system` in
          `clinical_code_groups.csv`.


  - name: has_medication_request

    description: |
      Evaluates whether a patient had a medication request based on codes defined in
      `clinical_code_groups.csv`.

      By default the evaluation will be based on today's date and therefore include medication
      requests recorded up to today. If a date is specified by the `cohort_snapshot_date` project
      variable, then the macro will ignore medication requests recorded after this snapshot date to
      determine whether the patient had medication requested prior to that time.

    arguments:
      - name: medication
        type: string
        description: |
          Name of the medication as defined in the `group` field within `clinical_code_groups.csv`.
      - name: lookback
        type: string
        description: |
          Restrict the search for a medication request to this time interval back from the
          `cohort_snapshot_date`. Value must be in the format "int64 date_part", using one of the
          following supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. "3 MONTH)".
      - name: code_system
        type: string
        description: |
          Restrict the search for a medication to only codes from this `code_system` in
          `clinical_code_groups.csv`.


# FHIR analysis macros

  - name: get_column_or_default

    description: |
      Returns a specified column if it exists within a resource, defaulting to NULL if it does not
      exist.

    arguments:
      - name: column_name
        type: string
        description: |
          Fully qualified column name to evaluate (e.g. code.coding.display).
      - name: fhir_resource
        type: string
        description: |
          The FHIR resource to check whether the specified `column_name` exists.

          If not specified, the macro will default to using the `primary_resource` for the metric.
      - name: table_alias
        type: string
        description: |
          Alias assigned to the table in which `column_name` is located. Only required if
          disambiguation of columns is needed in the query join.


  - name: code_from_codeableconcept

    description: |
      Attempts to extract a code for a specified code system from a FHIR codeableConcept field.

      If coding.code is not informative, then can return coding.display instead by setting the
      return_field argument to 'display'.

      To return an integer flag for whether a code exists, set return_int to True.

      If the field specified does not exist in the table, then "missing_field" or 0 is returned,
      depending on the return_int agument.

    arguments:
      - name: field_name
        type: string
        description: |
          FHIR field that is of type codeableConcept. If this field in an array, then the macro will
          unnest this field.
      - name: code_system
        type: string
        description: |
          Coding system to filter the search of the codeableConcept field.
      - name: fhir_resource
        type: string
        description: |
          The FHIR resource to check whether the specified `field_name` exists. If not specified,
          the macro will default to using the `primary_resource` for the metric.
      - name: index
        type: int
        description: |
          For codeableConcept fields that are repeatable, return the field specified by this index
          value.
      - name: null_values
        type: list
        description: |
          List of string values considered as NULL. If the extracted code matches any of these
          values, the macro will return a 0. Default: `null_values` project variable.
      - name: return_field
        type: string
        description: |
          If set to 'display', the macro will return the coding.display field from the
          codeableConcept. By default, coding.code will be returned.
      - name: return_int
        type: boolean
        description: |
          If set to True, the macro will return an integer flag for whether a code exists, rather
          than the code or display value itself.


  - name: has_value

    description: |
      Prints SQL for evaluating whether a field has a value recorded, returning TRUE if so and
      FALSE if not.

      A field is evaluated as not recorded if it is NULL or contains a value matching any value
      within the `null_values` list argument.

    arguments:
      - name: field_name
        type: string
        description: |
          FHIR field to evaluate.
      - name: null_values
        type: list
        description: |
          List of string values considered as NULL. If `field_name` matches any of these values, the
          SQL will return FALSE. Default: `null_values` project variable.


  - name: has_reference_value

    description: |
      Prints SQL for evaluating whether a reference field has a value recorded, returning TRUE if so
      and FALSE if not.

      A field is evaluated as not recorded if it is NULL or contains a value matching any value
      within the `null_values` list argument.

      Macro will preferentially use direct resource references (e.g. 'subject.patientId') defined by
      the [SQL-on-FHIR](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#references)
      projections. If this field does not exist in the FHIR resource, then the standard FHIR
      resource references are used (e.g. 'subject.reference' and 'subject.type').

    arguments:
      - name: reference_column
        type: string
        description: |
           FHIR reference field to evaluate. Only include the top-level reference field.
           For example,'subject' rather than 'subject.patientId'
      - name: reference_resource
        type: string
        description: |
          FHIR resource for which this reference value refers to (e.g. 'Patient).


  - name: reference_resolves

    description: |
      Prints SQL for evaluating whether a reference field value exists within the refererred FHIR
      resource, returning an integer flag of 1 if so and 0 if not.

      Macro will preferentially use direct resource references (e.g. 'subject.patientId') defined by
      the [SQL-on-FHIR](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#references)
      projections. If this field does not exist in the FHIR resource, then the standard FHIR
      resource references are used (e.g. 'subject.reference' and 'subject.type').

    arguments:
      - name: reference_column
        type: string
        description: |
           FHIR reference field to evaluate. Only include the top-level reference field.
           For example,'subject' rather than 'subject.patientId'
      - name: reference_resource
        type: string
        description: |
          FHIR resource to to check for the presence of the reference field value (e.g. 'Patient).


  - name: sql_comparison_expression

    description: |
      Converts a string or list of codes into a format compatible with a SQL comparison expression.

      If the input is a string then format as a sql equality expression. Example: column = 'string'

      If the input is a list then format as a sql "IN" expression with comma-separated values
      enclosed within parentheses. Example: column IN ('list_item_1', 'list_item_2')

    arguments:
      - name: code_string_or_list
        type: string or list
        description: |
          String or list of strings to evaluate field against.


  - name: source_system

    description: |
      Extracts the data source from which the FHIR data queried originates.


  - name: site

    description: |
      Extracts the provider code from which the FHIR data queried originates.


  - name: data_transfer_type

    description: |
      Extracts the mechanism of data transfer from which the FHIR data queried originates.


  - name: data_timezone

    description: |
      Extracts the timezone code from which the FHIR data queried originates.


  - name: local_date

    description: |
      Prints SQL for returning the local date from a specified date, datetime or timestamp column.

      Local date is the date where the clinical event took place.

      The macro uses the `timezone_default` project variable.

    arguments:
      - name: date_column
        type: String, date, datetime or timestamp
        description: |
          String, date, datetime or timestamp column from which to derive the local date.
      - name: date_column_data_type
        type: string
        description: |
          The datatype of `date_column`.


  - name: metric_date

    description: |
      Prints SQL for returining the local date from an ordered list of FHIR fields.

      It is used for returning the most clinically-relevant local date for a given FHIR resource.

    arguments:
      - name: metric_date_columns
        type: list
        description: |
          Ordered list of columns to use to derive the metric date.
      - name: date_column_data_type
        type: string
        description: |
          The datatype of `metric_date_columns`.


  - name: metric_hour

    description: |
      Prints SQL for returining the local hour from an ordered list of FHIR fields.

      It is used for returning the most clinically-relevant local hour for a given FHIR resource.

    arguments:
      - name: metric_date_columns
        type: list
        description: |
          Ordered list of columns to use to derive the metric date.
      - name: date_column_data_type
        type: string
        description: |
          The datatype of `metric_date_columns`.

  - name: date_spine

    description: |
      Prints SQL for generating a list of consecutive dates.

      If the `static_dataset` project variable is `TRUE` then it generates all dates between
      `earliest_date` and `latest_date` inclusive.

      Otherwise it generates dates up to and including the current date, going back the
      number of months defined by the `months_history` project variable.


  - name: date_to_period

    description: |
      Returns a string representation of a date truncated to a specified date period.

      For example, when `date_period` is set to 'QUARTER', a date of '2023-04-15' is truncated to
      '2023 Q2'.

    arguments:
      - name: date_column
        type: string
        description: |
          Column containing a date to be truncated.
      - name: date_period
        type: string
        description: |
          Date granularity to truncate the date in date_column to. Available options: YEAR, QUARTER,
          MONTH.


  - name: active_encounters

    description: |
      Prints SQL for extracting active encounters per day over a set period of time.

      The output is one row per date per patient with an active encounter that spans (at least
      partially) that date.

      Ambulatory encounters are joined on matching period.start only.

      Non-ambulatory encounters are capped at 90 days to reduce the impact of encounters that are
      complete but period.end is missing or recorded incorrectly.

    arguments:
      - name: encounter_classes
        type: list
        description: |
          List of encounter class code from
          [ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode) to restrict
          the list of active encounters to.

          If not specified, the macro will default to including encounters with the following codes:
          'IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB'.


  - name: cap_encounter_end_date

    description: |
      Prints SQL for returning a capped encounter end date.

      It is used to limit the effect of long stay encounters on metrics, which may be due to missing
      or incorrect recording of the encounter end date.

      It takes the provided encounter end date (`period_end`) and converts this date to an earlier
      date if criteria are met.

      For ambulatory encounters, the encounter end date is set to the encounter start date.

      For non-ambulatory encounters, the encounter end date is set to n days after the encounter
      start date if this is earlier than the recorded encounter end date. The value for n is
      determined by the `cap_length_of_stay` argument.

    arguments:
      - name: period_start
        type: string
        description: |
          The column name containing the encounter start date. Default: `period_start`.
      - name: period_end
        type: string
        description: |
          The column name containing the encounter end date. Default: `period_end`.
      - name: encounter_class
        type: string
        description: |
          The column name containing the encounter class. Default: `encounter_class`.
      - name: length_of_stay_cap
        type: int
        description: |
          The number of days to cap non-ambulatory encounter length of stay. Default:
          `length_of_stay_cap` project variable.


  - name: encounter_class_group

    description: |
      Aggregates encounter class codes into two broader groups (Ambulatory and
      Non-Ambulatory).

    arguments:
      - name: class_code
        type: string
        description: |
          Encounter class code from
          [ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode)


# FHIR view macros

  - name: query_fhir_table

    description: |
      Prints SQL for selecting from a FHIR resource table with appended metadata columns.

    arguments:
      - name: fhir_resource
        type: string
        description: |
          The FHIR resource to be queried.


  - name: metadata_cols

    description: |
      Prints SQL for metadata columns to be appended to the FHIR resource views.


  - name: create_dummy_table

    description: |
      Prints SQL to select dummy values when no tables exist for a FHIR resource.


  - name: fhir_resource_view_expression

    description: |
      Prints SQL for views over a FHIR resource.

      It is used by models within the `fhir_resources` folder to generate FHIR resource views
      (e.g Patient_view.sql).


  - name: fhir_resource_table_expression

    description: |
      Prints SQL for a common table expression for a FHIR resource.

      It is used by models within the `fhir_resources` folder to generate FHIR resource common
      table expressions (CTE) that incorporate patient cohorting.


  - name: spark__init_sources

    description: |
      Initiates Spark sources by creating the source tables based on Parquet files stored locally.


# Infrastructure macros

  - name: fhir_resource_exists

    description: |
      Returns TRUE if a specified FHIR resource exists within the source schema defined by the
      `database` and `schema` variables in dbt_project.yml.

    arguments:
      - name: test_fhir_resource
        type: string
        description: |
          FHIR resource to evaluate in Pascal case (e.g AllergyIntolerance).


  - name: get_column_datatype_dict

    description: |
      Returns a dictionary object containing all columns (keys) in a FHIR resource view and their
      data types (values).

      Included in the dictionary are both top-level columns (e.g. code) and nested columns (e.g
      code.coding.display).

    arguments:
      - name: fhir_resource
        type: string
        description: |
          The FHIR resource from which to return a dictionary of columns contained in the FHIR
          resource view.

          If not specified, the macro will default to using the `primary_resource` for the metric.


  - name: get_dbt_objects

    description: |
      Returns a dictionary containing all objects in the dbt project as documented in the dbt graph.
      The dictionary keys are the object names (e.g "metric") and the values are the paths for the
      object in the project (e.g. "post_processing/metric.sql")

    arguments:
      - name: resource_type
        type: string
        description: |
          Filter the dbt objects returned in the dictionary to a specific type (e.g. "model",
          "macro", "seed").

          If not specified, the macro will return all object types.


  - name: column_exists

    description: |
      Returns TRUE if a specified column exists within a FHIR resource view.

    arguments:
      - name: column_name
        type: string
        description: |
          Column name to evaluate. Can be a top-level column (e.g. code) or nested column (e.g.
          code.coding.display).
      - name: fhir_resource
        type: string
        description: |
          The FHIR resource to check whether the specified `column_name` exists.

          If not specified, the macro will default to using the `primary_resource` for the metric.


  - name: column_data_type

    description: |
      Returns the data type of a specified column in a source table.

    arguments:
      - name: column_name
        type: string
        description: |
          Fully qualified column name to evaluate (e.g. code.coding.display).
      - name: source_table
        type: string
        description: |
          The source table in which `column_name` exists.


  - name: get_reference_paths

    description: |
      Get a dictionary containing direct and indirect FHIR references based in an input reference
      column and reference resource.

      For example, the Encounter resource contains the column "subject" for references to the
      Patient resource. In this example the reference_column argument would be "subject" and the
      reference_resource argument would be "Patient". The macro will return the following
      dictionary:

      direct_reference_path: "subject.patientId"
      indirect_reference_path: "subject.reference"
      reference_column_is_array: False

    arguments:
      - name: reference_column
        type: string
        description: |
           FHIR reference field. Only include the top-level reference field.
           For example,'subject' rather than 'subject.patientId'
      - name: reference_resource
        type: string
        description: |
          FHIR resource for which this reference value refers to (e.g. 'Patient).


  - name: model_metadata

    description: |
      Returns the value for a specified key defined in a dbt model's metadata config.

    arguments:
      - name: meta_key
        type: string
        description: |
          Meta key for which to return the value (e.g. category)
      - name: model_name
        type: string
        description: |
          The dbt model from which to extract the metadata value.

          If not specified, the macro will default to using the model within which this macro is
          called.
      - name: value_if_missing
        type: string
        description: |
          Default value to return when no value is returned for the specified key.


  - name: is_public_synthea_dataset

    description: |
      Returns TRUE if project schema and database variables are pointing to the [Synthea public
      BiqQuery dataset](https://console.cloud.google.com/marketplace/details/mitre/synthea-fhir)


  - name: get_source_table_name

    description: |
      Returns FHIR resource name in the correct case depending on the source dataset.

      If the source dataset is the Synthea public BiqQuery dataset, then FHIR resource table names
      are converted to snake case (e.g. allergy_intolerance).

    arguments:
      - name: fhir_resource
        type: string
        description: |
          FHIR resource name in Pascal case (e.g AllergyIntolerance).


  - name: get_metric_date_columns

    description: |
      Returns the metric date columns from metric metadata, with corrected values for the Synthea
      public BigQuery dataset.


  - name: get_source_specific_category_index
    description: |
      Returns the index for category codes, with the correct value for the Synthea public BigQuery
      dataset.


  - name: empty_metric_output

    description: |
      Prints SQL select statement that writes a default row as the output of a metric. This is used
      when a metric is not evaluated because the required FHIR resources do not exist in the
      dataset.


# Metric processing macros

  - name: metric_common_dimensions

    description: |
      Prints the field names of the common dimensions that all metrics are segmented by.

      It is used when scripting metrics to save writing out these fields in each query.

    arguments:
      - name: table_alias
        type: string
        description: |
          Alias assigned to the table in which the dimension columns are located. Only required if
          disambiguation of columns is needed in the query join.
      - name: exclude_cols
        type: string
        description: |
          Columns to exclude from the returned SQL. Required if this column is to be calculated
          within the query itself.


  - name: calculate_metric

    description: |
      Prints a SQL query that caculates a metric given the inner query which calls into
      `metric_common_dimensions` and adds any specific columns.

    arguments:
      - name: numerator
        type: string
        description: |
          SQL to calculate the numerator value for proportion or ratio metrics. Not required for
          count metrics.
      - name: denominator
        type: string
        description: |
          SQL to calculate the denominator value for proportion or ratio calculations. Not required
          for count metrics.


  - name: metric_output

    description: |
      Prints a SQL query that calculates a metric over a structured input table ("A") to produce an
      output consistent with the project's data model.

      The macro extracts values from the metric metadata to populate the dimension fields and
      calculate the measure field according to the metric calculation type.

    arguments:
      - name: numerator
        type: string
        description: |
          SQL to calculate the numerator value for proportion or ratio metrics. Not required for
          count metrics.
      - name: denominator
        type: string
        description: |
          SQL to calculate the denominator value for proportion or ratio calculations. Not required
          for count metrics.


  - name: get_metric_tables

    description: |
      Returns dictionary of metric name -> fully specified metric table for metrics that have been
      materialized.


  - name: get_tables

    description: |
      Prints SQL for selecting the table_name and fully qualified table name from
      BigQuery INFORMATION_SCHEMA.TABLES. By default, all tables from the target
      project and dataset are returned. These can be filtered using the
      table_name_wildcard argument.

    arguments:
      - name: table_name_wildcard
        type: string
        description: |
          Filter the tables returned using SQL wilcards e.g. 'A%' returns all tables
          where table_name LIKE 'A%'.
          Default value '%' returns all tables.


  - name: union_metric_tables

    description: |
      Prints SQL that unions all metric output tables that have been materialized.

      It is used for unioning all metric outputs and writing to the `metric` table during metric
      post-processing.


  - name: maybe_drop_metric_tables

    description: |
      Optionally prints SQL which drops individual metric output tables.

      It is used to drop these tables after the outputs have been written to the `metric` table
      during metric post-processing.


  - name: calculate_measure

    description: |
      Prints SQL which formats the measure metric correctly.

      It is used to aggregate metric measures depending on calculation type.

    arguments:
      - name: metric_definition_alias
        type: string
        description: |
          Alias of the table that contains metric definitions, defaults to "D".
      - name: metric_alias
        type: string
        description: |
          Alias of the table that contains metric values, defaults to "M".


  - name: create_metric_view

    description: |
      Prints SQL which creates a table joining the metric and metric definition tables.

      Used for views, configurable to include or exclude dimensions & date aggregation.

    arguments:
      - name: segment_by_date
        type: string
        description: |
          Specify the time-period granularity to segement the metrics by.

          Supported values: 'DAY', 'YEAR'.

          If no value is provided then the view will not segment by any time-period.

      - name: segment_by_dimensions
        type: list
        description: |
          Specify the metric-specific dimensions to segment the metrics by.

          Supported values: 'dimension_a', 'dimension_b', 'dimension_c'.

          If no value is provided then the view will not segment by any metric-specific dimensions.


# String macros

  - name: find_first_of

    description: |
      Finds first of a given list of letters in a string.

    arguments:
      - name: haystack
        type: string
        description: String to search through

      - name: letters
        type: string
        description: Letters to search for



  - name: quote_array

    description: |
      Returns an array with each string wrapped in single quotes.

    arguments:
      - name: x
        type: list of strings
        description: |
          List of strings to be quoted.


  - name: snake_case

    description: |
      Returns a snake_case version of a CamelCase string.

    arguments:
      - name: str
        type: string
        description: |
          String in CamelCase to be converted to snake_case.


  - name: snake_case_to_proper_case

    description: |
      Converts a snake_case column (e.g. encounter_class) to Proper Case (e.g Encounter Class).

    arguments:
      - name: snake_case_column
        type: string
        description: |
          Column with snake_case value to be converted to Proper Case.


# Data visualization macros

  - name: linking_api_datasource

    description: |
      Returns a URL to create a Looker Studio dashboard from a template dashboard using the Looker
      Studio [Linking API](https://developers.google.com/looker-studio/integrate/linking-api).

      This URL contains the bigquery project and dataset, as defined in profiles.yml, as parameters.

    arguments:
      - name: report_id
        type: string
        description: |
          Report ID of the Looker studio template dashboard to be cloned.
      - name: datasource_list
        type: list
        description: |
          List of Looker Studio datasources used by the template dashboard.


# Cross DB macros

  - name: flatten_column

    description: |
      Parses the data type and returns a list of sub-columns as structs with `name` and `data_type`
      fields. Recursively finds all sub-columns in a nested data type.

    arguments:
      - name: column
        type: struct with `name` and `data_type` fields
        description: |
          Column definition, including a structured `data_type`.


  - name: is_spark

    description: Returns `true` if the target database is Apache Spark SQL. No arguments.


  - name: safe_cast_as_date

    description: Convenience function to safe_cast as date.

    arguments:
      - name: x
        type: string
        description: Expression to be cast as date.


  - name: safe_cast_as_timestamp

    description: Convenience function to safe_cast as timestamp.

    arguments:
      - name: x
        type: string
        description: Expression to be cast as timestamp.


  - name: safe_divide

    description: Return NULL if dividing by zero.

    arguments:
      - name: x
        type: string
        description: The numerator.

      - name: y
        type: string
        description: The denominator.


  - name: type_double

    description: Database specific type name for 64-bit rational number. No arguments.


  - name: type_long

    description: Database specific type name for 64-bit integer. No arguments.


  - name: timestamp_trunc

    description: Re-implement dbt.date_trunc for BigQuery, in order to allow entering timezone.

    arguments:
      - name: datepart
        type: string
        description: E.g. "hour".

      - name: date
        type: string
        description: The date expression.

      - name: timezone
        type: string
        description: The timezone.


  - name: current_datetime

    description: Returns the current date and time. No arguments.


  - name: uuid

    description: Returns the SQL for UUID.


  - name: error

    description: Returns the SQL to fail the query with an error.

    arguments:
      - name: expression
        description: Error message.


  - name: array_join

    description: Creates a string by joining the `array` values by the `delimiter`.

    arguments:
      - name: array
      - name: delimiter


  - name: table_ref

    description: Constructs a table reference. Useful e.g. when `ref` macro can't be used.

    arguments:
      - name: database
      - name: schema
      - name: table


  - name: unnest

    description: |
      Prints SQL which unnests an array.

    arguments:
      - name: array
        type: string
        description: The array to unnest.

      - name: alias
        type: string
        description: The alias for the unnested values.


  - name: unnest_multiple

    description: |
      Prints SQL which unnests a nested array.

    arguments:
      - name: arrays
        type: list
        description: |
          Configurations of the arrays to be unnested, each ideally created using the `array_config`
          macro.


  - name: array_config

    description: Creates array config for the `unnest_config` macro.

    arguments:
      - name: field
        type: string
        description: The array field to unnest.

      - name: unnested_alias
        type: string
        description: The alias for the unnested array values.


  - name: select_from_unnest

    description: |
      Prints SQL which selects the first value from unnested arrays.

    arguments:
      - name: select
        type: string
        description: The field to select.

      - name: unnested
        type: number
        description: |
          The unnested arrays, perhaps a result of the `unnest` or `unnest_multiple` macros.

      - name: where
        type: string
        description: |
          The WHERE clause, can use the alias of the unnested array values.

      - name: order_by
        type: string
        description: |
          The ORDER BY clause, important because we select the first value.


  - name: spark_parenthesis

    description: Surrounds `s` by parenthesis on Spark, leaves as is on BigQuery.

    arguments:
      - name: s
        type: string


# Testing macros

  - name: assert_string_equals

    description: |
      Compares two strings, throws exception and shows the first difference if any.

    arguments:
      - name: x
        type: string

      - name: y
        type: string

