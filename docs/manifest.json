{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2023-03-03T17:26:35.259458Z", "invocation_id": "762e2624-b1ff-479a-92cb-2ddece0e9333", "env": {}, "project_id": "33dd42d0ea0b0349abff53ce4de01b8a", "user_id": "73ee227f-105e-4246-91e1-217e1133dd6c", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.fhir_dbt_analytics.metric_execution_log": {"resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.fhir_dbt_analytics.metric_latest_execution"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_execution_log"], "unique_id": "model.fhir_dbt_analytics.metric_execution_log", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized = 'incremental'\n) -}}\n\nWITH LatestExecution AS (\n  SELECT execution_id, execution_date, execution_datetime, metric_name, MIN(metric_date) AS min_metric_date, MAX(metric_date) AS max_metric_date, COUNT(*) AS row_count\n  FROM {{ ref('metric_latest_execution') }}\n  GROUP BY 1,2,3,4\n)\nSELECT\n  execution_id,\n  execution_date,\n  '{{ var('cohort') }}' AS `cohort`,\n  ARRAY_AGG(STRUCT(metric_name, execution_datetime, min_metric_date, max_metric_date, row_count)) AS metric\nFROM LatestExecution\nGROUP BY 1, 2", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "post_processing/metric_execution_log.sql", "original_file_path": "models/post_processing/metric_execution_log.sql", "name": "metric_execution_log", "alias": "metric_execution_log", "checksum": {"name": "sha256", "checksum": "06f4ce79775e1cb5456cfaa94fc9550dc3bfc88f02d09aa79945f2ebbe3bfaa5"}, "tags": [], "refs": [["metric_latest_execution"]], "sources": [], "metrics": [], "description": "Creates a table logging metadata for each execution of the pipeline.\n", "columns": {"execution_id": {"name": "execution_id", "description": "Unique Id for each pipeline execution generated from GENERATE_UUID() BigQuery function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_date": {"name": "execution_date", "description": "Date of the pipeline execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cohort": {"name": "cohort", "description": "The cohort over which metrics were calculated for this pipeline execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric": {"name": "metric", "description": "Array of fields with metadata for each metric that was included in this pipeline execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1677864399.6685975}, "model.fhir_dbt_analytics.metric_latest_execution": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.union_metric_tables"], "nodes": ["model.fhir_dbt_analytics.metric_all_definitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_latest_execution"], "unique_id": "model.fhir_dbt_analytics.metric_latest_execution", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='table'\n) -}}\n\nWITH\n\nUnionedMetrics AS (\n  {{ union_metric_tables() }}\n),\n\nExecution AS (\n  SELECT GENERATE_UUID() AS execution_id,\n  CURRENT_DATE() AS execution_date\n)\n\nSELECT\n  Execution.execution_id,\n  Execution.execution_date,\n  UnionedMetrics.*\nFROM UnionedMetrics\nCROSS JOIN Execution", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "post_processing/metric_latest_execution.sql", "original_file_path": "models/post_processing/metric_latest_execution.sql", "name": "metric_latest_execution", "alias": "metric_latest_execution", "checksum": {"name": "sha256", "checksum": "6ff9e95bde7cb19c65ede2a1d622240d6f8f7297be8bf53a96ac52eda7fadf06"}, "tags": [], "refs": [["metric_all_definitions"]], "sources": [], "metrics": [], "description": "Unions the output of all metrics executed in a given pipeline run, and writes to a single\ndatabase table.\n", "columns": {"metric_name": {"name": "metric_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1677864399.6579013}, "model.fhir_dbt_analytics.metric_definition": {"resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.fhir_dbt_analytics.metric_all_definitions", "model.fhir_dbt_analytics.metric_latest_execution"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_definition"], "unique_id": "model.fhir_dbt_analytics.metric_definition", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='table'\n) -}}\n\nSELECT *\nFROM {{ ref('metric_all_definitions') }}\nWHERE metric_name IN (\n  SELECT DISTINCT metric_name\n  FROM {{ ref('metric_latest_execution') }}\n)\nORDER BY metric_name", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "post_processing/metric_definition.sql", "original_file_path": "models/post_processing/metric_definition.sql", "name": "metric_definition", "alias": "metric_definition", "checksum": {"name": "sha256", "checksum": "0323fe6020c64a6bc2125f1fb6dec4847e40c024cf75d59eb94b425facd25279"}, "tags": [], "refs": [["metric_all_definitions"], ["metric_latest_execution"]], "sources": [], "metrics": [], "description": "Loops through all metadata recorded for models within the `metrics/` folder, writing this\ninformation to a database table.\n", "columns": {"metric_path": {"name": "metric_path", "description": "Location of this model within the dbt project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_name": {"name": "metric_name", "description": "Unique name for the metric (e.g. *patient_count*).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Plain English description of the metric.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Shortened version of the metric description for display in tables. Aim to limit to 32 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_resource": {"name": "primary_resource", "description": "FHIR resource that this metric is calculated over. In some cases a metric may join across multiple FHIR resources. This field should represent the main resource from which the cohort for the metric is calculated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_fields": {"name": "primary_fields", "description": "Primary FHIR fields that this metric is calculated over.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "secondary_resources": {"name": "secondary_resources", "description": "List of all FHIR resources that this metric is calculated over other than the *primary_resource*.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Category to associate this metric with, enabling grouping/viewing metrics withiin specific categories (e.g. *Referential integrity*).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calculation": {"name": "calculation", "description": "Type of calculation performed on the metric measure value. This defines how downstream systems should aggregate the output.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_date_field": {"name": "metric_date_field", "description": "FHIR field used to generate the metric_date in the output (e.g. *Encounter.period.start*)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_date_description": {"name": "metric_date_description", "description": "Plain english description of the metric date calculation used (e.g. *Encounter start date*)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_a": {"name": "dimension_a", "description": "The first metric segmentation group. This is a relevant variable that the metric is grouped by to enable drill-down analysis. This can be a column name or SQL expression that is used by the *calculate_metric* macro to derive dimension_a in the metric output.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_a_description": {"name": "dimension_a_description", "description": "Description of first metric segmentation group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_b": {"name": "dimension_b", "description": "The second metric segmentation group. This is a relevant variable that the metric is grouped by to enable drill-down analysis. This can be a column name or SQL expression that is used by the *calculate_metric* macro to derive dimension_b in the metric output.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_b_description": {"name": "dimension_b_description", "description": "Description of second metric segmentation group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_c": {"name": "dimension_c", "description": "The third metric segmentation group. This is a relevant variable that the metric is grouped by to enable drill-down analysis. This can be a column name or SQL expression that is used by the *calculate_metric* macro to derive dimension_a in the metric output.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_c_description": {"name": "dimension_c_description", "description": "Description of third metric segmentation group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metadata/metadata_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1677864399.705978}, "model.fhir_dbt_analytics.metric": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.maybe_drop_metric_tables"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution", "model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"]}, "config": {"enabled": true, "alias": "metric", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ maybe_drop_metric_tables() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "post_processing", "metric"], "unique_id": "model.fhir_dbt_analytics.metric", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('metric_definition') }}\n\n{{ config(\n    alias = 'metric',\n    materialized = 'table',\n    post_hook = \"{{ maybe_drop_metric_tables() }}\"\n) -}}\n\nWITH\n\n  Breakdowns AS (\n    SELECT DISTINCT\n      M.execution_id, M.execution_date, M.execution_datetime,\n      M.metric_name, M.source_system, M.site, M.data_transfer_type, M.dimension_a, M.dimension_b, M.dimension_c, M.fhir_mapping,\n      D.calculation, D.metric_date_field\n      FROM {{ ref('metric_latest_execution') }} AS M\n      JOIN {{ ref('metric_definition') }} AS D ON M.metric_name = D.metric_name\n  ),\n\n  DateRange AS (\n    SELECT\n\n      {%- if var('static_dataset') %}\n      GENERATE_DATE_ARRAY(\n        PARSE_DATE(\"%F\", \"{{ var('earliest_date') }}\"),\n        PARSE_DATE(\"%F\", \"{{ var('latest_date') }}\")\n      ) AS date_array\n\n      {%- else %}\n      GENERATE_DATE_ARRAY(\n        DATE_SUB(CURRENT_DATE(), INTERVAL {{ var('months_history') }} MONTH),\n        CURRENT_DATE()\n      ) AS date_array\n      {%- endif %}\n  )\n\nSELECT\n  B.execution_id,\n  B.execution_date,\n  B.execution_datetime,\n  B.metric_name,\n  B.fhir_mapping,\n  B.source_system,\n  B.data_transfer_type,\n  CAST(metric_date AS DATE) AS metric_date,\n  B.site,\n  B.dimension_a,\n  B.dimension_b,\n  B.dimension_c,\n\n  -- Impute different values for rows without data for count metrics and non-count metrics:\n  COALESCE(M.numerator, IF(B.calculation IN ('COUNT'), NULL, 0)) AS numerator,\n  COALESCE(M.denominator, IF(B.calculation IN ('COUNT'), NULL, 0)) AS denominator,\n  COALESCE(M.measure, IF(B.calculation IN ('COUNT'), 0, NULL)) AS measure\n\nFROM Breakdowns AS B\nLEFT JOIN DateRange AS DR ON B.metric_date_field != ''\nLEFT JOIN UNNEST(DR.date_array) AS metric_date\nLEFT JOIN {{ ref('metric_latest_execution') }} AS M\n  ON B.metric_name = M.metric_name\n  AND (metric_date = M.metric_date OR (metric_date IS NULL AND M.metric_date IS NULL))\n  AND (B.source_system = M.source_system OR (B.source_system IS NULL AND M.source_system IS NULL))\n  AND (B.data_transfer_type = M.data_transfer_type OR (B.data_transfer_type IS NULL AND M.data_transfer_type IS NULL))\n  AND (B.site = M.site OR (B.site IS NULL AND M.site IS NULL))\n  AND (B.dimension_a = M.dimension_a OR (B.dimension_a IS NULL AND M.dimension_a IS NULL))\n  AND (B.dimension_b = M.dimension_b OR (B.dimension_b IS NULL AND M.dimension_b IS NULL))\n  AND (B.dimension_c = M.dimension_c OR (B.dimension_c IS NULL AND M.dimension_c IS NULL))\n  AND (B.fhir_mapping = M.fhir_mapping OR (B.fhir_mapping IS NULL AND M.fhir_mapping IS NULL))\n\n{%- set this_relation = adapter.get_relation(this.database, this.schema, this.table) %}\n{% if this_relation != None %}\nUNION ALL\nSELECT * FROM {{ this }} WHERE metric_name NOT IN (SELECT DISTINCT metric_name FROM {{ ref('metric_latest_execution') }})\n{% endif %}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "post_processing/metric.sql", "original_file_path": "models/post_processing/metric.sql", "name": "metric", "alias": "metric", "checksum": {"name": "sha256", "checksum": "c2b2b6463cbe17d5ab0d496efc16697e82fad6760f03deb10a337506fca12228"}, "tags": [], "refs": [["metric_definition"], ["metric_latest_execution"], ["metric_definition"], ["metric_latest_execution"]], "sources": [], "metrics": [], "description": "Generates a table with the latest values for each metric.\n\nIt reads from `metric_latest_execution` and performs two transformations:\n\n1. Filters output to the time period specified by the `earliest_date` and `latest_date`\nvariables (static datasets) or `months_history` variable (dynamic datasets).\n\n2. Imputes missing daily values for all metric segmentation combinations with data in the time\nperiod.\n\nThis model includes a post-hook that drops all individual metric output tables after\nexecution.\n", "columns": {"execution_id": {"name": "execution_id", "description": "Unique Id for each pipeline execution generated from GENERATE_UUID() BigQuery function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_date": {"name": "execution_date", "description": "Date of the pipeline execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_datetime": {"name": "execution_datetime", "description": "Datetime of the pipeline execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_name": {"name": "metric_name", "description": "Unique name for the metric (e.g. patient_count)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fhir_mapping": {"name": "fhir_mapping", "description": "The FHIR mapping from which the FHIR data queried originates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_system": {"name": "source_system", "description": "Data source from which the FHIR data queried originates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_transfer_type": {"name": "data_transfer_type", "description": "Mechanism of data transfer from which the FHIR data queried originates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metric_date": {"name": "metric_date", "description": "Clinically-relevant local calendar date for which this metric value is calculated. This field will be NULL for metrics that are not segmented by date (e.g. organization_count).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site": {"name": "site", "description": "Provider code from which the FHIR data queried originates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_a": {"name": "dimension_a", "description": "First metric segmentation group. A relevant variable that this metric is grouped by to enable drill-down analysis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_b": {"name": "dimension_b", "description": "Second metric segmentation group. A relevant variable that this metric is grouped by to enable drill-down analysis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimension_c": {"name": "dimension_c", "description": "Third metric segmentation group. A relevant variable that this metric is grouped by to enable drill-down analysis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numerator": {"name": "numerator", "description": "Numerator value for proportion or ratio calculation. This will be NULL for count metrics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "denominator": {"name": "denominator", "description": "Denominator value for proportion or ratio calculation. This will be NULL for count metrics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measure": {"name": "measure", "description": "Value of the metric calculation for a given segmentation group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "metric", "materialized": "table", "post-hook": ["{{ maybe_drop_metric_tables() }}"]}, "created_at": 1677864399.66539}, "model.fhir_dbt_analytics.adults": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.alive", "macro.fhir_dbt_analytics.age"], "nodes": ["model.fhir_dbt_analytics.Patient_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"cohort_description": "Alive adults"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "cohorts", "adults"], "unique_id": "model.fhir_dbt_analytics.adults", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{- config(\n    materialized = 'ephemeral',\n    meta = {\n      \"cohort_description\": \"Alive adults\"\n      }\n) -}}\n\nSELECT\n  '{{this.name}}' AS cohort_name,\n  {{ get_snapshot_date() }} AS cohort_snapshot_date,\n  P.id AS patient_id\nFROM {{ ref('Patient_view') }} AS P\nWHERE {{ alive() }}\nAND {{ age() }} >= 18", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "cohorts/adults.sql", "original_file_path": "models/cohorts/adults.sql", "name": "adults", "alias": "adults", "checksum": {"name": "sha256", "checksum": "486a629ebfd94d4009fcad23706592e5f1ef887a2e09728e40ce3024122ba6ac"}, "tags": [], "refs": [["Patient_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"cohort_description": "Alive adults"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "meta": {"cohort_description": "Alive adults"}}, "created_at": 1677864397.278395}, "model.fhir_dbt_analytics.hypertension": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.alive", "macro.fhir_dbt_analytics.age", "macro.fhir_dbt_analytics.has_encounter", "macro.fhir_dbt_analytics.has_condition", "macro.fhir_dbt_analytics.has_medication_request", "macro.fhir_dbt_analytics.has_observation", "macro.fhir_dbt_analytics.has_procedure"], "nodes": ["model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.Condition_view", "seed.fhir_dbt_analytics.clinical_code_groups", "model.fhir_dbt_analytics.MedicationRequest_view", "seed.fhir_dbt_analytics.clinical_code_groups", "model.fhir_dbt_analytics.Observation_view", "seed.fhir_dbt_analytics.clinical_code_groups", "model.fhir_dbt_analytics.Procedure_view", "seed.fhir_dbt_analytics.clinical_code_groups"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"cohort_description": "Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "cohorts", "hypertension"], "unique_id": "model.fhir_dbt_analytics.hypertension", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{- config(\n    materialized = 'ephemeral',\n    meta = {\n      \"cohort_description\": \"Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months\"\n      }\n) -}}\n\nSELECT\n  '{{this.name}}' AS cohort_name,\n  {{ get_snapshot_date() }} AS cohort_snapshot_date,\n  P.id AS patient_id\nFROM {{ ref('Patient_view') }} AS P\nWHERE {{ alive() }}\nAND {{ age() }} >= 18\nAND {{ has_encounter(class=['AMB', 'EMER', 'IMP'], lookback='5 YEAR') }}\nAND {{ has_condition('Hypertension') }}\nAND {{ has_medication_request('Anti-hypertensive medication', lookback='12 MONTH') }}\nAND {{ has_observation('BMI', value_greater_than=25, lookback='12 MONTH') }}\nAND NOT {{ has_procedure('Medication Reconciliation', lookback='12 MONTH') }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "cohorts/hypertension.sql", "original_file_path": "models/cohorts/hypertension.sql", "name": "hypertension", "alias": "hypertension", "checksum": {"name": "sha256", "checksum": "5296b46d2522a9353cf5551a06e706278814c7721e0b73d4c46c0906452666d7"}, "tags": [], "refs": [["Patient_view"], ["Encounter_view"], ["Condition_view"], ["clinical_code_groups"], ["MedicationRequest_view"], ["clinical_code_groups"], ["Observation_view"], ["clinical_code_groups"], ["Procedure_view"], ["clinical_code_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"cohort_description": "Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "meta": {"cohort_description": "Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months"}}, "created_at": 1677864397.2913451}, "model.fhir_dbt_analytics.fhir_table_list": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metadata", "fhir_table_list"], "unique_id": "model.fhir_dbt_analytics.fhir_table_list", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\nSELECT\n  table_catalog as bq_project,\n  table_schema as bq_dataset,\n  table_name as bq_table,\n  CONCAT('`', table_catalog, '`.`', table_schema, '`.`', table_name, '`') AS fully_qualified_bq_table,\n  table_name AS fhir_resource,\n  NULL AS map_name,\n  1 AS latest_version,\n  creation_time\nFROM {{ var('database') }}.{{ var('schema') }}.INFORMATION_SCHEMA.TABLES", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metadata/fhir_table_list.sql", "original_file_path": "models/metadata/fhir_table_list.sql", "name": "fhir_table_list", "alias": "fhir_table_list", "checksum": {"name": "sha256", "checksum": "92031140b95258b9fed9108f628260c744cdce2d708e3cf4fb34dc9f89aeda6b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Creates a table that lists all FHIR resource tables that are located in the `database` and\n`schema` specified within `dbt_project.yml`.\n", "columns": {"bq_project": {"name": "bq_project", "description": "BigQuery project name (equivalent of dbt database).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bq_dataset": {"name": "bq_dataset", "description": "BigQuery dataset name (equivalent of dbt schema).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bq_table": {"name": "bq_table", "description": "BigQuery table name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_bq_table": {"name": "fully_qualified_bq_table", "description": "Full BigQuery table name including project, dataset and table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fhir_resource": {"name": "fhir_resource", "description": "FHIR resource name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "map_name": {"name": "map_name", "description": "Name of mapping that generated FHIR resource.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_version": {"name": "latest_version", "description": "Flag for whether this is the latest table for a given FHIR mapping.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creation_time": {"name": "creation_time", "description": "Timestamp for creation of table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metadata/metadata_config.yml", "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/fhir_table_list.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1677864399.6974866, "compiled_code": "\n\nSELECT\n  table_catalog as bq_project,\n  table_schema as bq_dataset,\n  table_name as bq_table,\n  CONCAT('`', table_catalog, '`.`', table_schema, '`.`', table_name, '`') AS fully_qualified_bq_table,\n  table_name AS fhir_resource,\n  NULL AS map_name,\n  1 AS latest_version,\n  creation_time\nFROM bigquery-public-data.fhir_synthea.INFORMATION_SCHEMA.TABLES", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`"}, "model.fhir_dbt_analytics.metric_all_definitions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metadata", "metric_all_definitions"], "unique_id": "model.fhir_dbt_analytics.metric_all_definitions", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{% for node_id, node in graph.nodes.items() if node.resource_type == 'model' and node.path.startswith('metrics/') %}\nSELECT\n    \"{{ node.path }}\" AS metric_path,\n    \"{{ node.name }}\" AS metric_name,\n    \"{{ node.config.meta.description }}\" AS description,\n    \"{{ node.config.meta.short_description }}\" AS short_description,\n    \"{{ node.config.meta.primary_resource }}\" AS primary_resource,\n    {{ node.config.meta.primary_fields }} AS primary_fields,\n    {{ node.config.meta.secondary_resources }} AS secondary_resources,\n    \"{{ node.config.meta.category }}\" AS category,\n    \"{{ node.config.meta.calculation }}\" AS calculation,\n    \"{{ node.config.meta.metric_date_field }}\" AS metric_date_field,\n    \"{{ node.config.meta.metric_date_description }}\" AS metric_date_description,\n    \"{{ node.config.meta.dimension_a }}\" AS dimension_a,\n    \"{{ node.config.meta.dimension_a_description }}\" AS dimension_a_description,\n    \"{{ node.config.meta.dimension_b }}\" AS dimension_b,\n    \"{{ node.config.meta.dimension_b_description }}\" AS dimension_b_description,\n    \"{{ node.config.meta.dimension_c }}\" AS dimension_c,\n    \"{{ node.config.meta.dimension_c_description }}\" AS dimension_c_description\n{% if not loop.last -%} UNION ALL {%- endif %}\n{%- endfor -%}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metadata/metric_all_definitions.sql", "original_file_path": "models/metadata/metric_all_definitions.sql", "name": "metric_all_definitions", "alias": "metric_all_definitions", "checksum": {"name": "sha256", "checksum": "fe45af2451e0a842fb3d921cbd7ab90817f7ea46a4f362a43440057f5f8c2656"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/metric_all_definitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1677864397.3333132, "compiled_code": "\n\n\nSELECT\n    \"metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_servicerequest_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have a service request reference recorded\" AS description,\n    \"SerReq ref. SerReq - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['requester.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_patient_undefined.sql\" AS metric_path,\n    \"encounter_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Encounter resources that do not have a patient reference recorded\" AS description,\n    \"Enc ref. Patient - unrecorded\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_medicationrequest_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have an medication request reference recorded\" AS description,\n    \"MedAdmin ref. MedReq - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['context.encounterId', 'request.medicationRequestId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_count.sql\" AS metric_path,\n    \"medicationadministration_count\" AS metric_name,\n    \"Count of valid MedicationAdministration resources\" AS description,\n    \"MedicationAdministration resources\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"MedicationAdministration.effective.dateTime\" AS metric_date_field,\n    \"MedicationAdministration effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql\" AS metric_path,\n    \"allergyintolerance_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that reference a non-existent encounter\" AS description,\n    \"Allergy ref. Enc - non-exist\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medication_count.sql\" AS metric_path,\n    \"medication_count\" AS metric_name,\n    \"Count of valid Medication resources\" AS description,\n    \"Medication resources\" AS short_description,\n    \"Medication\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication (active | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent practitioner\" AS description,\n    \"MedReq ref. Prac - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['requester.practitionerId'] AS primary_fields,\n    ['Practitioner'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_patient_undefined.sql\" AS metric_path,\n    \"composition_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have a patient reference recorded\" AS description,\n    \"Comp ref. Patient - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_count.sql\" AS metric_path,\n    \"encounter_count\" AS metric_name,\n    \"Count of valid Encounter resources\" AS description,\n    \"Encounter resources\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql\" AS metric_path,\n    \"allergyintolerance_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that reference a non-existent patient\" AS description,\n    \"Allergy ref. Patient - non-exist\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    ['patient.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_patient_unresolved.sql\" AS metric_path,\n    \"procedure_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of LDA Procedure resources that reference a non-existent patient\" AS description,\n    \"LDA Proc ref. Patient - non-exist\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_practitioner_undefined.sql\" AS metric_path,\n    \"careteam_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of CareTeam resources that do not have a practitioner reference recorded\" AS description,\n    \"CareTeam ref. Prac - unrecorded\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['participant.member.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_count.sql\" AS metric_path,\n    \"allergyintolerance_count\" AS metric_name,\n    \"Count of valid AllergyIntolerance resources\" AS description,\n    \"AllergyIntolerance resources\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"composition_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent practitioner\" AS description,\n    \"Comp ref. Prac - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['author.practitionerId'] AS primary_fields,\n    ['Practitioner'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/practitionerrole_count.sql\" AS metric_path,\n    \"practitionerrole_count\" AS metric_name,\n    \"Count of valid PractitionerRole resources\" AS description,\n    \"PractitionerRole resources\" AS short_description,\n    \"PractitionerRole\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this practitioner role record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_practitioner_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have a practitioner reference recorded\" AS description,\n    \"SerReq ref. Prac - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['requester.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_count.sql\" AS metric_path,\n    \"patient_count\" AS metric_name,\n    \"Count of valid Patient resources\" AS description,\n    \"Patient resources\" AS short_description,\n    \"Patient\" AS primary_resource,\n    ['id'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date of patient's earliest clinical encounter\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this patient's record is in active use\" AS dimension_a_description,\n    \"gender\" AS dimension_b,\n    \"The patient's gender (male, female, other, unknown)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_binary_unresolved.sql\" AS metric_path,\n    \"composition_reference_binary_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent binary resource\" AS description,\n    \"Comp ref. Binary - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['section.entry.binaryId'] AS primary_fields,\n    ['Binary'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_encounter_undefined.sql\" AS metric_path,\n    \"careteam_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of CareTeam resources that do not have an encounter reference recorded\" AS description,\n    \"CareTeam ref. Enc - unrecorded\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_encounter_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have an encounter reference recorded\" AS description,\n    \"SerReq ref. Enc - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_patient_unresolved.sql\" AS metric_path,\n    \"condition_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Condition resources that reference a non-existent patient\" AS description,\n    \"Cond ref. Patient - non-exist\" AS short_description,\n    \"Condition\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/person_count.sql\" AS metric_path,\n    \"person_count\" AS metric_name,\n    \"Count of valid Person resources\" AS description,\n    \"Person resources\" AS short_description,\n    \"Person\" AS primary_resource,\n    ['id'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date of person's earliest clinical encounter\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this person's record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_medicationrequest_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent parent medication request\" AS description,\n    \"MedReq ref. MedReq - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['requester.practitionerId', 'basedOn.medicationRequestId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql\" AS metric_path,\n    \"allergyintolerance_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that do not have an encounter reference recorded\" AS description,\n    \"Allergy ref. Enc - unrecorded\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"careteam_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of CareTeam resources that reference a non-existent practitioner\" AS description,\n    \"CareTeam ref. Prac - non-exist\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['participant.member.practitionerId'] AS primary_fields,\n    ['Practitioner'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"procedure_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of LDA Procedure resources that reference a non-existent practitioner\" AS description,\n    \"LDA Proc ref. Prac - non-exist\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['performer.actor.practitionerId'] AS primary_fields,\n    ['Practitioner'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have an encounter reference recorded\" AS description,\n    \"DiagRep ref. Enc - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_observation_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent observation\" AS description,\n    \"DiagRep ref. Obs - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['result.observationId'] AS primary_fields,\n    ['Observation'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_count.sql\" AS metric_path,\n    \"servicerequest_count\" AS metric_name,\n    \"Count of valid ServiceRequest resources\" AS description,\n    \"ServiceRequest resources\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"intent\" AS dimension_b,\n    \"The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the service request\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_patient_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_patient_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have a patient reference recorded\" AS description,\n    \"MedReq ref. Patient - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medication_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_medication_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent medication\" AS description,\n    \"MedReq ref. Med - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['requester.practitionerId', 'medication.reference.medicationId'] AS primary_fields,\n    ['Medication'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded\" AS description,\n    \"MedReq ref. Prac - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['requester.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/location_count.sql\" AS metric_path,\n    \"location_count\" AS metric_name,\n    \"Count of valid Location resources\" AS description,\n    \"Location resources\" AS short_description,\n    \"Location\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the location (active | suspended | inactive)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent encounter\" AS description,\n    \"MedReq ref. Enc - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_patient_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_patient_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have a patient reference recorded\" AS description,\n    \"SerReq ref. Patient - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_patient_undefined.sql\" AS metric_path,\n    \"allergyintolerance_reference_patient_undefined\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that do not have a patient reference recorded\" AS description,\n    \"Allergy ref. Patient - unrecorded\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    ['patient.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_count.sql\" AS metric_path,\n    \"medicationstatement_count\" AS metric_name,\n    \"Count of valid MedicationStatement resources\" AS description,\n    \"MedicationStatement resources\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_encounter_undefined.sql\" AS metric_path,\n    \"condition_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of Condition resources that do not have an encounter reference recorded\" AS description,\n    \"Cond ref. Enc - unrecorded\" AS short_description,\n    \"Condition\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_patient_unresolved.sql\" AS metric_path,\n    \"medicationstatement_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of MedicationStatement resources that reference a non-existent patient\" AS description,\n    \"MedStat ref. Patient - non-exist\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['id'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_count.sql\" AS metric_path,\n    \"diagnosticreport_count\" AS metric_name,\n    \"Count of valid DiagnosticReport resources\" AS description,\n    \"DiagnosticReport resources\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_count.sql\" AS metric_path,\n    \"documentreference_count\" AS metric_name,\n    \"Count of valid DocumentReference resources\" AS description,\n    \"DocumentReference resources\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_patient_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_patient_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have a patient reference recorded\" AS description,\n    \"DiagRep ref. Patient - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_count.sql\" AS metric_path,\n    \"careteam_count\" AS metric_name,\n    \"Count of valid CareTeam resources\" AS description,\n    \"CareTeam resources\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_medicationrequest_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have a parent medication request reference recorded\" AS description,\n    \"MedReq ref. MedReq - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['requester.practitionerId', 'basedOn.medicationRequestId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql\" AS metric_path,\n    \"medicationstatement_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of MedicationStatement resources that reference a non-existent encounter\" AS description,\n    \"MedStat ref. Enc - non-exist\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['context.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent practitioner\" AS description,\n    \"DiagRep ref. Prac - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['performer.practitionerId'] AS primary_fields,\n    ['Practitioner'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_patient_unresolved.sql\" AS metric_path,\n    \"careteam_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of CareTeam resources that reference a non-existent patient\" AS description,\n    \"CareTeam ref. Patient - non-exist\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_patient_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent patient\" AS description,\n    \"SerReq ref. Patient - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent patient\" AS description,\n    \"DiagRep ref. Patient - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_encounter_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have an encounter reference recorded\" AS description,\n    \"MedAdmin ref. Enc - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['context.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_encounter_unresolved.sql\" AS metric_path,\n    \"observation_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of Observation resources that reference a non-existent encounter\" AS description,\n    \"Obs ref. Enc - non-exist\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_medication_undefined.sql\" AS metric_path,\n    \"medicationstatement_reference_medication_undefined\" AS metric_name,\n    \"Proportion of MedicationStatement resources that do not have an medication reference recorded\" AS description,\n    \"MedStat ref. Med - unrecorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['medication.reference.medicationId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_patient_undefined.sql\" AS metric_path,\n    \"condition_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Condition resources that do not have a patient reference recorded\" AS description,\n    \"Cond ref. Patient - unrecorded\" AS short_description,\n    \"Condition\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/organization_count.sql\" AS metric_path,\n    \"organization_count\" AS metric_name,\n    \"Count of valid Organization resources\" AS description,\n    \"Organization resources\" AS short_description,\n    \"Organization\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this organization is active\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/practitioner_count.sql\" AS metric_path,\n    \"practitioner_count\" AS metric_name,\n    \"Count of valid Practitioner resources\" AS description,\n    \"Practitioner resources\" AS short_description,\n    \"Practitioner\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this practitioner's record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_encounter_undefined.sql\" AS metric_path,\n    \"medicationstatement_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of MedicationStatement resources that do not have an encounter reference recorded\" AS description,\n    \"MedStat ref. Enc - unrecorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['context.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_count.sql\" AS metric_path,\n    \"medicationrequest_count\" AS metric_name,\n    \"Count of valid MedicationRequest resources\" AS description,\n    \"MedicationRequest resources\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"intent\" AS dimension_b,\n    \"The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_patient_unresolved.sql\" AS metric_path,\n    \"observation_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Observation resources that reference a non-existent patient\" AS description,\n    \"Obs ref. Patient - non-exist\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_encounter_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent encounter\" AS description,\n    \"SerReq ref. Enc - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_quantity_value.sql\" AS metric_path,\n    \"observation_quantity_value\" AS metric_name,\n    \"Proportion of observations with a value recorded\" AS description,\n    \"Obs value recorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['value.quantity.value'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_patient_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent patient\" AS description,\n    \"MedReq ref. Patient - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['id'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medication_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_medication_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent medication\" AS description,\n    \"MedAdmin ref. Med - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['context.encounterId', 'medication.reference.medicationId'] AS primary_fields,\n    ['Medication'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_servicerequest_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have a service request reference recorded\" AS description,\n    \"DiagRep ref. SerReq - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['basedOn.serviceRequestId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_count.sql\" AS metric_path,\n    \"condition_count\" AS metric_name,\n    \"Count of valid Condition resources\" AS description,\n    \"Condition resources\" AS short_description,\n    \"Condition\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent encounter\" AS description,\n    \"MedAdmin ref. Enc - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['context.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_patient_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent patient\" AS description,\n    \"MedAdmin ref. Patient - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_patient_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_patient_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have a patient reference recorded\" AS description,\n    \"MedAdmin ref. Patient - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_binary_undefined.sql\" AS metric_path,\n    \"composition_reference_binary_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have a binary reference recorded\" AS description,\n    \"Comp ref. Binary - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['section.entry.binaryId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent encounter\" AS description,\n    \"DiagRep ref. Enc - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_count.sql\" AS metric_path,\n    \"composition_count\" AS metric_name,\n    \"Count of valid Composition resources\" AS description,\n    \"Composition resources\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_location_unresolved.sql\" AS metric_path,\n    \"encounter_reference_location_unresolved\" AS metric_name,\n    \"Proportion of Encounter resources that reference a non-existent location\" AS description,\n    \"Enc ref. Loc - non-exist\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    ['location.location.locationId'] AS primary_fields,\n    ['Location'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_encounter_unresolved.sql\" AS metric_path,\n    \"careteam_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of CareTeam resources that reference a non-existent encounter\" AS description,\n    \"CareTeam ref. Enc - non-exist\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_patient_unresolved.sql\" AS metric_path,\n    \"composition_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent patient\" AS description,\n    \"Comp ref. Patient - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent practitioner\" AS description,\n    \"SerReq ref. Prac - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['requester.practitionerId'] AS primary_fields,\n    ['Practitioner'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_medication_unresolved.sql\" AS metric_path,\n    \"medicationstatement_reference_medication_unresolved\" AS metric_name,\n    \"Proportion of MedicationStatement resources that reference a non-existent medication\" AS description,\n    \"MedStat ref. Med - non-exist\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['medication.reference.medicationId'] AS primary_fields,\n    ['Medication'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_count.sql\" AS metric_path,\n    \"procedure_count\" AS metric_name,\n    \"Count of valid Procedure resources\" AS description,\n    \"Procedure resources\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"performed.period.start\" AS metric_date_field,\n    \"Procedure performed period start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_location_undefined.sql\" AS metric_path,\n    \"encounter_reference_location_undefined\" AS metric_name,\n    \"Proportion of Encounter resources that do not have a location reference recorded\" AS description,\n    \"Enc ref. Loc - unrecorded\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    ['location.location.locationId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_practitioner_undefined.sql\" AS metric_path,\n    \"composition_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have a practitioner reference recorded\" AS description,\n    \"Comp ref. Prac - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['author.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_servicerequest_unresolved.sql\" AS metric_path,\n    \"observation_reference_servicerequest_unresolved\" AS metric_name,\n    \"Proportion of Observation resources that reference a non-existent service request\" AS description,\n    \"Obs ref. SerReq - non-exist\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['encounter.encounterId', 'basedOn.serviceRequestId'] AS primary_fields,\n    ['ServiceRequest'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medication_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_medication_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have an medication reference recorded\" AS description,\n    \"MedAdmin ref. Med - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['context.encounterId', 'medication.reference.medicationId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_encounter_unresolved.sql\" AS metric_path,\n    \"condition_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of Condition resources that reference a non-existent encounter\" AS description,\n    \"Cond ref. Enc - non-exist\" AS short_description,\n    \"Condition\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_encounter_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have an encounter reference recorded\" AS description,\n    \"MedReq ref. Enc - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_practitioner_undefined.sql\" AS metric_path,\n    \"procedure_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of LDA Procedure resources that do not have a practitioner reference recorded\" AS description,\n    \"LDA Proc ref. Prac - unrecorded\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['performer.actor.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_count.sql\" AS metric_path,\n    \"observation_count\" AS metric_name,\n    \"Count of valid Observation resources\" AS description,\n    \"Observation resources\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_servicerequest_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent service request\" AS description,\n    \"DiagRep ref. SerReq - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['basedOn.serviceRequestId'] AS primary_fields,\n    ['ServiceRequest'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_patient_undefined.sql\" AS metric_path,\n    \"medicationstatement_reference_patient_undefined\" AS metric_name,\n    \"Proportion of MedicationStatement resources that do not have a patient reference recorded\" AS description,\n    \"MedStat ref. Patient - unrecorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_encounter_undefined.sql\" AS metric_path,\n    \"composition_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have an encounter reference recorded\" AS description,\n    \"Comp ref. Enc - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_encounter_unresolved.sql\" AS metric_path,\n    \"procedure_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of LDA Procedure resources that reference a non-existent encounter\" AS description,\n    \"LDA Proc ref. Enc - non-exist\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_observation_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_observation_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have an observation reference recorded\" AS description,\n    \"DiagRep ref. Obs - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['result.observationId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_patient_undefined.sql\" AS metric_path,\n    \"observation_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Observation resources that do not have a patient reference recorded\" AS description,\n    \"Obs ref. Patient - unrecorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_encounter_unresolved.sql\" AS metric_path,\n    \"composition_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent encounter\" AS description,\n    \"Comp ref. Enc - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    ['Encounter'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have a practitioner reference recorded\" AS description,\n    \"DiagRep ref. Prac - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    ['performer.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_servicerequest_undefined.sql\" AS metric_path,\n    \"observation_reference_servicerequest_undefined\" AS metric_name,\n    \"Proportion of Observation resources that do not have a service request reference recorded\" AS description,\n    \"Obs ref. SerReq - unrecorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['encounter.encounterId', 'basedOn.serviceRequestId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/binary_count.sql\" AS metric_path,\n    \"binary_count\" AS metric_name,\n    \"Count of valid Binary resources\" AS description,\n    \"Binary resources\" AS short_description,\n    \"Binary\" AS primary_resource,\n    ['id'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_patient_undefined.sql\" AS metric_path,\n    \"careteam_reference_patient_undefined\" AS metric_name,\n    \"Proportion of CareTeam resources that do not have a patient reference recorded\" AS description,\n    \"CareTeam ref. Patient - unrecorded\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_servicerequest_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent service request\" AS description,\n    \"SerReq ref. SerReq - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    ['requester.practitionerId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_medicationrequest_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent medication request\" AS description,\n    \"MedAdmin ref. MedReq - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    ['context.encounterId', 'request.medicationRequestId'] AS primary_fields,\n    ['MedicationRequest'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_patient_undefined.sql\" AS metric_path,\n    \"procedure_reference_patient_undefined\" AS metric_name,\n    \"Proportion of LDA Procedure resources that do not have a patient reference recorded\" AS description,\n    \"LDA Proc ref. Patient - unrecorded\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_encounter_undefined.sql\" AS metric_path,\n    \"observation_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of Observation resources that do not have an encounter reference recorded\" AS description,\n    \"Obs ref. Enc - unrecorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medication_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_medication_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have an medication reference recorded\" AS description,\n    \"MedReq ref. Med - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    ['requester.practitionerId', 'medication.reference.medicationId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_encounter_undefined.sql\" AS metric_path,\n    \"procedure_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of LDA Procedure resources that do not have an encounter reference recorded\" AS description,\n    \"LDA Proc ref. Enc - unrecorded\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    ['encounter.encounterId'] AS primary_fields,\n    [] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_patient_unresolved.sql\" AS metric_path,\n    \"encounter_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Encounter resources that reference a non-existent patient\" AS description,\n    \"Enc ref. Patient - non-exist\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    ['subject.patientId'] AS primary_fields,\n    ['Patient'] AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`metric_all_definitions`"}, "model.fhir_dbt_analytics.project_variables": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.linking_api_datasource"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metadata", "project_variables"], "unique_id": "model.fhir_dbt_analytics.project_variables", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\nSELECT\n  '{{ var('organization') }}' AS `organization`,\n  '{{ var('database') }}' AS `database`,\n  '{{ var('schema') }}' AS `schema`,\n  '{{ var('source_system_default') }}' AS `source_system_default`,\n  '{{ var('site_default') }}' AS `site_default`,\n  '{{ var('data_transfer_type_default') }}' AS `data_transfer_type_default`,\n  '{{ var('timezone_default') }}' AS `timezone_default`,\n  {{ var('static_dataset') }} AS `static_dataset`,\n  '{{ var('earliest_date') }}' AS `earliest_date`,\n  '{{ var('latest_date') }}' AS `latest_date`,\n  {{ var('months_history') }} AS `months_history`,\n  {{ var('length_of_stay_cap') }} AS `length_of_stay_cap`,\n  {{ var('null_values') }} AS `null_values`,\n  {{ var('persist_all_metric_executions') }} AS `persist_all_metric_executions`,\n  '{{ var('cohort') }}' AS `cohort`,\n  '{{ var('cohort_snapshot_date') }}' AS `cohort_snapshot_date`,\n  '{{ var('drop_metric_tables') }}' AS `drop_metric_tables`,\n  {{ linking_api_datasource(\n    report_id='2de086de-b4ab-4431-8786-57ffa47e96b8',\n    datasource_list=[\n      ['mbdd', 'metric_by_day_dimensions'],\n      ['mbd', 'metric_by_day'],\n      ['mo', 'metric_overall'],\n      ['md', 'metric_definition'],\n      ['ftl', 'fhir_table_list'],\n      ['pv', 'project_variables'],\n      ['mel', 'metric_execution_log'],\n    ]) }} AS looker_studio_url", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metadata/project_variables.sql", "original_file_path": "models/metadata/project_variables.sql", "name": "project_variables", "alias": "project_variables", "checksum": {"name": "sha256", "checksum": "f360255f78f62f67c9b18b48024cbec8391726d4d1fb59ee474dbf9441d0b8ec"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Creates a single row table in the database containing values for all project variables.\n", "columns": {"looker_studio_url": {"name": "looker_studio_url", "description": "URL to create a Looker Studio dashboard displaying the metric outputs. The URL contains your bigquery project and dataset (defined in profiles.yml) as parameters. Copy this URL into a web browser to create a new dashboard.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metadata/metadata_config.yml", "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/project_variables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1677864399.7072031, "compiled_code": "\n\nSELECT\n  'Synthea' AS `organization`,\n  'bigquery-public-data' AS `database`,\n  'fhir_synthea' AS `schema`,\n  'Synthea-EHR' AS `source_system_default`,\n  'Synthea General Hospital' AS `site_default`,\n  'BigQuery' AS `data_transfer_type_default`,\n  'America/New_York' AS `timezone_default`,\n  True AS `static_dataset`,\n  '2019-03-17' AS `earliest_date`,\n  '2019-09-17' AS `latest_date`,\n  12 AS `months_history`,\n  90 AS `length_of_stay_cap`,\n  [''] AS `null_values`,\n  False AS `persist_all_metric_executions`,\n  'all_patients' AS `cohort`,\n  'today' AS `cohort_snapshot_date`,\n  'False' AS `drop_metric_tables`,\n  CONCAT(\n    'https://lookerstudio.google.com/reporting/create?',\n    'c.reportId=', '2de086de-b4ab-4431-8786-57ffa47e96b8','&ds.mbdd.type=TABLE',\n    '&ds.mbdd.projectId=', 'dqi-playground-teams',\n    '&ds.mbdd.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.mbdd.tableId=', 'metric_by_day_dimensions','&ds.mbd.type=TABLE',\n    '&ds.mbd.projectId=', 'dqi-playground-teams',\n    '&ds.mbd.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.mbd.tableId=', 'metric_by_day','&ds.mo.type=TABLE',\n    '&ds.mo.projectId=', 'dqi-playground-teams',\n    '&ds.mo.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.mo.tableId=', 'metric_overall','&ds.md.type=TABLE',\n    '&ds.md.projectId=', 'dqi-playground-teams',\n    '&ds.md.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.md.tableId=', 'metric_definition','&ds.ftl.type=TABLE',\n    '&ds.ftl.projectId=', 'dqi-playground-teams',\n    '&ds.ftl.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.ftl.tableId=', 'fhir_table_list','&ds.pv.type=TABLE',\n    '&ds.pv.projectId=', 'dqi-playground-teams',\n    '&ds.pv.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.pv.tableId=', 'project_variables','&ds.mel.type=TABLE',\n    '&ds.mel.projectId=', 'dqi-playground-teams',\n    '&ds.mel.datasetId=', 'gabbye_dbt_public_synthea_external',\n    '&ds.mel.tableId=', 'metric_execution_log'\n  ) AS looker_studio_url", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`project_variables`"}, "model.fhir_dbt_analytics.metric_overall": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_overall"], "unique_id": "model.fhir_dbt_analytics.metric_overall", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = None,\n  segment_by_dimensions = None\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metric_views/metric_overall.sql", "original_file_path": "models/metric_views/metric_overall.sql", "name": "metric_overall", "alias": "metric_overall", "checksum": {"name": "sha256", "checksum": "884aa34fb7dd32c5e8743b3cc770b40ef153133d1e0214a99ef75662325743b1"}, "tags": [], "refs": [["metric_definition"], ["metric"]], "sources": [], "metrics": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by source system only.\n\nEach row in this view is one metric calculation for a single source system over the entire\nanalysis period.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1677864399.713021}, "model.fhir_dbt_analytics.metric_by_year": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_year"], "unique_id": "model.fhir_dbt_analytics.metric_by_year", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'YEAR',\n  segment_by_dimensions = None\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metric_views/metric_by_year.sql", "original_file_path": "models/metric_views/metric_by_year.sql", "name": "metric_by_year", "alias": "metric_by_year", "checksum": {"name": "sha256", "checksum": "d26bd4c40eec0df422490d4178ef482e77516d4a86c5fbf0813cea2bff8da396"}, "tags": [], "refs": [["metric_definition"], ["metric"]], "sources": [], "metrics": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by by source system and metric year.\n\nEach row in this view is one metric calculation for a single source system and year.\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1677864399.712331}, "model.fhir_dbt_analytics.metric_by_day_dimensions": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_day_dimensions"], "unique_id": "model.fhir_dbt_analytics.metric_by_day_dimensions", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'DAY',\n  segment_by_dimensions = ['dimension_a', 'dimension_b', 'dimension_c']\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metric_views/metric_by_day_dimensions.sql", "original_file_path": "models/metric_views/metric_by_day_dimensions.sql", "name": "metric_by_day_dimensions", "alias": "metric_by_day_dimensions", "checksum": {"name": "sha256", "checksum": "b4bd81969151b51190c97b445b6f1cac94d241c94e8485618cb8c4dc36e6536d"}, "tags": [], "refs": [["metric_definition"], ["metric"]], "sources": [], "metrics": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`) and groups by source system, metric date and all slices.\n\nEach row is one metric calculation for a single source system, unique combination of slice\nvalues, and date.\n", "columns": {"calculation": {"name": "calculation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numerator": {"name": "numerator", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "denominator": {"name": "denominator", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measure": {"name": "measure", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1677864399.7103267}, "model.fhir_dbt_analytics.metric_by_year_dimensions": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_year_dimensions"], "unique_id": "model.fhir_dbt_analytics.metric_by_year_dimensions", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'YEAR',\n  segment_by_dimensions = ['dimension_a', 'dimension_b', 'dimension_c']\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metric_views/metric_by_year_dimensions.sql", "original_file_path": "models/metric_views/metric_by_year_dimensions.sql", "name": "metric_by_year_dimensions", "alias": "metric_by_year_dimensions", "checksum": {"name": "sha256", "checksum": "4f93eb89280e61fa993972e86dd01f32af6508e5789ddec47438767183a4230d"}, "tags": [], "refs": [["metric_definition"], ["metric"]], "sources": [], "metrics": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by source system, metric year and all slices.\n\nEach row in this view is one metric calculation for a single source system, unique combination\nof slice values and year.\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1677864399.7116277}, "model.fhir_dbt_analytics.metric_by_day": {"resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_day"], "unique_id": "model.fhir_dbt_analytics.metric_by_day", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'DAY',\n  segment_by_dimensions = None\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metric_views/metric_by_day.sql", "original_file_path": "models/metric_views/metric_by_day.sql", "name": "metric_by_day", "alias": "metric_by_day", "checksum": {"name": "sha256", "checksum": "dba4f53e2abb3bda7b01fefe320a1749954bce94c3c3d7ced2c3cbb820e9228b"}, "tags": [], "refs": [["metric_definition"], ["metric"]], "sources": [], "metrics": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by source system and metric date.\n\nEach row in this view is one metric calculation for a single source system and date.\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1677864399.7109945}, "model.fhir_dbt_analytics.Procedure_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Procedure FHIR resources", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Procedure_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Procedure_view"], "unique_id": "model.fhir_dbt_analytics.Procedure_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Procedure_view\",\n    meta = {\n      \"description\": \"Union of all Procedure FHIR resources\",\n      \"fhir_resource\": \"Procedure\",\n      \"metric_date_columns\": [\"performed.period.start\", \"performed.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Procedure_view.sql", "original_file_path": "models/fhir_resources/Procedure_view.sql", "name": "Procedure_view", "alias": "Procedure_view", "checksum": {"name": "sha256", "checksum": "753048802ced2e144ed715dbbd4426368eb304f05da17a880b65b7c2440a5150"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Procedure FHIR resources", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Procedure_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Procedure_view", "meta": {"description": "Union of all Procedure FHIR resources", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.4198096, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(COALESCE(performed.period.start, performed.dateTime)) = 10,\n      SAFE_CAST(COALESCE(performed.period.start, performed.dateTime) AS DATE),\n      DATE(\n        SAFE_CAST(COALESCE(performed.period.start, performed.dateTime) AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(COALESCE(performed.period.start, performed.dateTime)) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(COALESCE(performed.period.start, performed.dateTime) AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`procedure`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`"}, "model.fhir_dbt_analytics.AllergyIntolerance_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all AllergyIntolerance FHIR resources", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "AllergyIntolerance_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "AllergyIntolerance_view"], "unique_id": "model.fhir_dbt_analytics.AllergyIntolerance_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"AllergyIntolerance_view\",\n    meta = {\n      \"description\": \"Union of all AllergyIntolerance FHIR resources\",\n      \"fhir_resource\": \"AllergyIntolerance\",\n      \"metric_date_columns\": [\"recordedDate\"],\n      \"patient_reference_column\": \"patient\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/AllergyIntolerance_view.sql", "original_file_path": "models/fhir_resources/AllergyIntolerance_view.sql", "name": "AllergyIntolerance_view", "alias": "AllergyIntolerance_view", "checksum": {"name": "sha256", "checksum": "d70b668936c49a776947572e91a34cddd8f53e0cbdbbe1edabadb6ad25b4b302"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all AllergyIntolerance FHIR resources", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/AllergyIntolerance_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "AllergyIntolerance_view", "meta": {"description": "Union of all AllergyIntolerance FHIR resources", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "materialized": "view"}, "created_at": 1677864397.45072, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      SAFE_CAST(assertedDate AS DATE),\n      DATE(\n        SAFE_CAST(assertedDate AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(assertedDate AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`allergy_intolerance`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`"}, "model.fhir_dbt_analytics.Patient_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Patient FHIR resources", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": "id"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Patient_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Patient_view"], "unique_id": "model.fhir_dbt_analytics.Patient_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Patient_view\",\n    meta = {\n      \"description\": \"Union of all Patient FHIR resources\",\n      \"fhir_resource\": \"Patient\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": \"id\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Patient_view.sql", "original_file_path": "models/fhir_resources/Patient_view.sql", "name": "Patient_view", "alias": "Patient_view", "checksum": {"name": "sha256", "checksum": "1041bde08bd3e341762ce3693c160eef3e1e1888873f7ed732dff148839659ab"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Patient FHIR resources", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": "id"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Patient_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Patient_view", "meta": {"description": "Union of all Patient FHIR resources", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": "id"}, "materialized": "view"}, "created_at": 1677864397.460009, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    CAST(NULL AS DATE) AS metric_date,\n    CAST(NULL AS TIMESTAMP) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`patient`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`"}, "model.fhir_dbt_analytics.Encounter_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Encounter FHIR resources", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Encounter_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Encounter_view"], "unique_id": "model.fhir_dbt_analytics.Encounter_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Encounter_view\",\n    meta = {\n      \"description\": \"Union of all Encounter FHIR resources\",\n      \"fhir_resource\": \"Encounter\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Encounter_view.sql", "original_file_path": "models/fhir_resources/Encounter_view.sql", "name": "Encounter_view", "alias": "Encounter_view", "checksum": {"name": "sha256", "checksum": "f34177ca75beea94ecc28afe585c233be10b9c4465beafd6cc2db85ddd4183bf"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Encounter FHIR resources", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Encounter_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Encounter_view", "meta": {"description": "Union of all Encounter FHIR resources", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.4692173, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(period.start) = 10,\n      SAFE_CAST(period.start AS DATE),\n      DATE(\n        SAFE_CAST(period.start AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(period.start) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(period.start AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`encounter`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`"}, "model.fhir_dbt_analytics.MedicationStatement_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all MedicationStatement FHIR resources", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationStatement_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationStatement_view"], "unique_id": "model.fhir_dbt_analytics.MedicationStatement_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationStatement_view\",\n    meta = {\n      \"description\": \"Union of all MedicationStatement FHIR resources\",\n      \"fhir_resource\": \"MedicationStatement\",\n      \"metric_date_columns\": [\"dateAsserted\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationStatement_view.sql", "original_file_path": "models/fhir_resources/MedicationStatement_view.sql", "name": "MedicationStatement_view", "alias": "MedicationStatement_view", "checksum": {"name": "sha256", "checksum": "527b726716b123c1c0ddf61f72f07f6dee838ae164328f60096048193617d5b7"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all MedicationStatement FHIR resources", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationStatement_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationStatement_view", "meta": {"description": "Union of all MedicationStatement FHIR resources", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.4783943, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`"}, "model.fhir_dbt_analytics.MedicationAdministration_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all MedicationAdministration FHIR resources", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationAdministration_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationAdministration_view"], "unique_id": "model.fhir_dbt_analytics.MedicationAdministration_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationAdministration_view\",\n    meta = {\n      \"description\": \"Union of all MedicationAdministration FHIR resources\",\n      \"fhir_resource\": \"MedicationAdministration\",\n      \"metric_date_columns\": [\"effective.period.start\", \"effective.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationAdministration_view.sql", "original_file_path": "models/fhir_resources/MedicationAdministration_view.sql", "name": "MedicationAdministration_view", "alias": "MedicationAdministration_view", "checksum": {"name": "sha256", "checksum": "6191ab4a37a6e3619b66ca1ae503bd319016442b9c5e15cb9300762ce33b6a94"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all MedicationAdministration FHIR resources", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationAdministration_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationAdministration_view", "meta": {"description": "Union of all MedicationAdministration FHIR resources", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.4892375, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`"}, "model.fhir_dbt_analytics.PractitionerRole_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "PractitionerRole_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "PractitionerRole_view"], "unique_id": "model.fhir_dbt_analytics.PractitionerRole_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"PractitionerRole_view\",\n    meta = {\n      \"description\": \"Union of all PractitionerRole FHIR resources\",\n      \"fhir_resource\": \"PractitionerRole\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/PractitionerRole_view.sql", "original_file_path": "models/fhir_resources/PractitionerRole_view.sql", "name": "PractitionerRole_view", "alias": "PractitionerRole_view", "checksum": {"name": "sha256", "checksum": "99d24ee36aa3970fdf70e2782a561e5c92cf4991954cb61039b4b79de6205a12"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/PractitionerRole_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "PractitionerRole_view", "meta": {"description": "Union of all PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "materialized": "view"}, "created_at": 1677864397.4986556, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`"}, "model.fhir_dbt_analytics.Practitioner": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Practitioner_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Practitioner FHIR resources filtered by cohort", "fhir_resource": "Practitioner"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Practitioner", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Practitioner"], "unique_id": "model.fhir_dbt_analytics.Practitioner", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Practitioner_view' )}}\n{{ config(\n    name = \"Practitioner\",\n    meta = {\n      \"description\": \"Practitioner FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Practitioner\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Practitioner.sql", "original_file_path": "models/fhir_resources/Practitioner.sql", "name": "Practitioner", "alias": "Practitioner", "checksum": {"name": "sha256", "checksum": "9077cff3fa424856f1bec9a2a258f9d63b42b38d3dfbacecf1e55db142826657"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Practitioner_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Practitioner FHIR resources filtered by cohort", "fhir_resource": "Practitioner"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Practitioner.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Practitioner", "meta": {"description": "Practitioner FHIR resources filtered by cohort", "fhir_resource": "Practitioner"}, "materialized": "ephemeral"}, "created_at": 1677864397.5079873, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Practitioner_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Practitioner FHIR resources", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Practitioner_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Practitioner_view"], "unique_id": "model.fhir_dbt_analytics.Practitioner_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Practitioner_view\",\n    meta = {\n      \"description\": \"Union of all Practitioner FHIR resources\",\n      \"fhir_resource\": \"Practitioner\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Practitioner_view.sql", "original_file_path": "models/fhir_resources/Practitioner_view.sql", "name": "Practitioner_view", "alias": "Practitioner_view", "checksum": {"name": "sha256", "checksum": "1fb70740de7cde3d8e3b7f40ef8539122f7f21e74811bbb4e2acba50ad87cdf6"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Practitioner FHIR resources", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Practitioner_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Practitioner_view", "meta": {"description": "Union of all Practitioner FHIR resources", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1677864397.5212789, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    CAST(NULL AS DATE) AS metric_date,\n    CAST(NULL AS TIMESTAMP) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`practitioner`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`"}, "model.fhir_dbt_analytics.ImagingStudy": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.ImagingStudy_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "ImagingStudy FHIR resources filtered by cohort", "fhir_resource": "ImagingStudy"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "ImagingStudy", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ImagingStudy"], "unique_id": "model.fhir_dbt_analytics.ImagingStudy", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('ImagingStudy_view' )}}\n{{ config(\n    name = \"ImagingStudy\",\n    meta = {\n      \"description\": \"ImagingStudy FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"ImagingStudy\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/ImagingStudy.sql", "original_file_path": "models/fhir_resources/ImagingStudy.sql", "name": "ImagingStudy", "alias": "ImagingStudy", "checksum": {"name": "sha256", "checksum": "dea000b099144a8118b955142cfa069b1c44abef41c7e9031e1b2103f72925c9"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["ImagingStudy_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "ImagingStudy FHIR resources filtered by cohort", "fhir_resource": "ImagingStudy"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ImagingStudy.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "ImagingStudy", "meta": {"description": "ImagingStudy FHIR resources filtered by cohort", "fhir_resource": "ImagingStudy"}, "materialized": "ephemeral"}, "created_at": 1677864397.5316947, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ImagingStudy_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ImagingStudy_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Medication_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Medication_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Medication_view"], "unique_id": "model.fhir_dbt_analytics.Medication_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Medication_view\",\n    meta = {\n      \"description\": \"Union of all Medication FHIR resources\",\n      \"fhir_resource\": \"Medication\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Medication_view.sql", "original_file_path": "models/fhir_resources/Medication_view.sql", "name": "Medication_view", "alias": "Medication_view", "checksum": {"name": "sha256", "checksum": "7524ea1f7dc9369e866369f5c0dfbb1c3c047969a098a38bbadfe3195810e1a2"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Medication_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Medication_view", "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1677864397.5404682, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`"}, "model.fhir_dbt_analytics.MedicationRequest_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all MedicationRequest FHIR resources", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationRequest_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationRequest_view"], "unique_id": "model.fhir_dbt_analytics.MedicationRequest_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationRequest_view\",\n    meta = {\n      \"description\": \"Union of all MedicationRequest FHIR resources\",\n      \"fhir_resource\": \"MedicationRequest\",\n      \"metric_date_columns\": [\"authoredOn\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationRequest_view.sql", "original_file_path": "models/fhir_resources/MedicationRequest_view.sql", "name": "MedicationRequest_view", "alias": "MedicationRequest_view", "checksum": {"name": "sha256", "checksum": "c5dd4c81d71067d4b2d51a03640a5497c8940c15cb9cb94f04f8d44c706a25a0"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all MedicationRequest FHIR resources", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationRequest_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationRequest_view", "meta": {"description": "Union of all MedicationRequest FHIR resources", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.5497303, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(authoredOn) = 10,\n      SAFE_CAST(authoredOn AS DATE),\n      DATE(\n        SAFE_CAST(authoredOn AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(authoredOn) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(authoredOn AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`medication_request`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`"}, "model.fhir_dbt_analytics.Person_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Person FHIR resources", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Person_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Person_view"], "unique_id": "model.fhir_dbt_analytics.Person_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Person_view\",\n    meta = {\n      \"description\": \"Union of all Person FHIR resources\",\n      \"fhir_resource\": \"Person\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": \"link[].target\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Person_view.sql", "original_file_path": "models/fhir_resources/Person_view.sql", "name": "Person_view", "alias": "Person_view", "checksum": {"name": "sha256", "checksum": "27a837db5becc2478cc5ec830cbbb3541cc4386a35591c89c526868ce1782e09"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Person FHIR resources", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Person_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Person_view", "meta": {"description": "Union of all Person FHIR resources", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "materialized": "view"}, "created_at": 1677864397.5593605, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  [STRUCT(STRUCT('no_data' AS patientId) AS target)] AS link,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`"}, "model.fhir_dbt_analytics.ImagingStudy_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all ImagingStudy FHIR resources", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "ImagingStudy_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ImagingStudy_view"], "unique_id": "model.fhir_dbt_analytics.ImagingStudy_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"ImagingStudy_view\",\n    meta = {\n      \"description\": \"Union of all ImagingStudy FHIR resources\",\n      \"fhir_resource\": \"ImagingStudy\",\n      \"metric_date_columns\": [\"started\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/ImagingStudy_view.sql", "original_file_path": "models/fhir_resources/ImagingStudy_view.sql", "name": "ImagingStudy_view", "alias": "ImagingStudy_view", "checksum": {"name": "sha256", "checksum": "6672d80584989e7d11ceb59fa2b126a963da5c2e68b78241dec0d0abeea241dc"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all ImagingStudy FHIR resources", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ImagingStudy_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "ImagingStudy_view", "meta": {"description": "Union of all ImagingStudy FHIR resources", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.570631, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(started) = 10,\n      SAFE_CAST(started AS DATE),\n      DATE(\n        SAFE_CAST(started AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(started) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(started AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`imaging_study`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ImagingStudy_view`"}, "model.fhir_dbt_analytics.Location": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Location_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Location FHIR resources", "fhir_resource": "Location"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Location", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Location"], "unique_id": "model.fhir_dbt_analytics.Location", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Location_view' )}}\n{{ config(\n    name = \"Location\",\n    meta = {\n      \"description\": \"Location FHIR resources\",\n      \"fhir_resource\": \"Location\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Location.sql", "original_file_path": "models/fhir_resources/Location.sql", "name": "Location", "alias": "Location", "checksum": {"name": "sha256", "checksum": "dc8feebbc91d990c1643ec6e2a7067672982a4c5def7e3722785f9522f0900d3"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Location_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Location FHIR resources", "fhir_resource": "Location"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Location.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Location", "meta": {"description": "Location FHIR resources", "fhir_resource": "Location"}, "materialized": "ephemeral"}, "created_at": 1677864397.5798416, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.ServiceRequest_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all ServiceRequest FHIR resources", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "ServiceRequest_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ServiceRequest_view"], "unique_id": "model.fhir_dbt_analytics.ServiceRequest_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"ServiceRequest_view\",\n    meta = {\n      \"description\": \"Union of all ServiceRequest FHIR resources\",\n      \"fhir_resource\": \"ServiceRequest\",\n      \"metric_date_columns\": [\"authoredOn\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/ServiceRequest_view.sql", "original_file_path": "models/fhir_resources/ServiceRequest_view.sql", "name": "ServiceRequest_view", "alias": "ServiceRequest_view", "checksum": {"name": "sha256", "checksum": "f6b070ced0f9f1aaee2c3b1df5e1b1f2a3a528c3747d596bfbc74110a9abb21b"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all ServiceRequest FHIR resources", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ServiceRequest_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "ServiceRequest_view", "meta": {"description": "Union of all ServiceRequest FHIR resources", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.58887, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`"}, "model.fhir_dbt_analytics.CareTeam": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.CareTeam_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "CareTeam FHIR resources filtered by cohort", "fhir_resource": "CareTeam"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "CareTeam", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "CareTeam"], "unique_id": "model.fhir_dbt_analytics.CareTeam", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('CareTeam_view' )}}\n{{ config(\n    name = \"CareTeam\",\n    meta = {\n      \"description\": \"CareTeam FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"CareTeam\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/CareTeam.sql", "original_file_path": "models/fhir_resources/CareTeam.sql", "name": "CareTeam", "alias": "CareTeam", "checksum": {"name": "sha256", "checksum": "cb18d0555dd518d6cd40517165d2a9f50d3ebb6d347612210b7b229ae6835daf"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["CareTeam_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "CareTeam FHIR resources filtered by cohort", "fhir_resource": "CareTeam"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/CareTeam.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "CareTeam", "meta": {"description": "CareTeam FHIR resources filtered by cohort", "fhir_resource": "CareTeam"}, "materialized": "ephemeral"}, "created_at": 1677864397.5982811, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Location_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Location FHIR resources", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Location_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Location_view"], "unique_id": "model.fhir_dbt_analytics.Location_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Location_view\",\n    meta = {\n      \"description\": \"Union of all Location FHIR resources\",\n      \"fhir_resource\": \"Location\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Location_view.sql", "original_file_path": "models/fhir_resources/Location_view.sql", "name": "Location_view", "alias": "Location_view", "checksum": {"name": "sha256", "checksum": "c112e011881802814ab125a44cbe7953370ee34bde3452493445191ad144a19e"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Location FHIR resources", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Location_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Location_view", "meta": {"description": "Union of all Location FHIR resources", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1677864397.6065817, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`"}, "model.fhir_dbt_analytics.DiagnosticReport": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.DiagnosticReport_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "DiagnosticReport FHIR resources filtered by cohort", "fhir_resource": "DiagnosticReport"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "DiagnosticReport", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DiagnosticReport"], "unique_id": "model.fhir_dbt_analytics.DiagnosticReport", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('DiagnosticReport_view' )}}\n{{ config(\n    name = \"DiagnosticReport\",\n    meta = {\n      \"description\": \"DiagnosticReport FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"DiagnosticReport\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/DiagnosticReport.sql", "original_file_path": "models/fhir_resources/DiagnosticReport.sql", "name": "DiagnosticReport", "alias": "DiagnosticReport", "checksum": {"name": "sha256", "checksum": "3149bbba451621b98c707ed57af5ed5134c1efa2bbe0e0c378c66e382e587bd6"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["DiagnosticReport_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "DiagnosticReport FHIR resources filtered by cohort", "fhir_resource": "DiagnosticReport"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DiagnosticReport.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "DiagnosticReport", "meta": {"description": "DiagnosticReport FHIR resources filtered by cohort", "fhir_resource": "DiagnosticReport"}, "materialized": "ephemeral"}, "created_at": 1677864397.616991, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Procedure": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Procedure_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Procedure FHIR resources filtered by cohort", "fhir_resource": "Procedure"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Procedure", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Procedure"], "unique_id": "model.fhir_dbt_analytics.Procedure", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Procedure_view' )}}\n{{ config(\n    name = \"Procedure\",\n    meta = {\n      \"description\": \"Procedure FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Procedure\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Procedure.sql", "original_file_path": "models/fhir_resources/Procedure.sql", "name": "Procedure", "alias": "Procedure", "checksum": {"name": "sha256", "checksum": "22e7a5acf5d37d1bacb7cd41b47908eda07f2efced682dd9466485de7de40369"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Procedure_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Procedure FHIR resources filtered by cohort", "fhir_resource": "Procedure"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Procedure", "meta": {"description": "Procedure FHIR resources filtered by cohort", "fhir_resource": "Procedure"}, "materialized": "ephemeral"}, "created_at": 1677864397.6255598, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Person": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Person_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Person FHIR resources filtered by cohort", "fhir_resource": "Person"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Person", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Person"], "unique_id": "model.fhir_dbt_analytics.Person", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Person_view' )}}\n{{ config(\n    name = \"Person\",\n    meta = {\n      \"description\": \"Person FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Person\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Person.sql", "original_file_path": "models/fhir_resources/Person.sql", "name": "Person", "alias": "Person", "checksum": {"name": "sha256", "checksum": "4dc8a06eac3524c0965abbd6ab79d20a6e99e717c36a3069b82ab29603074dc5"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Person_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Person FHIR resources filtered by cohort", "fhir_resource": "Person"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Person.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Person", "meta": {"description": "Person FHIR resources filtered by cohort", "fhir_resource": "Person"}, "materialized": "ephemeral"}, "created_at": 1677864397.634201, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.ServiceRequest": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.ServiceRequest_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "ServiceRequest FHIR resources filtered by cohort", "fhir_resource": "ServiceRequest"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "ServiceRequest", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ServiceRequest"], "unique_id": "model.fhir_dbt_analytics.ServiceRequest", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('ServiceRequest_view' )}}\n{{ config(\n    name = \"ServiceRequest\",\n    meta = {\n      \"description\": \"ServiceRequest FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"ServiceRequest\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/ServiceRequest.sql", "original_file_path": "models/fhir_resources/ServiceRequest.sql", "name": "ServiceRequest", "alias": "ServiceRequest", "checksum": {"name": "sha256", "checksum": "ecf59996afec75c0528c6d73321fa7e644ca5b7ace1328e19d292f8d4e6d7efe"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["ServiceRequest_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "ServiceRequest FHIR resources filtered by cohort", "fhir_resource": "ServiceRequest"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ServiceRequest.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "ServiceRequest", "meta": {"description": "ServiceRequest FHIR resources filtered by cohort", "fhir_resource": "ServiceRequest"}, "materialized": "ephemeral"}, "created_at": 1677864397.6430464, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Organization_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Organization FHIR resources", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Organization_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Organization_view"], "unique_id": "model.fhir_dbt_analytics.Organization_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Organization_view\",\n    meta = {\n      \"description\": \"Union of all Organization FHIR resources\",\n      \"fhir_resource\": \"Organization\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Organization_view.sql", "original_file_path": "models/fhir_resources/Organization_view.sql", "name": "Organization_view", "alias": "Organization_view", "checksum": {"name": "sha256", "checksum": "015e8292eab6c1765a0bc788007e501ee8b6f3483eb8a793999ad1dabc14ebb4"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Organization FHIR resources", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Organization_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Organization_view", "meta": {"description": "Union of all Organization FHIR resources", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1677864397.6534667, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    CAST(NULL AS DATE) AS metric_date,\n    CAST(NULL AS TIMESTAMP) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`organization`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`"}, "model.fhir_dbt_analytics.MedicationDispense": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationDispense_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationDispense FHIR resources", "fhir_resource": "MedicationDispense"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationDispense", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationDispense"], "unique_id": "model.fhir_dbt_analytics.MedicationDispense", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationDispense_view' )}}\n{{ config(\n    name = \"MedicationDispense\",\n    meta = {\n      \"description\": \"MedicationDispense FHIR resources\",\n      \"fhir_resource\": \"MedicationDispense\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationDispense.sql", "original_file_path": "models/fhir_resources/MedicationDispense.sql", "name": "MedicationDispense", "alias": "MedicationDispense", "checksum": {"name": "sha256", "checksum": "d27aba37d6f91cf3f739215467e105b9ecab6e559c98c87296789ba936de26d6"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["MedicationDispense_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "MedicationDispense FHIR resources", "fhir_resource": "MedicationDispense"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationDispense.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationDispense", "meta": {"description": "MedicationDispense FHIR resources", "fhir_resource": "MedicationDispense"}, "materialized": "ephemeral"}, "created_at": 1677864397.6631715, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationDispense_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationDispense_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.MedicationAdministration": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationAdministration_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationAdministration FHIR resources filtered by cohort", "fhir_resource": "MedicationAdministration"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationAdministration", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationAdministration"], "unique_id": "model.fhir_dbt_analytics.MedicationAdministration", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationAdministration_view' )}}\n{{ config(\n    name = \"MedicationAdministration\",\n    meta = {\n      \"description\": \"MedicationAdministration FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"MedicationAdministration\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationAdministration.sql", "original_file_path": "models/fhir_resources/MedicationAdministration.sql", "name": "MedicationAdministration", "alias": "MedicationAdministration", "checksum": {"name": "sha256", "checksum": "dde9597fd89f47c20d902d0cc142b97703726bc325ab622cab7d8e4aed712d76"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["MedicationAdministration_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "MedicationAdministration FHIR resources filtered by cohort", "fhir_resource": "MedicationAdministration"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationAdministration.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationAdministration", "meta": {"description": "MedicationAdministration FHIR resources filtered by cohort", "fhir_resource": "MedicationAdministration"}, "materialized": "ephemeral"}, "created_at": 1677864397.6720629, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Encounter_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Encounter FHIR resources filtered by cohort", "fhir_resource": "Encounter"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Encounter", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Encounter"], "unique_id": "model.fhir_dbt_analytics.Encounter", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Encounter_view' )}}\n{{ config(\n    name = \"Encounter\",\n    meta = {\n      \"description\": \"Encounter FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Encounter\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Encounter.sql", "original_file_path": "models/fhir_resources/Encounter.sql", "name": "Encounter", "alias": "Encounter", "checksum": {"name": "sha256", "checksum": "5520bf135c4b0ed699b13e4abafce9e323a1506f01011d3999ef83ff64cd5624"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Encounter_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Encounter FHIR resources filtered by cohort", "fhir_resource": "Encounter"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Encounter", "meta": {"description": "Encounter FHIR resources filtered by cohort", "fhir_resource": "Encounter"}, "materialized": "ephemeral"}, "created_at": 1677864397.680964, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.DiagnosticReport_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all DiagnosticReport FHIR resources", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "DiagnosticReport_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DiagnosticReport_view"], "unique_id": "model.fhir_dbt_analytics.DiagnosticReport_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"DiagnosticReport_view\",\n    meta = {\n      \"description\": \"Union of all DiagnosticReport FHIR resources\",\n      \"fhir_resource\": \"DiagnosticReport\",\n      \"metric_date_columns\": [\"issued\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/DiagnosticReport_view.sql", "original_file_path": "models/fhir_resources/DiagnosticReport_view.sql", "name": "DiagnosticReport_view", "alias": "DiagnosticReport_view", "checksum": {"name": "sha256", "checksum": "41903aed806c28392698145884ca072793144a205a80e338e013ff9b282420c0"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all DiagnosticReport FHIR resources", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DiagnosticReport_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "DiagnosticReport_view", "meta": {"description": "Union of all DiagnosticReport FHIR resources", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.6914487, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,DATE(\n      issued,\n      'America/New_York'\n    ) AS metric_date,TIMESTAMP_TRUNC(\n      issued, \n      HOUR,\n      'America/New_York'\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`diagnostic_report`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`"}, "model.fhir_dbt_analytics.Condition": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Condition_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Condition FHIR resources filtered by cohort", "fhir_resource": "Condition"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Condition", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Condition"], "unique_id": "model.fhir_dbt_analytics.Condition", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Condition_view' )}}\n{{ config(\n    name = \"Condition\",\n    meta = {\n      \"description\": \"Condition FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Condition\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Condition.sql", "original_file_path": "models/fhir_resources/Condition.sql", "name": "Condition", "alias": "Condition", "checksum": {"name": "sha256", "checksum": "ae73dbdb9eea9cbeaef2292a9c381dace73e18194859c8630013525d12a17878"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Condition_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Condition FHIR resources filtered by cohort", "fhir_resource": "Condition"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Condition.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Condition", "meta": {"description": "Condition FHIR resources filtered by cohort", "fhir_resource": "Condition"}, "materialized": "ephemeral"}, "created_at": 1677864397.7012436, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.PractitionerRole": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.PractitionerRole_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "PractitionerRole", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "PractitionerRole"], "unique_id": "model.fhir_dbt_analytics.PractitionerRole", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('PractitionerRole_view' )}}\n{{ config(\n    name = \"PractitionerRole\",\n    meta = {\n      \"description\": \"PractitionerRole FHIR resources\",\n      \"fhir_resource\": \"PractitionerRole\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/PractitionerRole.sql", "original_file_path": "models/fhir_resources/PractitionerRole.sql", "name": "PractitionerRole", "alias": "PractitionerRole", "checksum": {"name": "sha256", "checksum": "99bdb73acb00ac757fdd361f00dd04f6379eae01173f986f1e6695fa4c58cf3c"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["PractitionerRole_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/PractitionerRole.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "PractitionerRole", "meta": {"description": "PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole"}, "materialized": "ephemeral"}, "created_at": 1677864397.7104876, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Composition": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Composition_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Composition FHIR resources filtered by cohort", "fhir_resource": "Composition"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Composition", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Composition"], "unique_id": "model.fhir_dbt_analytics.Composition", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Composition_view' )}}\n{{ config(\n    name = \"Composition\",\n    meta = {\n      \"description\": \"Composition FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Composition\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Composition.sql", "original_file_path": "models/fhir_resources/Composition.sql", "name": "Composition", "alias": "Composition", "checksum": {"name": "sha256", "checksum": "113d51086bc0c903dbd932adedfcca9fe4156c0dab6a403c8fcbde1fc3c7dde3"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Composition_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Composition FHIR resources filtered by cohort", "fhir_resource": "Composition"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Composition.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Composition", "meta": {"description": "Composition FHIR resources filtered by cohort", "fhir_resource": "Composition"}, "materialized": "ephemeral"}, "created_at": 1677864397.7195563, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Binary": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Binary_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Binary FHIR resources", "fhir_resource": "Binary"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Binary", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Binary"], "unique_id": "model.fhir_dbt_analytics.Binary", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Binary_view' )}}\n{{ config(\n    name = \"Binary\",\n    meta = {\n      \"description\": \"Binary FHIR resources\",\n      \"fhir_resource\": \"Binary\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Binary.sql", "original_file_path": "models/fhir_resources/Binary.sql", "name": "Binary", "alias": "Binary", "checksum": {"name": "sha256", "checksum": "0bb4d238ca2db51fcb99031eedd0e3c6200fc2b26ab1c953052ceefe307d8526"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Binary_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Binary FHIR resources", "fhir_resource": "Binary"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Binary.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Binary", "meta": {"description": "Binary FHIR resources", "fhir_resource": "Binary"}, "materialized": "ephemeral"}, "created_at": 1677864397.7301714, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Observation_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Observation FHIR resources", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Observation_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Observation_view"], "unique_id": "model.fhir_dbt_analytics.Observation_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Observation_view\",\n    meta = {\n      \"description\": \"Union of all Observation FHIR resources\",\n      \"fhir_resource\": \"Observation\",\n      \"metric_date_columns\": [\"effective.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Observation_view.sql", "original_file_path": "models/fhir_resources/Observation_view.sql", "name": "Observation_view", "alias": "Observation_view", "checksum": {"name": "sha256", "checksum": "57a59e3901fa128238910056c4529b206f34e14d9684ca77249137b7e5884c0b"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Observation FHIR resources", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Observation_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Observation_view", "meta": {"description": "Union of all Observation FHIR resources", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.8179042, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(effective.dateTime) = 10,\n      SAFE_CAST(effective.dateTime AS DATE),\n      DATE(\n        SAFE_CAST(effective.dateTime AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(effective.dateTime) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(effective.dateTime AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`observation`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`"}, "model.fhir_dbt_analytics.CareTeam_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all CareTeam FHIR resources", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "CareTeam_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "CareTeam_view"], "unique_id": "model.fhir_dbt_analytics.CareTeam_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"CareTeam_view\",\n    meta = {\n      \"description\": \"Union of all CareTeam FHIR resources\",\n      \"fhir_resource\": \"CareTeam\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/CareTeam_view.sql", "original_file_path": "models/fhir_resources/CareTeam_view.sql", "name": "CareTeam_view", "alias": "CareTeam_view", "checksum": {"name": "sha256", "checksum": "03deb0962a8f7a027dd3caf4fbeb1ea95e34d04422e33c548b19bdd6d603b3ab"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all CareTeam FHIR resources", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/CareTeam_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "CareTeam_view", "meta": {"description": "Union of all CareTeam FHIR resources", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.827596, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`"}, "model.fhir_dbt_analytics.MedicationDispense_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationDispense_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationDispense_view"], "unique_id": "model.fhir_dbt_analytics.MedicationDispense_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationDispense_view\",\n    meta = {\n      \"description\": \"Union of all Medication FHIR resources\",\n      \"fhir_resource\": \"MedicationDispense\",\n      \"metric_date_columns\": [\"whenPrepared\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationDispense_view.sql", "original_file_path": "models/fhir_resources/MedicationDispense_view.sql", "name": "MedicationDispense_view", "alias": "MedicationDispense_view", "checksum": {"name": "sha256", "checksum": "6c9c152a9ec98ffe61428c9224be624135fef775cb4e8d0ad41bcabdd4c2b96c"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationDispense_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationDispense_view", "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.8369403, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationDispense_view`"}, "model.fhir_dbt_analytics.Condition_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Condition FHIR resources", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Condition_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Condition_view"], "unique_id": "model.fhir_dbt_analytics.Condition_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Condition_view\",\n    meta = {\n      \"description\": \"Union of all Condition FHIR resources\",\n      \"fhir_resource\": \"Condition\",\n      \"metric_date_columns\": [\"recordedDate\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Condition_view.sql", "original_file_path": "models/fhir_resources/Condition_view.sql", "name": "Condition_view", "alias": "Condition_view", "checksum": {"name": "sha256", "checksum": "4a1a776100110dba6c4a4ff3db60ea5455089c543a19c5268ef54b17154836c3"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Condition FHIR resources", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Condition_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Condition_view", "meta": {"description": "Union of all Condition FHIR resources", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.846227, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      SAFE_CAST(assertedDate AS DATE),\n      DATE(\n        SAFE_CAST(assertedDate AS TIMESTAMP),'America/New_York'\n      )\n    ) AS metric_date,IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST(assertedDate AS TIMESTAMP),\n        HOUR,'America/New_York'\n      )\n    ) AS metric_hour,\n    'Synthea-EHR' AS source_system,\n    'Synthea General Hospital' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `bigquery-public-data`.`fhir_synthea`.`condition`\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`"}, "model.fhir_dbt_analytics.Binary_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Binary FHIR resources", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Binary_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Binary_view"], "unique_id": "model.fhir_dbt_analytics.Binary_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Binary_view\",\n    meta = {\n      \"description\": \"Union of all Binary FHIR resources\",\n      \"fhir_resource\": \"Binary\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Binary_view.sql", "original_file_path": "models/fhir_resources/Binary_view.sql", "name": "Binary_view", "alias": "Binary_view", "checksum": {"name": "sha256", "checksum": "a98cd1702bcf56f48e6c9310eafd5d05f0f4e32f7ed99630e252dfa5bcd5cd7e"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Binary FHIR resources", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Binary_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Binary_view", "meta": {"description": "Union of all Binary FHIR resources", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1677864397.8568928, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`"}, "model.fhir_dbt_analytics.Composition_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Composition FHIR resources", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Composition_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Composition_view"], "unique_id": "model.fhir_dbt_analytics.Composition_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Composition_view\",\n    meta = {\n      \"description\": \"Union of all Composition FHIR resources\",\n      \"fhir_resource\": \"Composition\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Composition_view.sql", "original_file_path": "models/fhir_resources/Composition_view.sql", "name": "Composition_view", "alias": "Composition_view", "checksum": {"name": "sha256", "checksum": "94aaad239d5b453dff9b48b0c3c64f70219eea935c09c1015f103ed28910ca7b"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all Composition FHIR resources", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Composition_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Composition_view", "meta": {"description": "Union of all Composition FHIR resources", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.866305, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`"}, "model.fhir_dbt_analytics.MedicationRequest": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationRequest_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationRequest FHIR resources filtered by cohort", "fhir_resource": "MedicationRequest"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationRequest", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationRequest"], "unique_id": "model.fhir_dbt_analytics.MedicationRequest", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationRequest_view' )}}\n{{ config(\n    name = \"MedicationRequest\",\n    meta = {\n      \"description\": \"MedicationRequest FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"MedicationRequest\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationRequest.sql", "original_file_path": "models/fhir_resources/MedicationRequest.sql", "name": "MedicationRequest", "alias": "MedicationRequest", "checksum": {"name": "sha256", "checksum": "385607ba8ea45661eac70df79e56152383a0d0ff189a31195332dbfeb3548f28"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["MedicationRequest_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "MedicationRequest FHIR resources filtered by cohort", "fhir_resource": "MedicationRequest"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationRequest.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationRequest", "meta": {"description": "MedicationRequest FHIR resources filtered by cohort", "fhir_resource": "MedicationRequest"}, "materialized": "ephemeral"}, "created_at": 1677864397.8756495, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Patient": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Patient_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Patient FHIR resources filtered by cohort", "fhir_resource": "Patient"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Patient", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Patient"], "unique_id": "model.fhir_dbt_analytics.Patient", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Patient_view' )}}\n{{ config(\n    name = \"Patient\",\n    meta = {\n      \"description\": \"Patient FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Patient\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Patient.sql", "original_file_path": "models/fhir_resources/Patient.sql", "name": "Patient", "alias": "Patient", "checksum": {"name": "sha256", "checksum": "98cfdcba4d98b1ca966bba771e0feb5b0e6afebc6711a9e17581cf741f67efec"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Patient_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Patient FHIR resources filtered by cohort", "fhir_resource": "Patient"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Patient", "meta": {"description": "Patient FHIR resources filtered by cohort", "fhir_resource": "Patient"}, "materialized": "ephemeral"}, "created_at": 1677864397.8844962, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Medication": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Medication_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Medication FHIR resources", "fhir_resource": "Medication"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Medication", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Medication"], "unique_id": "model.fhir_dbt_analytics.Medication", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Medication_view' )}}\n{{ config(\n    name = \"Medication\",\n    meta = {\n      \"description\": \"Medication FHIR resources\",\n      \"fhir_resource\": \"Medication\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Medication.sql", "original_file_path": "models/fhir_resources/Medication.sql", "name": "Medication", "alias": "Medication", "checksum": {"name": "sha256", "checksum": "777e1ecf77eea0da1bb3dca2c030dab939500b1f4eb6a81aec976859ad2322d7"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Medication_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Medication FHIR resources", "fhir_resource": "Medication"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Medication.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Medication", "meta": {"description": "Medication FHIR resources", "fhir_resource": "Medication"}, "materialized": "ephemeral"}, "created_at": 1677864397.8944657, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.DocumentReference": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.DocumentReference_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "DocumentReference FHIR resources filtered by cohort", "fhir_resource": "DocumentReference"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "DocumentReference", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DocumentReference"], "unique_id": "model.fhir_dbt_analytics.DocumentReference", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('DocumentReference_view' )}}\n{{ config(\n    name = \"DocumentReference\",\n    meta = {\n      \"description\": \"DocumentReference FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"DocumentReference\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/DocumentReference.sql", "original_file_path": "models/fhir_resources/DocumentReference.sql", "name": "DocumentReference", "alias": "DocumentReference", "checksum": {"name": "sha256", "checksum": "6a6aec531376fffcd072520eb8497521d90702296bd89e2e4ada6b9fdae837ca"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["DocumentReference_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "DocumentReference FHIR resources filtered by cohort", "fhir_resource": "DocumentReference"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DocumentReference.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "DocumentReference", "meta": {"description": "DocumentReference FHIR resources filtered by cohort", "fhir_resource": "DocumentReference"}, "materialized": "ephemeral"}, "created_at": 1677864397.9031656, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Organization": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Organization_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Organization FHIR resources filtered by cohort", "fhir_resource": "Organization"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Organization", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Organization"], "unique_id": "model.fhir_dbt_analytics.Organization", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Organization_view' )}}\n{{ config(\n    name = \"Organization\",\n    meta = {\n      \"description\": \"Organization FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Organization\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Organization.sql", "original_file_path": "models/fhir_resources/Organization.sql", "name": "Organization", "alias": "Organization", "checksum": {"name": "sha256", "checksum": "9e3a014f7056afade98f990ad59e166d5617467061cfefc7ef238fd2ba431e8f"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Organization_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Organization FHIR resources filtered by cohort", "fhir_resource": "Organization"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Organization.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Organization", "meta": {"description": "Organization FHIR resources filtered by cohort", "fhir_resource": "Organization"}, "materialized": "ephemeral"}, "created_at": 1677864397.911942, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.Observation": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Observation_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Observation FHIR resources filtered by cohort", "fhir_resource": "Observation"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "Observation", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Observation"], "unique_id": "model.fhir_dbt_analytics.Observation", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Observation_view' )}}\n{{ config(\n    name = \"Observation\",\n    meta = {\n      \"description\": \"Observation FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Observation\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/Observation.sql", "original_file_path": "models/fhir_resources/Observation.sql", "name": "Observation", "alias": "Observation", "checksum": {"name": "sha256", "checksum": "f6f5c5ac48c2734570c5fbc9e7b484222e166e6ea67a30eb68848627f15dc7d6"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["Observation_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Observation FHIR resources filtered by cohort", "fhir_resource": "Observation"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Observation.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "Observation", "meta": {"description": "Observation FHIR resources filtered by cohort", "fhir_resource": "Observation"}, "materialized": "ephemeral"}, "created_at": 1677864397.9207435, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.DocumentReference_view": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all DocumentReference FHIR resources", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "DocumentReference_view", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DocumentReference_view"], "unique_id": "model.fhir_dbt_analytics.DocumentReference_view", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"DocumentReference_view\",\n    meta = {\n      \"description\": \"Union of all DocumentReference FHIR resources\",\n      \"fhir_resource\": \"DocumentReference\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/DocumentReference_view.sql", "original_file_path": "models/fhir_resources/DocumentReference_view.sql", "name": "DocumentReference_view", "alias": "DocumentReference_view", "checksum": {"name": "sha256", "checksum": "1fac82574c3c23bb19b0d09a2dd3be709e5cb96967199c7b292df18b136975ee"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Union of all DocumentReference FHIR resources", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DocumentReference_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "DocumentReference_view", "meta": {"description": "Union of all DocumentReference FHIR resources", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1677864397.9306424, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'Synthea-EHR' AS source_system,\n  'Synthea General Hospital' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`"}, "model.fhir_dbt_analytics.AllergyIntolerance": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.AllergyIntolerance_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "AllergyIntolerance FHIR resources filtered by cohort", "fhir_resource": "AllergyIntolerance"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "AllergyIntolerance", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "AllergyIntolerance"], "unique_id": "model.fhir_dbt_analytics.AllergyIntolerance", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('AllergyIntolerance_view' )}}\n{{ config(\n    name = \"AllergyIntolerance\",\n    meta = {\n      \"description\": \"AllergyIntolerance FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"AllergyIntolerance\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/AllergyIntolerance.sql", "original_file_path": "models/fhir_resources/AllergyIntolerance.sql", "name": "AllergyIntolerance", "alias": "AllergyIntolerance", "checksum": {"name": "sha256", "checksum": "48ac667f1c6ef4fdaa2548315436d92963aa1ad9ee6fa0381ce40e328641b23c"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["AllergyIntolerance_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "AllergyIntolerance FHIR resources filtered by cohort", "fhir_resource": "AllergyIntolerance"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/AllergyIntolerance.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "AllergyIntolerance", "meta": {"description": "AllergyIntolerance FHIR resources filtered by cohort", "fhir_resource": "AllergyIntolerance"}, "materialized": "ephemeral"}, "created_at": 1677864397.9400716, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.MedicationStatement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationStatement_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationStatement FHIR resources filtered by cohort", "fhir_resource": "MedicationStatement"}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "name": "MedicationStatement", "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationStatement"], "unique_id": "model.fhir_dbt_analytics.MedicationStatement", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationStatement_view' )}}\n{{ config(\n    name = \"MedicationStatement\",\n    meta = {\n      \"description\": \"MedicationStatement FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"MedicationStatement\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "fhir_resources/MedicationStatement.sql", "original_file_path": "models/fhir_resources/MedicationStatement.sql", "name": "MedicationStatement", "alias": "MedicationStatement", "checksum": {"name": "sha256", "checksum": "edaeb18d9bb1940b77df0596758828b6fd2daa1e47e4739ea413ebdc5f40186f"}, "tags": [], "refs": [["fhir_table_list"], ["site_timezones"], ["MedicationStatement_view"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "MedicationStatement FHIR resources filtered by cohort", "fhir_resource": "MedicationStatement"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationStatement.sql", "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationStatement", "meta": {"description": "MedicationStatement FHIR resources filtered by cohort", "fhir_resource": "MedicationStatement"}, "materialized": "ephemeral"}, "created_at": 1677864397.948988, "compiled_code": "\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have a service request reference recorded", "short_description": "SerReq ref. SerReq - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_servicerequest_undefined"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have a service request reference recorded\",\n      \"short_description\": \"SerReq ref. SerReq - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql", "name": "servicerequest_reference_servicerequest_undefined", "alias": "servicerequest_reference_servicerequest_undefined", "checksum": {"name": "sha256", "checksum": "7cbd1638e21d9f757657018227845a41f40b6db1304ffc3ade76d6240752dd35"}, "tags": [], "refs": [["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have a service request reference recorded", "short_description": "SerReq ref. SerReq - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have a service request reference recorded", "short_description": "SerReq ref. SerReq - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864397.9578784, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_servicerequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_servicerequest_undefined`"}, "model.fhir_dbt_analytics.encounter_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that do not have a patient reference recorded", "short_description": "Enc ref. Patient - unrecorded", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.encounter_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that do not have a patient reference recorded\",\n      \"short_description\": \"Enc ref. Patient - unrecorded\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/encounter_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_patient_undefined.sql", "name": "encounter_reference_patient_undefined", "alias": "encounter_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "31b9f4724afac667a5378cce2fed1a1b87896bad5160bd400bbaf4467b5b60b0"}, "tags": [], "refs": [["Encounter"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that do not have a patient reference recorded", "short_description": "Enc ref. Patient - unrecorded", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that do not have a patient reference recorded", "short_description": "Enc ref. Patient - unrecorded", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1677864398.022829, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      class.code AS latest_encounter_class,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__Encounter AS E\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(latest_encounter_class AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`encounter_reference_patient_undefined`"}, "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication request reference recorded", "short_description": "MedAdmin ref. MedReq - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medicationrequest_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have an medication request reference recorded\",\n      \"short_description\": \"MedAdmin ref. MedReq - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'request.medicationRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('request', 'MedicationRequest') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql", "name": "medicationadministration_reference_medicationrequest_undefined", "alias": "medicationadministration_reference_medicationrequest_undefined", "checksum": {"name": "sha256", "checksum": "55d3a2342ea96fed5456a61d680153dad9b36e18eabbbb3e05f6b02f8389ac13"}, "tags": [], "refs": [["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication request reference recorded", "short_description": "MedAdmin ref. MedReq - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication request reference recorded", "short_description": "MedAdmin ref. MedReq - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.0353625, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medicationrequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_medicationrequest_undefined`"}, "model.fhir_dbt_analytics.medicationadministration_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid MedicationAdministration resources", "short_description": "MedicationAdministration resources", "primary_resource": "MedicationAdministration", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationAdministration.effective.dateTime", "metric_date_description": "MedicationAdministration effective date", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_count"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid MedicationAdministration resources\",\n      \"short_description\": \"MedicationAdministration resources\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"MedicationAdministration.effective.dateTime\",\n      \"metric_date_description\": \"MedicationAdministration effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('MedicationAdministration') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_count.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_count.sql", "name": "medicationadministration_count", "alias": "medicationadministration_count", "checksum": {"name": "sha256", "checksum": "f3fca7da5f0f656ce7f79bcd271d059cba230ed504889db1d487081d5661d2bc"}, "tags": [], "refs": [["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid MedicationAdministration resources", "short_description": "MedicationAdministration resources", "primary_resource": "MedicationAdministration", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationAdministration.effective.dateTime", "metric_date_description": "MedicationAdministration effective date", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid MedicationAdministration resources", "short_description": "MedicationAdministration resources", "primary_resource": "MedicationAdministration", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationAdministration.effective.dateTime", "metric_date_description": "MedicationAdministration effective date", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.0473974, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_count`"}, "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent encounter", "short_description": "Allergy ref. Enc - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that reference a non-existent encounter\",\n      \"short_description\": \"Allergy ref. Enc - non-exist\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' ) }} AS verification_status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql", "name": "allergyintolerance_reference_encounter_unresolved", "alias": "allergyintolerance_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "5e4a07cdfe27f1807da7ffe346f69f9e5c60036826b3f78a2656ac24be15bafb"}, "tags": [], "refs": [["Encounter"], ["AllergyIntolerance"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent encounter", "short_description": "Allergy ref. Enc - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent encounter", "short_description": "Allergy ref. Enc - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1677864398.058006, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`allergyintolerance_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.medication_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Medication resources", "short_description": "Medication resources", "primary_resource": "Medication", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the medication (active | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medication_count"], "unique_id": "model.fhir_dbt_analytics.medication_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Medication resources\",\n      \"short_description\": \"Medication resources\",\n      \"primary_resource\": \"Medication\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication (active | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status\n    FROM {{ ref('Medication') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medication_count.sql", "original_file_path": "models/metrics/data_quality/medication_count.sql", "name": "medication_count", "alias": "medication_count", "checksum": {"name": "sha256", "checksum": "8ca4c63192b94f0be44a6692dad80629c69718322fb97b13ba3b6dfc70a2c943"}, "tags": [], "refs": [["Medication"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Medication resources", "short_description": "Medication resources", "primary_resource": "Medication", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the medication (active | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medication_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Medication resources", "short_description": "Medication resources", "primary_resource": "Medication", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the medication (active | inactive | entered-in-error)"}}, "created_at": 1677864398.0793505, "compiled_code": "\n\n\nwith __dbt__cte__Medication as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medication_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Medication", "sql": " __dbt__cte__Medication as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medication_count`"}, "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent practitioner", "short_description": "MedReq ref. Prac - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_practitioner_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent practitioner\",\n      \"short_description\": \"MedReq ref. Prac - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('requester', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql", "name": "medicationrequest_reference_practitioner_unresolved", "alias": "medicationrequest_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "e81847ca7f41079c0d0475d47054ae67033f4ee2d234b33ca02e4a65b0e2230d"}, "tags": [], "refs": [["Practitioner"], ["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent practitioner", "short_description": "MedReq ref. Prac - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent practitioner", "short_description": "MedReq ref. Prac - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.0941525, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_practitioner_unresolved`"}, "model.fhir_dbt_analytics.composition_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have a patient reference recorded", "short_description": "Comp ref. Patient - unrecorded", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.composition_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have a patient reference recorded\",\n      \"short_description\": \"Comp ref. Patient - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_patient_undefined.sql", "name": "composition_reference_patient_undefined", "alias": "composition_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "3c7b4a1188abc7dcfaa263119f938239f068149bfae2767f640868bee3042b87"}, "tags": [], "refs": [["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have a patient reference recorded", "short_description": "Comp ref. Patient - unrecorded", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have a patient reference recorded", "short_description": "Comp ref. Patient - unrecorded", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864398.1089227, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_patient_undefined`"}, "model.fhir_dbt_analytics.encounter_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Encounter resources", "short_description": "Encounter resources", "primary_resource": "Encounter", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_count"], "unique_id": "model.fhir_dbt_analytics.encounter_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Encounter resources\",\n      \"short_description\": \"Encounter resources\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n    FROM {{ ref('Encounter') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/encounter_count.sql", "original_file_path": "models/metrics/data_quality/encounter_count.sql", "name": "encounter_count", "alias": "encounter_count", "checksum": {"name": "sha256", "checksum": "461df76065cbede3aa859ed9bfd0ce2cb3913eeafc4fcd13f3f351f70c3a73b2"}, "tags": [], "refs": [["Encounter"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Encounter resources", "short_description": "Encounter resources", "primary_resource": "Encounter", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Encounter resources", "short_description": "Encounter resources", "primary_resource": "Encounter", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1677864398.1218898, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      class.code AS latest_encounter_class,\n    FROM __dbt__cte__Encounter\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(latest_encounter_class AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`encounter_count`"}, "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent patient", "short_description": "Allergy ref. Patient - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that reference a non-existent patient\",\n      \"short_description\": \"Allergy ref. Patient - non-exist\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['patient.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification') }} AS verification_status,\n      {{ has_reference_value('patient', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('patient', 'Patient') }} AS reference_resolves\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql", "name": "allergyintolerance_reference_patient_unresolved", "alias": "allergyintolerance_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "c314630d3a5528ee688efd46cd5aa57ec99f866c95a013c5f46c8077139e3206"}, "tags": [], "refs": [["Patient"], ["AllergyIntolerance"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent patient", "short_description": "Allergy ref. Patient - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent patient", "short_description": "Allergy ref. Patient - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1677864398.1327846, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      'missing_or_invalid_codeableconcept_field' AS clinical_status,\n      'missing_or_invalid_codeableconcept_field' AS verification_status,\n      IF(patient.patientId IS NOT NULL AND patient.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(patient.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__AllergyIntolerance AS A\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(clinical_status AS STRING) AS dimension_a,\n  CAST(verification_status AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`allergyintolerance_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.procedure_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent patient", "short_description": "LDA Proc ref. Patient - non-exist", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that reference a non-existent patient\",\n      \"short_description\": \"LDA Proc ref. Patient - non-exist\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_patient_unresolved.sql", "name": "procedure_reference_patient_unresolved", "alias": "procedure_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "2e080b80c68c23ec402dc9575dbffee2961bc3d65a8efc595809d01973c3dec3"}, "tags": [], "refs": [["Patient"], ["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent patient", "short_description": "LDA Proc ref. Patient - non-exist", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent patient", "short_description": "LDA Proc ref. Patient - non-exist", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864398.1465893, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(subject.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__Procedure AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that do not have a practitioner reference recorded", "short_description": "CareTeam ref. Prac - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_practitioner_undefined"], "unique_id": "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"CareTeam ref. Prac - unrecorded\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['participant.member.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(C.participant) AS CP\n        WHERE member.practitionerId IS NOT NULL\n        AND member.practitionerId <> ''\n      ) AS has_reference_value\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_practitioner_undefined.sql", "name": "careteam_reference_practitioner_undefined", "alias": "careteam_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "706369131262323bd2ebb9c4ed860ba9dafc08af3365b76c26b03cb660d751ad"}, "tags": [], "refs": [["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that do not have a practitioner reference recorded", "short_description": "CareTeam ref. Prac - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_practitioner_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that do not have a practitioner reference recorded", "short_description": "CareTeam ref. Prac - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864398.1590078, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_reference_practitioner_undefined`"}, "model.fhir_dbt_analytics.allergyintolerance_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid AllergyIntolerance resources", "short_description": "AllergyIntolerance resources", "primary_resource": "AllergyIntolerance", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_count"], "unique_id": "model.fhir_dbt_analytics.allergyintolerance_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid AllergyIntolerance resources\",\n      \"short_description\": \"AllergyIntolerance resources\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' ) }} AS verification_status\n    FROM {{ ref('AllergyIntolerance') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/allergyintolerance_count.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_count.sql", "name": "allergyintolerance_count", "alias": "allergyintolerance_count", "checksum": {"name": "sha256", "checksum": "4f48e07f51de4e53fe0cfb962387b3069a49c5611e2335c02c65bd5b47e78795"}, "tags": [], "refs": [["AllergyIntolerance"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid AllergyIntolerance resources", "short_description": "AllergyIntolerance resources", "primary_resource": "AllergyIntolerance", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid AllergyIntolerance resources", "short_description": "AllergyIntolerance resources", "primary_resource": "AllergyIntolerance", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1677864398.1710823, "compiled_code": "\n\n\nWITH\n   __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      'missing_or_invalid_codeableconcept_field' AS clinical_status,\n      'missing_or_invalid_codeableconcept_field' AS verification_status\n    FROM __dbt__cte__AllergyIntolerance\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(clinical_status AS STRING) AS dimension_a,\n  CAST(verification_status AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`allergyintolerance_count`"}, "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent practitioner", "short_description": "Comp ref. Prac - non-exist", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_practitioner_unresolved"], "unique_id": "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent practitioner\",\n      \"short_description\": \"Comp ref. Prac - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['author.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('author', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('author', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_practitioner_unresolved.sql", "name": "composition_reference_practitioner_unresolved", "alias": "composition_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "4fa7d1ee3fa51ad48138f38ecf5497dc0d0419ee2714b32d682d6cc482dedb6c"}, "tags": [], "refs": [["Practitioner"], ["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent practitioner", "short_description": "Comp ref. Prac - non-exist", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_practitioner_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent practitioner", "short_description": "Comp ref. Prac - non-exist", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864398.1827865, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_practitioner_unresolved`"}, "model.fhir_dbt_analytics.practitionerrole_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid PractitionerRole resources", "short_description": "PractitionerRole resources", "primary_resource": "PractitionerRole", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner role record is in active use"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "practitionerrole_count"], "unique_id": "model.fhir_dbt_analytics.practitionerrole_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid PractitionerRole resources\",\n      \"short_description\": \"PractitionerRole resources\",\n      \"primary_resource\": \"PractitionerRole\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this practitioner role record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(active AS STRING) AS active\n    FROM {{ ref('PractitionerRole') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/practitionerrole_count.sql", "original_file_path": "models/metrics/data_quality/practitionerrole_count.sql", "name": "practitionerrole_count", "alias": "practitionerrole_count", "checksum": {"name": "sha256", "checksum": "c534a5fabdd1e25fa6588971c4c98cf1a6a48ede5ce3144635c1fb657f7c838d"}, "tags": [], "refs": [["PractitionerRole"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid PractitionerRole resources", "short_description": "PractitionerRole resources", "primary_resource": "PractitionerRole", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner role record is in active use"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/practitionerrole_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid PractitionerRole resources", "short_description": "PractitionerRole resources", "primary_resource": "PractitionerRole", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner role record is in active use"}}, "created_at": 1677864398.1959057, "compiled_code": "\n\n\nwith __dbt__cte__PractitionerRole as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'practitionerrole_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.PractitionerRole", "sql": " __dbt__cte__PractitionerRole as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`PractitionerRole_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`practitionerrole_count`"}, "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have a practitioner reference recorded", "short_description": "SerReq ref. Prac - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_practitioner_undefined"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"SerReq ref. Prac - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_practitioner_undefined.sql", "name": "servicerequest_reference_practitioner_undefined", "alias": "servicerequest_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "7c50af4cc2606ebc29ddecbe13b9bb9415a07c2ea05b8448fe6037c80f70d062"}, "tags": [], "refs": [["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have a practitioner reference recorded", "short_description": "SerReq ref. Prac - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_practitioner_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have a practitioner reference recorded", "short_description": "SerReq ref. Prac - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864398.2062137, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_practitioner_undefined`"}, "model.fhir_dbt_analytics.patient_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Patient resources", "short_description": "Patient resources", "primary_resource": "Patient", "primary_fields": ["id"], "secondary_resources": ["Encounter"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of patient's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this patient's record is in active use", "dimension_b": "gender", "dimension_b_description": "The patient's gender (male, female, other, unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_count"], "unique_id": "model.fhir_dbt_analytics.patient_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Patient resources\",\n      \"short_description\": \"Patient resources\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date of patient's earliest clinical encounter\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this patient's record is in active use\",\n      \"dimension_b\": \"gender\",\n      \"dimension_b_description\": \"The patient's gender (male, female, other, unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions(exclude_col='metric_date') }}\n      (\n        SELECT MIN(metric_date)\n        FROM {{ ref('Encounter') }} AS E\n        WHERE P.id = E.subject.patientId\n        AND E.class.code NOT IN (\n          'OTHER',\n          'PRENC',\n          'LAB',\n          'UNKNOWN',\n          'HIST'\n        )\n      ) AS metric_date,\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      gender\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}  \n\n{{- calculate_metric(metric_sql) -}}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/patient_count.sql", "original_file_path": "models/metrics/data_quality/patient_count.sql", "name": "patient_count", "alias": "patient_count", "checksum": {"name": "sha256", "checksum": "378f658572aff377c46fad63a1173e34aa56fc3282d180a778589aa306ab1de2"}, "tags": [], "refs": [["Encounter"], ["Patient"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Patient resources", "short_description": "Patient resources", "primary_resource": "Patient", "primary_fields": ["id"], "secondary_resources": ["Encounter"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of patient's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this patient's record is in active use", "dimension_b": "gender", "dimension_b_description": "The patient's gender (male, female, other, unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Patient resources", "short_description": "Patient resources", "primary_resource": "Patient", "primary_fields": ["id"], "secondary_resources": ["Encounter"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of patient's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this patient's record is in active use", "dimension_b": "gender", "dimension_b_description": "The patient's gender (male, female, other, unknown)"}}, "created_at": 1677864398.2209759, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n),  __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  site,\n      (\n        SELECT MIN(metric_date)\n        FROM __dbt__cte__Encounter AS E\n        WHERE P.id = E.subject.patientId\n        AND E.class.code NOT IN (\n          'OTHER',\n          'PRENC',\n          'LAB',\n          'UNKNOWN',\n          'HIST'\n        )\n      ) AS metric_date,\n      CAST(active AS STRING) AS active,\n      gender\n    FROM __dbt__cte__Patient AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(active AS STRING) AS dimension_a,\n  CAST(gender AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`patient_count`"}, "model.fhir_dbt_analytics.composition_reference_binary_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent binary resource", "short_description": "Comp ref. Binary - non-exist", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_binary_unresolved"], "unique_id": "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent binary resource\",\n      \"short_description\": \"Comp ref. Binary - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['section.entry.binaryId'],\n      \"secondary_resources\": ['Binary'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(C.section) AS CS\n        JOIN UNNEST(CS.entry) AS CSE\n        WHERE CSE.binaryid IS NOT NULL\n        AND CSE.binaryid <> ''\n      ) AS has_reference_value,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(C.section) AS CS\n        JOIN UNNEST(CS.entry) AS CSE\n        JOIN {{ ref('Binary') }} AS B\n          ON CSE.binaryid = B.id\n      ) AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_binary_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_binary_unresolved.sql", "name": "composition_reference_binary_unresolved", "alias": "composition_reference_binary_unresolved", "checksum": {"name": "sha256", "checksum": "0d7d6058085d5e71bf23d013425fe6dd6c41c20c04b9b39a329f85c15dec86cb"}, "tags": [], "refs": [["Binary"], ["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent binary resource", "short_description": "Comp ref. Binary - non-exist", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_binary_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent binary resource", "short_description": "Comp ref. Binary - non-exist", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864398.2325537, "compiled_code": "\n\n\nwith __dbt__cte__Binary as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_binary_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Binary", "sql": " __dbt__cte__Binary as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_binary_unresolved`"}, "model.fhir_dbt_analytics.careteam_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that do not have an encounter reference recorded", "short_description": "CareTeam ref. Enc - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.careteam_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that do not have an encounter reference recorded\",\n      \"short_description\": \"CareTeam ref. Enc - unrecorded\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_encounter_undefined.sql", "name": "careteam_reference_encounter_undefined", "alias": "careteam_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "2ef7af24175ef367dc6306676c18a96b81722f0c7e4d01fc4396997981a61634"}, "tags": [], "refs": [["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that do not have an encounter reference recorded", "short_description": "CareTeam ref. Enc - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that do not have an encounter reference recorded", "short_description": "CareTeam ref. Enc - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864398.2434103, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have an encounter reference recorded", "short_description": "SerReq ref. Enc - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have an encounter reference recorded\",\n      \"short_description\": \"SerReq ref. Enc - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_encounter_undefined.sql", "name": "servicerequest_reference_encounter_undefined", "alias": "servicerequest_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "787931ffd2692d95e49975fc05045d2537988a8723405b5a7d3ff15db93a553a"}, "tags": [], "refs": [["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have an encounter reference recorded", "short_description": "SerReq ref. Enc - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have an encounter reference recorded", "short_description": "SerReq ref. Enc - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864398.2566965, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.condition_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that reference a non-existent patient", "short_description": "Cond ref. Patient - non-exist", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that reference a non-existent patient\",\n      \"short_description\": \"Cond ref. Patient - non-exist\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/condition_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/condition_reference_patient_unresolved.sql", "name": "condition_reference_patient_unresolved", "alias": "condition_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "10d518de00e1c6db21287ad59f3a164fa330adaa5c94773b2ace8442de8bb2a5"}, "tags": [], "refs": [["Patient"], ["Condition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that reference a non-existent patient", "short_description": "Cond ref. Patient - non-exist", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that reference a non-existent patient", "short_description": "Cond ref. Patient - non-exist", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1677864398.2696674, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      'missing_or_invalid_codeableconcept_field' AS clinical_status,\n      'missing_or_invalid_codeableconcept_field' AS verification_status,\n      (SELECT c.code FROM UNNEST(category[SAFE_OFFSET(0)].coding) c WHERE c.system = 'http://terminology.hl7.org/CodeSystem/condition-category' ORDER BY c.code LIMIT 1) AS category,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(subject.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__Condition AS C\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(clinical_status AS STRING) AS dimension_a,\n  CAST(verification_status AS STRING) AS dimension_b,\n  CAST(category AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`condition_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.person_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Person resources", "short_description": "Person resources", "primary_resource": "Person", "primary_fields": ["id"], "calculation": "COUNT", "category": "Resource count", "secondary_resources": ["Encounter"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of person's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this person's record is in active use"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "person_count"], "unique_id": "model.fhir_dbt_analytics.person_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Person resources\",\n      \"short_description\": \"Person resources\",\n      \"primary_resource\": \"Person\",\n      \"primary_fields\": ['id'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"secondary_resources\": ['Encounter'],\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date of person's earliest clinical encounter\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this person's record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions(exclude_col='metric_date') }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      MIN(\n        (\n          SELECT MIN(metric_date)\n          FROM {{ ref('Encounter') }} AS E\n          WHERE l.target.patientid = E.subject.patientId\n          AND E.class.code NOT IN (\n            'OTHER',\n            'PRENC',\n            'LAB',\n            'UNKNOWN',\n            'HIST'\n          )\n        )\n      ) AS metric_date\n    FROM {{ ref('Person') }} AS P,\n    UNNEST(P.link) AS l\n    GROUP BY 1, 2, 3, 4, 5, 6\n{%- endset -%} \n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/person_count.sql", "original_file_path": "models/metrics/data_quality/person_count.sql", "name": "person_count", "alias": "person_count", "checksum": {"name": "sha256", "checksum": "370a39202eac76234d45ae6551648174ad525180d9eecfa749ad8dc5b0d374e1"}, "tags": [], "refs": [["Encounter"], ["Person"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Person resources", "short_description": "Person resources", "primary_resource": "Person", "primary_fields": ["id"], "calculation": "COUNT", "category": "Resource count", "secondary_resources": ["Encounter"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of person's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this person's record is in active use"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/person_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Person resources", "short_description": "Person resources", "primary_resource": "Person", "primary_fields": ["id"], "calculation": "COUNT", "category": "Resource count", "secondary_resources": ["Encounter"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of person's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this person's record is in active use"}}, "created_at": 1677864398.2845979, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n),  __dbt__cte__Person as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'person_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.Person", "sql": " __dbt__cte__Person as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Person_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`person_count`"}, "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent parent medication request", "short_description": "MedReq ref. MedReq - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medicationrequest_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent parent medication request\",\n      \"short_description\": \"MedReq ref. MedReq - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'basedOn.medicationRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'MedicationRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'MedicationRequest') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql", "name": "medicationrequest_reference_medicationrequest_unresolved", "alias": "medicationrequest_reference_medicationrequest_unresolved", "checksum": {"name": "sha256", "checksum": "c8569639d81f6b7e2258bae966178f2eb980ce1fb150586ab44ef8728f160b42"}, "tags": [], "refs": [["MedicationRequest"], ["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent parent medication request", "short_description": "MedReq ref. MedReq - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent parent medication request", "short_description": "MedReq ref. MedReq - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.2966654, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medicationrequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_medicationrequest_unresolved`"}, "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that do not have an encounter reference recorded", "short_description": "Allergy ref. Enc - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Allergy ref. Enc - unrecorded\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' ) }} AS verification_status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql", "name": "allergyintolerance_reference_encounter_undefined", "alias": "allergyintolerance_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "cd125198ad234b82768ffcad6eb6c6d92849fb812909846980942abff2e358ba"}, "tags": [], "refs": [["AllergyIntolerance"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that do not have an encounter reference recorded", "short_description": "Allergy ref. Enc - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that do not have an encounter reference recorded", "short_description": "Allergy ref. Enc - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1677864398.3123853, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`allergyintolerance_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that reference a non-existent practitioner", "short_description": "CareTeam ref. Prac - non-exist", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_practitioner_unresolved"], "unique_id": "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that reference a non-existent practitioner\",\n      \"short_description\": \"CareTeam ref. Prac - non-exist\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['participant.member.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(C.participant) AS CP\n        WHERE member.practitionerId IS NOT NULL\n        AND member.practitionerId <> ''\n      ) AS has_reference_value,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(C.participant) AS CP\n        JOIN {{ ref('Practitioner') }} AS P\n          ON CP.member.practitionerId = P.id\n      ) AS reference_resolves\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_practitioner_unresolved.sql", "name": "careteam_reference_practitioner_unresolved", "alias": "careteam_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "cc5af677f82cc325fe6f25d51214101519c274fb7cc30bbeaa9553daf4e7a218"}, "tags": [], "refs": [["Practitioner"], ["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that reference a non-existent practitioner", "short_description": "CareTeam ref. Prac - non-exist", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_practitioner_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that reference a non-existent practitioner", "short_description": "CareTeam ref. Prac - non-exist", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864398.3258145, "compiled_code": "\n\n\nwith __dbt__cte__Practitioner as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\n),  __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\n)"}, {"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_reference_practitioner_unresolved`"}, "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent practitioner", "short_description": "LDA Proc ref. Prac - non-exist", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_practitioner_unresolved"], "unique_id": "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that reference a non-existent practitioner\",\n      \"short_description\": \"LDA Proc ref. Prac - non-exist\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['performer.actor.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(P.performer) AS PP\n        WHERE actor.practitionerId IS NOT NULL\n        AND actor.practitionerId <> ''\n      ) AS has_reference_practitioner,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(P.performer) AS PP\n        JOIN {{ ref('Practitioner') }} AS P\n          ON PP.actor.practitionerId = P.id\n      ) AS reference_practitioner_resolved\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_practitioner - reference_practitioner_resolved)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_practitioner_unresolved.sql", "name": "procedure_reference_practitioner_unresolved", "alias": "procedure_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "fcae6a950ea4001ddd565fbf0a647473e23e5a41732368224200912580c0ef06"}, "tags": [], "refs": [["Practitioner"], ["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent practitioner", "short_description": "LDA Proc ref. Prac - non-exist", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_practitioner_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent practitioner", "short_description": "LDA Proc ref. Prac - non-exist", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864398.337503, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Practitioner as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\n),  __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(P.performer) AS PP\n        WHERE actor.practitionerId IS NOT NULL\n        AND actor.practitionerId <> ''\n      ) AS has_reference_practitioner,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(P.performer) AS PP\n        JOIN __dbt__cte__Practitioner AS P\n          ON PP.actor.practitionerId = P.id\n      ) AS reference_practitioner_resolved\n    FROM __dbt__cte__Procedure AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_practitioner_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_practitioner - reference_practitioner_resolved) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_practitioner - reference_practitioner_resolved), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\n)"}, {"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_reference_practitioner_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have an encounter reference recorded", "short_description": "DiagRep ref. Enc - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have an encounter reference recorded\",\n      \"short_description\": \"DiagRep ref. Enc - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql", "name": "diagnosticreport_reference_encounter_undefined", "alias": "diagnosticreport_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "6e0bc1b1cd78bc8f9323dff0958c8b957021bd3f207f64386840cf2da14d0619"}, "tags": [], "refs": [["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have an encounter reference recorded", "short_description": "DiagRep ref. Enc - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have an encounter reference recorded", "short_description": "DiagRep ref. Enc - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.3487744, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent observation", "short_description": "DiagRep ref. Obs - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": ["Observation"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_observation_unresolved"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent observation\",\n      \"short_description\": \"DiagRep ref. Obs - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['result.observationId'],\n      \"secondary_resources\": ['Observation'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('result', 'Observation') }} AS has_reference_value,\n      {{ reference_resolves('result', 'Observation') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql", "name": "diagnosticreport_reference_observation_unresolved", "alias": "diagnosticreport_reference_observation_unresolved", "checksum": {"name": "sha256", "checksum": "3fd40ba85962e8d971dd8c15f4304fe8ccc91ee4e159ba73ddcb4b26f36fda0e"}, "tags": [], "refs": [["Observation"], ["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent observation", "short_description": "DiagRep ref. Obs - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": ["Observation"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent observation", "short_description": "DiagRep ref. Obs - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": ["Observation"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.3627028, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n),  __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'https://g.co/fhir/harmonized/diagnostic_report/category' ORDER BY c.code LIMIT 1) AS category,\n      (SELECT SIGN(COUNT(*)) FROM UNNEST(result) WHERE observationId IS NOT NULL AND observationId NOT IN ('')) AS has_reference_value,\n      (SELECT SIGN(COUNT(*)) FROM UNNEST(result) AS RC JOIN __dbt__cte__Observation AS RR ON RC.observationId = RR.id) AS reference_resolves\n    FROM __dbt__cte__DiagnosticReport AS D\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_observation_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}, {"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_observation_unresolved`"}, "model.fhir_dbt_analytics.servicerequest_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid ServiceRequest resources", "short_description": "ServiceRequest resources", "primary_resource": "ServiceRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_count"], "unique_id": "model.fhir_dbt_analytics.servicerequest_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid ServiceRequest resources\",\n      \"short_description\": \"ServiceRequest resources\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"intent\",\n      \"dimension_b_description\": \"The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept('category', 'http://snomed.info/sct', index = 0, return_field='display') }} AS category\n    FROM {{ ref('ServiceRequest') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_count.sql", "original_file_path": "models/metrics/data_quality/servicerequest_count.sql", "name": "servicerequest_count", "alias": "servicerequest_count", "checksum": {"name": "sha256", "checksum": "abd2c2fe1a081c7294467e16ba4785fdb7acbf975c7110d26cb5dcf6bd036537"}, "tags": [], "refs": [["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid ServiceRequest resources", "short_description": "ServiceRequest resources", "primary_resource": "ServiceRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid ServiceRequest resources", "short_description": "ServiceRequest resources", "primary_resource": "ServiceRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the service request"}}, "created_at": 1677864398.3765855, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_count`"}, "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have a patient reference recorded", "short_description": "MedReq ref. Patient - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have a patient reference recorded\",\n      \"short_description\": \"MedReq ref. Patient - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_patient_undefined.sql", "name": "medicationrequest_reference_patient_undefined", "alias": "medicationrequest_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "f65f65260f04d6434007ab02b564f65e80d6f69c22bedef8ce66d8caa46fca54"}, "tags": [], "refs": [["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have a patient reference recorded", "short_description": "MedReq ref. Patient - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have a patient reference recorded", "short_description": "MedReq ref. Patient - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.3886626, "compiled_code": "\n\n\nWITH\n   __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      intent,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'http://terminology.hl7.org/CodeSystem/medicationrequest-category' ORDER BY c.code LIMIT 1) AS category,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__MedicationRequest AS M\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(intent AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_patient_undefined`"}, "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent medication", "short_description": "MedReq ref. Med - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medication_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent medication\",\n      \"short_description\": \"MedReq ref. Med - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": ['Medication'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value,\n      {{ reference_resolves('medication.reference', 'Medication') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_medication_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medication_unresolved.sql", "name": "medicationrequest_reference_medication_unresolved", "alias": "medicationrequest_reference_medication_unresolved", "checksum": {"name": "sha256", "checksum": "48af2f991af759f5d19624fd32c52e05b8f4e24c029dd44fd6a556c815c1daee"}, "tags": [], "refs": [["Medication"], ["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent medication", "short_description": "MedReq ref. Med - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medication_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent medication", "short_description": "MedReq ref. Med - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.402231, "compiled_code": "\n\n\nwith __dbt__cte__Medication as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\n),  __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medication_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Medication", "sql": " __dbt__cte__Medication as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Medication_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_medication_unresolved`"}, "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded", "short_description": "MedReq ref. Prac - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_practitioner_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded\",\n      \"short_description\": \"MedReq ref. Prac - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql", "name": "medicationrequest_reference_practitioner_undefined", "alias": "medicationrequest_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "f84907f494400c012caf135c8a2b45337cb561863d85478493305475a9086324"}, "tags": [], "refs": [["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded", "short_description": "MedReq ref. Prac - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded", "short_description": "MedReq ref. Prac - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.4184127, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_practitioner_undefined`"}, "model.fhir_dbt_analytics.location_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Location resources", "short_description": "Location resources", "primary_resource": "Location", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the location (active | suspended | inactive)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "location_count"], "unique_id": "model.fhir_dbt_analytics.location_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Location resources\",\n      \"short_description\": \"Location resources\",\n      \"primary_resource\": \"Location\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the location (active | suspended | inactive)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Location') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/location_count.sql", "original_file_path": "models/metrics/data_quality/location_count.sql", "name": "location_count", "alias": "location_count", "checksum": {"name": "sha256", "checksum": "88c813fbd78bed37f8c2072f2a33f389f3173f33427df9d9a5e452ee6a88a14a"}, "tags": [], "refs": [["Location"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Location resources", "short_description": "Location resources", "primary_resource": "Location", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the location (active | suspended | inactive)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/location_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Location resources", "short_description": "Location resources", "primary_resource": "Location", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the location (active | suspended | inactive)"}}, "created_at": 1677864398.4320643, "compiled_code": "\n\n\nwith __dbt__cte__Location as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'location_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Location", "sql": " __dbt__cte__Location as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`location_count`"}, "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent encounter", "short_description": "MedReq ref. Enc - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent encounter\",\n      \"short_description\": \"MedReq ref. Enc - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql", "name": "medicationrequest_reference_encounter_unresolved", "alias": "medicationrequest_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "d6988e317555076e506f5627a92a119bb2658a764e31257fc01603100cc1524d"}, "tags": [], "refs": [["Encounter"], ["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent encounter", "short_description": "MedReq ref. Enc - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent encounter", "short_description": "MedReq ref. Enc - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.4427865, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have a patient reference recorded", "short_description": "SerReq ref. Patient - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have a patient reference recorded\",\n      \"short_description\": \"SerReq ref. Patient - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_patient_undefined.sql", "name": "servicerequest_reference_patient_undefined", "alias": "servicerequest_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "333abf06026350d9872c30d0538d215068c7500a7f4252efd44c087a5089ffdc"}, "tags": [], "refs": [["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have a patient reference recorded", "short_description": "SerReq ref. Patient - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have a patient reference recorded", "short_description": "SerReq ref. Patient - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864398.4581869, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_patient_undefined`"}, "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that do not have a patient reference recorded", "short_description": "Allergy ref. Patient - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that do not have a patient reference recorded\",\n      \"short_description\": \"Allergy ref. Patient - unrecorded\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['patient.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification') }} AS verification_status,\n      {{ has_reference_value('patient', 'Patient') }} AS has_reference_value\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/allergyintolerance_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_patient_undefined.sql", "name": "allergyintolerance_reference_patient_undefined", "alias": "allergyintolerance_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "f11b810dd0481bacf9378ed8e0627b7b38f6de1ce1b092c20da4c27a4e3808b4"}, "tags": [], "refs": [["AllergyIntolerance"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that do not have a patient reference recorded", "short_description": "Allergy ref. Patient - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that do not have a patient reference recorded", "short_description": "Allergy ref. Patient - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1677864398.4717393, "compiled_code": "\n\n\nWITH\n   __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      'missing_or_invalid_codeableconcept_field' AS clinical_status,\n      'missing_or_invalid_codeableconcept_field' AS verification_status,\n      IF(patient.patientId IS NOT NULL AND patient.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__AllergyIntolerance AS A\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(clinical_status AS STRING) AS dimension_a,\n  CAST(verification_status AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`AllergyIntolerance_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`allergyintolerance_reference_patient_undefined`"}, "model.fhir_dbt_analytics.medicationstatement_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid MedicationStatement resources", "short_description": "MedicationStatement resources", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_count"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid MedicationStatement resources\",\n      \"short_description\": \"MedicationStatement resources\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('MedicationStatement') }} M\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_count.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_count.sql", "name": "medicationstatement_count", "alias": "medicationstatement_count", "checksum": {"name": "sha256", "checksum": "e83a0edd7a40a29b51a1a7ba5bd4b8235b2c5de6ec78bdd8cca57ffe93ef0ad4"}, "tags": [], "refs": [["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid MedicationStatement resources", "short_description": "MedicationStatement resources", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid MedicationStatement resources", "short_description": "MedicationStatement resources", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864398.4849725, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_count`"}, "model.fhir_dbt_analytics.condition_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that do not have an encounter reference recorded", "short_description": "Cond ref. Enc - unrecorded", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.condition_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Cond ref. Enc - unrecorded\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/condition_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/condition_reference_encounter_undefined.sql", "name": "condition_reference_encounter_undefined", "alias": "condition_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "9f71c27f7c99de9e1f30edd779cf2eb4a637316a988ba927f26b9f2db23d2b0f"}, "tags": [], "refs": [["Condition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that do not have an encounter reference recorded", "short_description": "Cond ref. Enc - unrecorded", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that do not have an encounter reference recorded", "short_description": "Cond ref. Enc - unrecorded", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1677864398.4959967, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`condition_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent patient", "short_description": "MedStat ref. Patient - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that reference a non-existent patient\",\n      \"short_description\": \"MedStat ref. Patient - non-exist\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_patient_unresolved.sql", "name": "medicationstatement_reference_patient_unresolved", "alias": "medicationstatement_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "b81575aa0dd04d604041dd4f0a1d03f7c68a4af3ed4ddd33d094d7c73f40249e"}, "tags": [], "refs": [["Patient"], ["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent patient", "short_description": "MedStat ref. Patient - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent patient", "short_description": "MedStat ref. Patient - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864398.5114794, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid DiagnosticReport resources", "short_description": "DiagnosticReport resources", "primary_resource": "DiagnosticReport", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_count"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid DiagnosticReport resources\",\n      \"short_description\": \"DiagnosticReport resources\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      id,\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category\n    FROM {{ ref('DiagnosticReport') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_count.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_count.sql", "name": "diagnosticreport_count", "alias": "diagnosticreport_count", "checksum": {"name": "sha256", "checksum": "8b9c26b3be9517caf772b1a7e7e5fa88f91576789cafd9e55129bdaa7c277a7f"}, "tags": [], "refs": [["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid DiagnosticReport resources", "short_description": "DiagnosticReport resources", "primary_resource": "DiagnosticReport", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid DiagnosticReport resources", "short_description": "DiagnosticReport resources", "primary_resource": "DiagnosticReport", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.52488, "compiled_code": "\n\n\nWITH\n   __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n),A AS (\n    SELECT\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      id,\n      status,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'https://g.co/fhir/harmonized/diagnostic_report/category' ORDER BY c.code LIMIT 1) AS category\n    FROM __dbt__cte__DiagnosticReport\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_count`"}, "model.fhir_dbt_analytics.documentreference_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid DocumentReference resources", "short_description": "DocumentReference resources", "primary_resource": "DocumentReference", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_count"], "unique_id": "model.fhir_dbt_analytics.documentreference_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid DocumentReference resources\",\n      \"short_description\": \"DocumentReference resources\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      content[SAFE_OFFSET(0)].format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %}\n    FROM {{ ref('DocumentReference') }} AS DR\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/documentreference_count.sql", "original_file_path": "models/metrics/data_quality/documentreference_count.sql", "name": "documentreference_count", "alias": "documentreference_count", "checksum": {"name": "sha256", "checksum": "68567e45f7698c7e6372238f2319ca67728dfad7f6ba2faf57b29fc728023942"}, "tags": [], "refs": [["DocumentReference"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid DocumentReference resources", "short_description": "DocumentReference resources", "primary_resource": "DocumentReference", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid DocumentReference resources", "short_description": "DocumentReference resources", "primary_resource": "DocumentReference", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}}, "created_at": 1677864398.5387046, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DocumentReference_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`documentreference_count`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have a patient reference recorded", "short_description": "DiagRep ref. Patient - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have a patient reference recorded\",\n      \"short_description\": \"DiagRep ref. Patient - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS DiagnosticReport\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_patient_undefined.sql", "name": "diagnosticreport_reference_patient_undefined", "alias": "diagnosticreport_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "92750af129868abc3f7594bc61f1601c23075c96d6b88b4fd999457c5a2e39c5"}, "tags": [], "refs": [["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have a patient reference recorded", "short_description": "DiagRep ref. Patient - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have a patient reference recorded", "short_description": "DiagRep ref. Patient - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.550927, "compiled_code": "\n\n\nWITH\n   __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'https://g.co/fhir/harmonized/diagnostic_report/category' ORDER BY c.code LIMIT 1) AS category,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__DiagnosticReport AS DiagnosticReport\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_patient_undefined`"}, "model.fhir_dbt_analytics.careteam_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid CareTeam resources", "short_description": "CareTeam resources", "primary_resource": "CareTeam", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_count"], "unique_id": "model.fhir_dbt_analytics.careteam_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid CareTeam resources\",\n      \"short_description\": \"CareTeam resources\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('CareTeam') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_count.sql", "original_file_path": "models/metrics/data_quality/careteam_count.sql", "name": "careteam_count", "alias": "careteam_count", "checksum": {"name": "sha256", "checksum": "763157d48d2040681a581cca398c499800e6b4175638f502bedfb35715083b74"}, "tags": [], "refs": [["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid CareTeam resources", "short_description": "CareTeam resources", "primary_resource": "CareTeam", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid CareTeam resources", "short_description": "CareTeam resources", "primary_resource": "CareTeam", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864398.5660717, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_count`"}, "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have a parent medication request reference recorded", "short_description": "MedReq ref. MedReq - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medicationrequest_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have a parent medication request reference recorded\",\n      \"short_description\": \"MedReq ref. MedReq - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'basedOn.medicationRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'MedicationRequest') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql", "name": "medicationrequest_reference_medicationrequest_undefined", "alias": "medicationrequest_reference_medicationrequest_undefined", "checksum": {"name": "sha256", "checksum": "1498766d694977195ada77d82ec923b11c652d9aaac7a954e2096ed2ae1823be"}, "tags": [], "refs": [["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have a parent medication request reference recorded", "short_description": "MedReq ref. MedReq - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have a parent medication request reference recorded", "short_description": "MedReq ref. MedReq - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.5772066, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medicationrequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_medicationrequest_undefined`"}, "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent encounter", "short_description": "MedStat ref. Enc - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that reference a non-existent encounter\",\n      \"short_description\": \"MedStat ref. Enc - non-exist\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('context', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql", "name": "medicationstatement_reference_encounter_unresolved", "alias": "medicationstatement_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "2dedb19f41e87db739d5b70945314ea47892b25e00b31444778d0d9293d08b3d"}, "tags": [], "refs": [["Encounter"], ["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent encounter", "short_description": "MedStat ref. Enc - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent encounter", "short_description": "MedStat ref. Enc - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864398.590897, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent practitioner", "short_description": "DiagRep ref. Prac - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_practitioner_unresolved"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent practitioner\",\n      \"short_description\": \"DiagRep ref. Prac - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['performer.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('performer', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('performer', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql", "name": "diagnosticreport_reference_practitioner_unresolved", "alias": "diagnosticreport_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "0eca94331300b01ccb7cd1bbc122bebff67843a48a9ef039a390accebef6ba46"}, "tags": [], "refs": [["Practitioner"], ["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent practitioner", "short_description": "DiagRep ref. Prac - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent practitioner", "short_description": "DiagRep ref. Prac - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.60575, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_practitioner_unresolved`"}, "model.fhir_dbt_analytics.careteam_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that reference a non-existent patient", "short_description": "CareTeam ref. Patient - non-exist", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that reference a non-existent patient\",\n      \"short_description\": \"CareTeam ref. Patient - non-exist\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_patient_unresolved.sql", "name": "careteam_reference_patient_unresolved", "alias": "careteam_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "edbb19c46cc5b0b7278aa5e82fa263cf267239816e0c337f362c61e17491a278"}, "tags": [], "refs": [["Patient"], ["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that reference a non-existent patient", "short_description": "CareTeam ref. Patient - non-exist", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that reference a non-existent patient", "short_description": "CareTeam ref. Patient - non-exist", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864398.6204007, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent patient", "short_description": "SerReq ref. Patient - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent patient\",\n      \"short_description\": \"SerReq ref. Patient - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_patient_unresolved.sql", "name": "servicerequest_reference_patient_unresolved", "alias": "servicerequest_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "cca3b0c5e061b2114e177517e69c0b8aaa646d7e9171884c7712e990e248b708"}, "tags": [], "refs": [["Patient"], ["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent patient", "short_description": "SerReq ref. Patient - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent patient", "short_description": "SerReq ref. Patient - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864398.6332443, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent patient", "short_description": "DiagRep ref. Patient - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent patient\",\n      \"short_description\": \"DiagRep ref. Patient - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql", "name": "diagnosticreport_reference_patient_unresolved", "alias": "diagnosticreport_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "f805909afe19e2eddff4bcb0e804b5112a1d8d9acd0f7ad12f01f9b0e1472423"}, "tags": [], "refs": [["Patient"], ["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent patient", "short_description": "DiagRep ref. Patient - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent patient", "short_description": "DiagRep ref. Patient - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.6476316, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'https://g.co/fhir/harmonized/diagnostic_report/category' ORDER BY c.code LIMIT 1) AS category,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(subject.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__DiagnosticReport AS D\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have an encounter reference recorded", "short_description": "MedAdmin ref. Enc - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have an encounter reference recorded\",\n      \"short_description\": \"MedAdmin ref. Enc - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value,\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_encounter_undefined.sql", "name": "medicationadministration_reference_encounter_undefined", "alias": "medicationadministration_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "2c77f44cef2abcef5c12a6b86ff633cc237fe028d43e169abea07ff5d33b475c"}, "tags": [], "refs": [["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have an encounter reference recorded", "short_description": "MedAdmin ref. Enc - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have an encounter reference recorded", "short_description": "MedAdmin ref. Enc - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.663542, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.observation_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that reference a non-existent encounter", "short_description": "Obs ref. Enc - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that reference a non-existent encounter\",\n      \"short_description\": \"Obs ref. Enc - non-exist\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/observation_reference_encounter_unresolved.sql", "name": "observation_reference_encounter_unresolved", "alias": "observation_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "e226935c3583b115d25ffe9a28913202e30caf2aa30cfea5a74d375dfd8869fc"}, "tags": [], "refs": [["Encounter"], ["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that reference a non-existent encounter", "short_description": "Obs ref. Enc - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that reference a non-existent encounter", "short_description": "Obs ref. Enc - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864398.6756055, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that do not have an medication reference recorded", "short_description": "MedStat ref. Med - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_medication_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that do not have an medication reference recorded\",\n      \"short_description\": \"MedStat ref. Med - unrecorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['medication.reference.medicationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_reference_medication_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_medication_undefined.sql", "name": "medicationstatement_reference_medication_undefined", "alias": "medicationstatement_reference_medication_undefined", "checksum": {"name": "sha256", "checksum": "7aa15a5cb82b6ab5f37c03babc7275f2880eae59c1553329342913e3c8c6134b"}, "tags": [], "refs": [["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that do not have an medication reference recorded", "short_description": "MedStat ref. Med - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_medication_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that do not have an medication reference recorded", "short_description": "MedStat ref. Med - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864398.6887376, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_medication_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_reference_medication_undefined`"}, "model.fhir_dbt_analytics.condition_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that do not have a patient reference recorded", "short_description": "Cond ref. Patient - unrecorded", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.condition_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that do not have a patient reference recorded\",\n      \"short_description\": \"Cond ref. Patient - unrecorded\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/condition_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/condition_reference_patient_undefined.sql", "name": "condition_reference_patient_undefined", "alias": "condition_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "8b3b4e6f850a27ff41d2d095017de7935621f3ba626b3cd9812c97341630a76e"}, "tags": [], "refs": [["Condition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that do not have a patient reference recorded", "short_description": "Cond ref. Patient - unrecorded", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that do not have a patient reference recorded", "short_description": "Cond ref. Patient - unrecorded", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1677864398.7027879, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      'missing_or_invalid_codeableconcept_field' AS clinical_status,\n      'missing_or_invalid_codeableconcept_field' AS verification_status,\n      (SELECT c.code FROM UNNEST(category[SAFE_OFFSET(0)].coding) c WHERE c.system = 'http://terminology.hl7.org/CodeSystem/condition-category' ORDER BY c.code LIMIT 1) AS category,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__Condition AS C\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(clinical_status AS STRING) AS dimension_a,\n  CAST(verification_status AS STRING) AS dimension_b,\n  CAST(category AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`condition_reference_patient_undefined`"}, "model.fhir_dbt_analytics.organization_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Organization resources", "short_description": "Organization resources", "primary_resource": "Organization", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this organization is active"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "organization_count"], "unique_id": "model.fhir_dbt_analytics.organization_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Organization resources\",\n      \"short_description\": \"Organization resources\",\n      \"primary_resource\": \"Organization\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this organization is active\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(active AS STRING) AS active\n    FROM {{ ref('Organization') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/organization_count.sql", "original_file_path": "models/metrics/data_quality/organization_count.sql", "name": "organization_count", "alias": "organization_count", "checksum": {"name": "sha256", "checksum": "bdcf85da0488443e9604aaf04cd1c4464dae7f922befb1450ebfd3585b00446c"}, "tags": [], "refs": [["Organization"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Organization resources", "short_description": "Organization resources", "primary_resource": "Organization", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this organization is active"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/organization_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Organization resources", "short_description": "Organization resources", "primary_resource": "Organization", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this organization is active"}}, "created_at": 1677864398.7188632, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Organization as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      CAST(active AS STRING) AS active\n    FROM __dbt__cte__Organization\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'organization_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(active AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Organization", "sql": " __dbt__cte__Organization as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Organization_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`organization_count`"}, "model.fhir_dbt_analytics.practitioner_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Practitioner resources", "short_description": "Practitioner resources", "primary_resource": "Practitioner", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner's record is in active use"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "practitioner_count"], "unique_id": "model.fhir_dbt_analytics.practitioner_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Practitioner resources\",\n      \"short_description\": \"Practitioner resources\",\n      \"primary_resource\": \"Practitioner\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this practitioner's record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(active AS STRING) AS active\n    FROM {{ ref('Practitioner') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/practitioner_count.sql", "original_file_path": "models/metrics/data_quality/practitioner_count.sql", "name": "practitioner_count", "alias": "practitioner_count", "checksum": {"name": "sha256", "checksum": "2fbb654d7522957415286a6071a436314245f7fae4d05c1df4f62b3e1e759cda"}, "tags": [], "refs": [["Practitioner"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Practitioner resources", "short_description": "Practitioner resources", "primary_resource": "Practitioner", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner's record is in active use"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/practitioner_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Practitioner resources", "short_description": "Practitioner resources", "primary_resource": "Practitioner", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner's record is in active use"}}, "created_at": 1677864398.7299316, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Practitioner as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      CAST(active AS STRING) AS active\n    FROM __dbt__cte__Practitioner\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'practitioner_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(active AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Practitioner_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`practitioner_count`"}, "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that do not have an encounter reference recorded", "short_description": "MedStat ref. Enc - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that do not have an encounter reference recorded\",\n      \"short_description\": \"MedStat ref. Enc - unrecorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_encounter_undefined.sql", "name": "medicationstatement_reference_encounter_undefined", "alias": "medicationstatement_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "4ede0ace00cc18b247292225564f7aa3c21021c03b98f087a9632c32e36eaa53"}, "tags": [], "refs": [["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that do not have an encounter reference recorded", "short_description": "MedStat ref. Enc - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that do not have an encounter reference recorded", "short_description": "MedStat ref. Enc - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864398.7409015, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.medicationrequest_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid MedicationRequest resources", "short_description": "MedicationRequest resources", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the medication request (inpatient | outpatient | community | discharge)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_count"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid MedicationRequest resources\",\n      \"short_description\": \"MedicationRequest resources\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"intent\",\n      \"dimension_b_description\": \"The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()) }} AS category,\n      FROM {{ ref('MedicationRequest') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_count.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_count.sql", "name": "medicationrequest_count", "alias": "medicationrequest_count", "checksum": {"name": "sha256", "checksum": "65d56c1edb7f73a16255b75ad6081251a084e3b839c23fafcbd7cc722ed07dce"}, "tags": [], "refs": [["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid MedicationRequest resources", "short_description": "MedicationRequest resources", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the medication request (inpatient | outpatient | community | discharge)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid MedicationRequest resources", "short_description": "MedicationRequest resources", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the medication request (inpatient | outpatient | community | discharge)"}}, "created_at": 1677864398.7533574, "compiled_code": "\n\n\nWITH\n   __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      intent,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'http://terminology.hl7.org/CodeSystem/medicationrequest-category' ORDER BY c.code LIMIT 1) AS category,\n      FROM __dbt__cte__MedicationRequest\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(intent AS STRING) AS dimension_b,\n  CAST(category AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_count`"}, "model.fhir_dbt_analytics.observation_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that reference a non-existent patient", "short_description": "Obs ref. Patient - non-exist", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that reference a non-existent patient\",\n      \"short_description\": \"Obs ref. Patient - non-exist\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/observation_reference_patient_unresolved.sql", "name": "observation_reference_patient_unresolved", "alias": "observation_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "8f373bb24d94e7cf21706ebc1b6e3c339daa3b57252f383131a4b7931a9a2c31"}, "tags": [], "refs": [["Patient"], ["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that reference a non-existent patient", "short_description": "Obs ref. Patient - non-exist", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that reference a non-existent patient", "short_description": "Obs ref. Patient - non-exist", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864398.767238, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(subject.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__Observation AS O\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent encounter\",\n      \"short_description\": \"SerReq ref. Enc - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_encounter_unresolved.sql", "name": "servicerequest_reference_encounter_unresolved", "alias": "servicerequest_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "208ceaf2064240b7f229d19a60333fdb9c6cc6e8360eb4e35765be8b3789a2ff"}, "tags": [], "refs": [["Encounter"], ["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864398.780696, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.observation_quantity_value": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of observations with a value recorded", "short_description": "Obs value recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_quantity_value"], "unique_id": "model.fhir_dbt_analytics.observation_quantity_value", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of observations with a value recorded\",\n      \"short_description\": \"Obs value recorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['value.quantity.value'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      IF({{ get_column_or_default('value.quantity.value') }} IS NOT NULL, 1, 0) AS has_value_quantity_value\n    FROM {{ ref('Observation') }}\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_value_quantity_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_quantity_value.sql", "original_file_path": "models/metrics/data_quality/observation_quantity_value.sql", "name": "observation_quantity_value", "alias": "observation_quantity_value", "checksum": {"name": "sha256", "checksum": "c72619a93d2f16d94040d49f5bade9879bfa4598f2ffea8e5d35cb7d2e03bb6b"}, "tags": [], "refs": [["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of observations with a value recorded", "short_description": "Obs value recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_quantity_value.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of observations with a value recorded", "short_description": "Obs value recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}}, "created_at": 1677864398.7953427, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      IF(value.quantity.value IS NOT NULL, 1, 0) AS has_value_quantity_value\n    FROM __dbt__cte__Observation\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_quantity_value' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_value_quantity_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_value_quantity_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_quantity_value`"}, "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent patient", "short_description": "MedReq ref. Patient - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent patient\",\n      \"short_description\": \"MedReq ref. Patient - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_patient_unresolved.sql", "name": "medicationrequest_reference_patient_unresolved", "alias": "medicationrequest_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "88cfd0b73d7f6bb80f47728f424278458fa1c0eb9ca79b1e331771fcfad92d0b"}, "tags": [], "refs": [["Patient"], ["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent patient", "short_description": "MedReq ref. Patient - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent patient", "short_description": "MedReq ref. Patient - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864398.8085809, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      intent,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'http://terminology.hl7.org/CodeSystem/medicationrequest-category' ORDER BY c.code LIMIT 1) AS category,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(subject.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__MedicationRequest AS M\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(intent AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication", "short_description": "MedAdmin ref. Med - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medication_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent medication\",\n      \"short_description\": \"MedAdmin ref. Med - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": ['Medication'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value,\n      {{ reference_resolves('medication.reference', 'Medication') }} AS reference_resolves\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_medication_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medication_unresolved.sql", "name": "medicationadministration_reference_medication_unresolved", "alias": "medicationadministration_reference_medication_unresolved", "checksum": {"name": "sha256", "checksum": "c40dbddcbb651c3bd22f18558473549e0e7ea00fd419d0c1a58838477a9da500"}, "tags": [], "refs": [["Medication"], ["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication", "short_description": "MedAdmin ref. Med - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medication_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication", "short_description": "MedAdmin ref. Med - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.9090354, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medication_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_medication_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have a service request reference recorded", "short_description": "DiagRep ref. SerReq - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_servicerequest_undefined"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have a service request reference recorded\",\n      \"short_description\": \"DiagRep ref. SerReq - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['basedOn.serviceRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql", "name": "diagnosticreport_reference_servicerequest_undefined", "alias": "diagnosticreport_reference_servicerequest_undefined", "checksum": {"name": "sha256", "checksum": "32e87b959620b942b7b899ec76b805337312e4940049797c5202d93d295b6007"}, "tags": [], "refs": [["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have a service request reference recorded", "short_description": "DiagRep ref. SerReq - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have a service request reference recorded", "short_description": "DiagRep ref. SerReq - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864398.922109, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_servicerequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_servicerequest_undefined`"}, "model.fhir_dbt_analytics.condition_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Condition resources", "short_description": "Condition resources", "primary_resource": "Condition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_count"], "unique_id": "model.fhir_dbt_analytics.condition_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Condition resources\",\n      \"short_description\": \"Condition resources\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category\n    FROM {{ ref('Condition') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/condition_count.sql", "original_file_path": "models/metrics/data_quality/condition_count.sql", "name": "condition_count", "alias": "condition_count", "checksum": {"name": "sha256", "checksum": "e192e2331155acf5d383e0ba8e57df9708ef15643a589925120754b8ec38d96b"}, "tags": [], "refs": [["Condition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Condition resources", "short_description": "Condition resources", "primary_resource": "Condition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Condition resources", "short_description": "Condition resources", "primary_resource": "Condition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1677864398.935137, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      'missing_or_invalid_codeableconcept_field' AS clinical_status,\n      'missing_or_invalid_codeableconcept_field' AS verification_status,\n      (SELECT c.code FROM UNNEST(category[SAFE_OFFSET(0)].coding) c WHERE c.system = 'http://terminology.hl7.org/CodeSystem/condition-category' ORDER BY c.code LIMIT 1) AS category\n    FROM __dbt__cte__Condition\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(clinical_status AS STRING) AS dimension_a,\n  CAST(verification_status AS STRING) AS dimension_b,\n  CAST(category AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`condition_count`"}, "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent encounter", "short_description": "MedAdmin ref. Enc - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent encounter\",\n      \"short_description\": \"MedAdmin ref. Enc - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('context', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql", "name": "medicationadministration_reference_encounter_unresolved", "alias": "medicationadministration_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "6bc37b89be883bb9bf9f1e2d89ac36299ece61a76bbcb1099549e36a314fe7df"}, "tags": [], "refs": [["Encounter"], ["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent encounter", "short_description": "MedAdmin ref. Enc - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent encounter", "short_description": "MedAdmin ref. Enc - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.9490259, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent patient", "short_description": "MedAdmin ref. Patient - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent patient\",\n      \"short_description\": \"MedAdmin ref. Patient - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_patient_unresolved.sql", "name": "medicationadministration_reference_patient_unresolved", "alias": "medicationadministration_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "6313e98f8672807f40488bb54d1aceb44d6d7f971425615456317cf64bab3b15"}, "tags": [], "refs": [["Patient"], ["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent patient", "short_description": "MedAdmin ref. Patient - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent patient", "short_description": "MedAdmin ref. Patient - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.9624274, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have a patient reference recorded", "short_description": "MedAdmin ref. Patient - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have a patient reference recorded\",\n      \"short_description\": \"MedAdmin ref. Patient - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_patient_undefined.sql", "name": "medicationadministration_reference_patient_undefined", "alias": "medicationadministration_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "ef28e8678af87fffcb99954da120526576da61e254cf29df0171542d4f637f82"}, "tags": [], "refs": [["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have a patient reference recorded", "short_description": "MedAdmin ref. Patient - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have a patient reference recorded", "short_description": "MedAdmin ref. Patient - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864398.974911, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_patient_undefined`"}, "model.fhir_dbt_analytics.composition_reference_binary_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have a binary reference recorded", "short_description": "Comp ref. Binary - unrecorded", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_binary_undefined"], "unique_id": "model.fhir_dbt_analytics.composition_reference_binary_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have a binary reference recorded\",\n      \"short_description\": \"Comp ref. Binary - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['section.entry.binaryId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(C.section) AS CS\n        JOIN UNNEST(CS.entry) AS CSE\n        WHERE CSE.binaryid IS NOT NULL\n        AND CSE.binaryid <> ''\n      ) AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_binary_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_binary_undefined.sql", "name": "composition_reference_binary_undefined", "alias": "composition_reference_binary_undefined", "checksum": {"name": "sha256", "checksum": "74670bb91ee73a44570802cc0a9d6f47d75cb934b9bc62f13083e9c912db3058"}, "tags": [], "refs": [["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have a binary reference recorded", "short_description": "Comp ref. Binary - unrecorded", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_binary_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have a binary reference recorded", "short_description": "Comp ref. Binary - unrecorded", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864398.9870756, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_binary_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_binary_undefined`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent encounter", "short_description": "DiagRep ref. Enc - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent encounter\",\n      \"short_description\": \"DiagRep ref. Enc - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql", "name": "diagnosticreport_reference_encounter_unresolved", "alias": "diagnosticreport_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "7b6983200fcb1ddea25fae60042f6b91f313ffa11360139cb7df336b7828e187"}, "tags": [], "refs": [["Encounter"], ["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent encounter", "short_description": "DiagRep ref. Enc - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent encounter", "short_description": "DiagRep ref. Enc - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864399.0001397, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.composition_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Composition resources", "short_description": "Composition resources", "primary_resource": "Composition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_count"], "unique_id": "model.fhir_dbt_analytics.composition_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Composition resources\",\n      \"short_description\": \"Composition resources\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Composition') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_count.sql", "original_file_path": "models/metrics/data_quality/composition_count.sql", "name": "composition_count", "alias": "composition_count", "checksum": {"name": "sha256", "checksum": "b322026cc0e0cfc0ecd0048685f7b00ea4d99915db0018d90b7e9c4dd7cda13d"}, "tags": [], "refs": [["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Composition resources", "short_description": "Composition resources", "primary_resource": "Composition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Composition resources", "short_description": "Composition resources", "primary_resource": "Composition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864399.0141447, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_count`"}, "model.fhir_dbt_analytics.encounter_reference_location_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that reference a non-existent location", "short_description": "Enc ref. Loc - non-exist", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Location"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_location_unresolved"], "unique_id": "model.fhir_dbt_analytics.encounter_reference_location_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that reference a non-existent location\",\n      \"short_description\": \"Enc ref. Loc - non-exist\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['location.location.locationId'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"secondary_resources\": ['Location'],\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(E.location) AS EL\n        WHERE EL.location.locationId IS NOT NULL\n        AND EL.location.locationId <> ''\n      ) AS has_reference_location,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(E.location) AS EL\n        JOIN {{ ref('Location') }} AS L\n          ON EL.location.locationId = L.id\n      ) AS reference_location_resolved\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_location - reference_location_resolved)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/encounter_reference_location_unresolved.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_location_unresolved.sql", "name": "encounter_reference_location_unresolved", "alias": "encounter_reference_location_unresolved", "checksum": {"name": "sha256", "checksum": "8cda438f26edab43e60932178b26cbe92d8e8da2dcf5252a673496a4bc8b117c"}, "tags": [], "refs": [["Location"], ["Encounter"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that reference a non-existent location", "short_description": "Enc ref. Loc - non-exist", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Location"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_location_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that reference a non-existent location", "short_description": "Enc ref. Loc - non-exist", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Location"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1677864399.0249653, "compiled_code": "\n\n\nwith __dbt__cte__Location as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\n),  __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_location_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Location", "sql": " __dbt__cte__Location as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Location_view`\n)"}, {"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`encounter_reference_location_unresolved`"}, "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that reference a non-existent encounter", "short_description": "CareTeam ref. Enc - non-exist", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that reference a non-existent encounter\",\n      \"short_description\": \"CareTeam ref. Enc - non-exist\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      C.id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_encounter_unresolved.sql", "name": "careteam_reference_encounter_unresolved", "alias": "careteam_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "d5fa345d7249d5ef8c21c0d0f8deb4f383fa7ec9121f3b4b8a700de3fb3609eb"}, "tags": [], "refs": [["Encounter"], ["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that reference a non-existent encounter", "short_description": "CareTeam ref. Enc - non-exist", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that reference a non-existent encounter", "short_description": "CareTeam ref. Enc - non-exist", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864399.0363827, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.composition_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent patient", "short_description": "Comp ref. Patient - non-exist", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent patient\",\n      \"short_description\": \"Comp ref. Patient - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_patient_unresolved.sql", "name": "composition_reference_patient_unresolved", "alias": "composition_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "c324589752461b53300a59c812beb524eb8869c00e5cc1eb3b8e4dc3fc9a19cb"}, "tags": [], "refs": [["Patient"], ["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent patient", "short_description": "Comp ref. Patient - non-exist", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent patient", "short_description": "Comp ref. Patient - non-exist", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864399.051112, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_patient_unresolved`"}, "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent practitioner", "short_description": "SerReq ref. Prac - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_practitioner_unresolved"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent practitioner\",\n      \"short_description\": \"SerReq ref. Prac - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('requester', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql", "name": "servicerequest_reference_practitioner_unresolved", "alias": "servicerequest_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "fd65d07c6a483321a2caaa1f17853f46dcad181ed1deb630a08229e8eea39f1f"}, "tags": [], "refs": [["Practitioner"], ["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent practitioner", "short_description": "SerReq ref. Prac - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent practitioner", "short_description": "SerReq ref. Prac - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864399.0631688, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_practitioner_unresolved`"}, "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent medication", "short_description": "MedStat ref. Med - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_medication_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that reference a non-existent medication\",\n      \"short_description\": \"MedStat ref. Med - non-exist\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['medication.reference.medicationId'],\n      \"secondary_resources\": ['Medication'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value,\n      {{ reference_resolves('medication.reference', 'Medication') }} AS reference_resolves\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_reference_medication_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_medication_unresolved.sql", "name": "medicationstatement_reference_medication_unresolved", "alias": "medicationstatement_reference_medication_unresolved", "checksum": {"name": "sha256", "checksum": "bc7c18ade3017c8ce0f0fe71b381b8efdcba244248e3b308a2ae0dc07b98cbc9"}, "tags": [], "refs": [["Medication"], ["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent medication", "short_description": "MedStat ref. Med - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_medication_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent medication", "short_description": "MedStat ref. Med - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864399.076444, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_medication_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_reference_medication_unresolved`"}, "model.fhir_dbt_analytics.procedure_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Procedure resources", "short_description": "Procedure resources", "primary_resource": "Procedure", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "performed.period.start", "metric_date_description": "Procedure performed period start date", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_count"], "unique_id": "model.fhir_dbt_analytics.procedure_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Procedure resources\",\n      \"short_description\": \"Procedure resources\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"performed.period.start\",\n      \"metric_date_description\": \"Procedure performed period start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Procedure') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_count.sql", "original_file_path": "models/metrics/data_quality/procedure_count.sql", "name": "procedure_count", "alias": "procedure_count", "checksum": {"name": "sha256", "checksum": "fbf52b7c079c21c3c41a98e3b37cbc4833fe998af8c035d67dacc83bfaeb5e27"}, "tags": [], "refs": [["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Procedure resources", "short_description": "Procedure resources", "primary_resource": "Procedure", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "performed.period.start", "metric_date_description": "Procedure performed period start date", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Procedure resources", "short_description": "Procedure resources", "primary_resource": "Procedure", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "performed.period.start", "metric_date_description": "Procedure performed period start date", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864399.0903487, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status\n    FROM __dbt__cte__Procedure\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_count`"}, "model.fhir_dbt_analytics.encounter_reference_location_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that do not have a location reference recorded", "short_description": "Enc ref. Loc - unrecorded", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_location_undefined"], "unique_id": "model.fhir_dbt_analytics.encounter_reference_location_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that do not have a location reference recorded\",\n      \"short_description\": \"Enc ref. Loc - unrecorded\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['location.location.locationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(E.location) AS EL\n        WHERE EL.location.locationId IS NOT NULL\n        AND EL.location.locationId <> ''\n      ) AS has_reference_location\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_location)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/encounter_reference_location_undefined.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_location_undefined.sql", "name": "encounter_reference_location_undefined", "alias": "encounter_reference_location_undefined", "checksum": {"name": "sha256", "checksum": "a52b96c6c930d04015a93f067e9945023583ccab6ad3982962d893d4c55ac085"}, "tags": [], "refs": [["Encounter"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that do not have a location reference recorded", "short_description": "Enc ref. Loc - unrecorded", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_location_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that do not have a location reference recorded", "short_description": "Enc ref. Loc - unrecorded", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1677864399.1007264, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      class.code AS latest_encounter_class,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(E.location) AS EL\n        WHERE EL.location.locationId IS NOT NULL\n        AND EL.location.locationId <> ''\n      ) AS has_reference_location\n    FROM __dbt__cte__Encounter AS E\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_location_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(latest_encounter_class AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_location) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_location), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`encounter_reference_location_undefined`"}, "model.fhir_dbt_analytics.composition_reference_practitioner_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have a practitioner reference recorded", "short_description": "Comp ref. Prac - unrecorded", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_practitioner_undefined"], "unique_id": "model.fhir_dbt_analytics.composition_reference_practitioner_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"Comp ref. Prac - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['author.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('author', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_practitioner_undefined.sql", "name": "composition_reference_practitioner_undefined", "alias": "composition_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "580ef3606de671a857934b34f7fe1c75ecd27f8a5d521f4b2dbf14aeb026e655"}, "tags": [], "refs": [["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have a practitioner reference recorded", "short_description": "Comp ref. Prac - unrecorded", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_practitioner_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have a practitioner reference recorded", "short_description": "Comp ref. Prac - unrecorded", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864399.1115453, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_practitioner_undefined`"}, "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that reference a non-existent service request", "short_description": "Obs ref. SerReq - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_servicerequest_unresolved"], "unique_id": "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that reference a non-existent service request\",\n      \"short_description\": \"Obs ref. SerReq - non-exist\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": [\n          'encounter.encounterId', \n          'basedOn.serviceRequestId'],\n      \"secondary_resources\": ['ServiceRequest'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'ServiceRequest') }} AS reference_resolves\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_reference_servicerequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/observation_reference_servicerequest_unresolved.sql", "name": "observation_reference_servicerequest_unresolved", "alias": "observation_reference_servicerequest_unresolved", "checksum": {"name": "sha256", "checksum": "037f0c4cbf3b0ed0a79676bd47bde60eacdf7ad8893da7af644d362079f8ea18"}, "tags": [], "refs": [["ServiceRequest"], ["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that reference a non-existent service request", "short_description": "Obs ref. SerReq - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_servicerequest_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that reference a non-existent service request", "short_description": "Obs ref. SerReq - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864399.1233625, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n),  __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_servicerequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}, {"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_reference_servicerequest_unresolved`"}, "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication reference recorded", "short_description": "MedAdmin ref. Med - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medication_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have an medication reference recorded\",\n      \"short_description\": \"MedAdmin ref. Med - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_medication_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medication_undefined.sql", "name": "medicationadministration_reference_medication_undefined", "alias": "medicationadministration_reference_medication_undefined", "checksum": {"name": "sha256", "checksum": "dc746bcd20b6dc3e996a78f287de5300b564a957e5db6df073d1c8e5faca2a99"}, "tags": [], "refs": [["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication reference recorded", "short_description": "MedAdmin ref. Med - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medication_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication reference recorded", "short_description": "MedAdmin ref. Med - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864399.137998, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medication_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_medication_undefined`"}, "model.fhir_dbt_analytics.condition_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that reference a non-existent encounter", "short_description": "Cond ref. Enc - non-exist", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that reference a non-existent encounter\",\n      \"short_description\": \"Cond ref. Enc - non-exist\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/condition_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/condition_reference_encounter_unresolved.sql", "name": "condition_reference_encounter_unresolved", "alias": "condition_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "3a45c3b77c739192621c63414bf408ceef0e3b3b72b5dd770f5fcb5605e6bfbe"}, "tags": [], "refs": [["Encounter"], ["Condition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that reference a non-existent encounter", "short_description": "Cond ref. Enc - non-exist", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that reference a non-existent encounter", "short_description": "Cond ref. Enc - non-exist", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1677864399.1494558, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Condition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`condition_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have an encounter reference recorded", "short_description": "MedReq ref. Enc - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have an encounter reference recorded\",\n      \"short_description\": \"MedReq ref. Enc - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_encounter_undefined.sql", "name": "medicationrequest_reference_encounter_undefined", "alias": "medicationrequest_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "de05ec0173b3cfc23d1024546dba61a433787a2341596a0f4162a321f0cf8961"}, "tags": [], "refs": [["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have an encounter reference recorded", "short_description": "MedReq ref. Enc - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have an encounter reference recorded", "short_description": "MedReq ref. Enc - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864399.1638262, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that do not have a practitioner reference recorded", "short_description": "LDA Proc ref. Prac - unrecorded", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_practitioner_undefined"], "unique_id": "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"LDA Proc ref. Prac - unrecorded\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['performer.actor.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(P.performer) AS PP\n        WHERE actor.practitionerId IS NOT NULL\n        AND actor.practitionerId <> ''\n      ) AS has_reference_practitioner\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_practitioner)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_practitioner_undefined.sql", "name": "procedure_reference_practitioner_undefined", "alias": "procedure_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "c86ec22222e273a11ac688451c2e22a4e615f9e7f883e27e63e1496efe11b5e5"}, "tags": [], "refs": [["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that do not have a practitioner reference recorded", "short_description": "LDA Proc ref. Prac - unrecorded", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_practitioner_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that do not have a practitioner reference recorded", "short_description": "LDA Proc ref. Prac - unrecorded", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864399.176948, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(P.performer) AS PP\n        WHERE actor.practitionerId IS NOT NULL\n        AND actor.practitionerId <> ''\n      ) AS has_reference_practitioner\n    FROM __dbt__cte__Procedure AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_practitioner_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_practitioner) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_practitioner), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_reference_practitioner_undefined`"}, "model.fhir_dbt_analytics.observation_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Observation resources", "short_description": "Observation resources", "primary_resource": "Observation", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_count"], "unique_id": "model.fhir_dbt_analytics.observation_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Observation resources\",\n      \"short_description\": \"Observation resources\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Observation') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_count.sql", "original_file_path": "models/metrics/data_quality/observation_count.sql", "name": "observation_count", "alias": "observation_count", "checksum": {"name": "sha256", "checksum": "0f83ce3bd48c0e3130d0ac05af6bad17cf2d33afa7c328a630d09cd167bee87b"}, "tags": [], "refs": [["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Observation resources", "short_description": "Observation resources", "primary_resource": "Observation", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Observation resources", "short_description": "Observation resources", "primary_resource": "Observation", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864399.1891463, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status\n    FROM __dbt__cte__Observation\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_count`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent service request", "short_description": "DiagRep ref. SerReq - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_servicerequest_unresolved"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent service request\",\n      \"short_description\": \"DiagRep ref. SerReq - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['basedOn.serviceRequestId'],\n      \"secondary_resources\": ['ServiceRequest'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'ServiceRequest') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql", "name": "diagnosticreport_reference_servicerequest_unresolved", "alias": "diagnosticreport_reference_servicerequest_unresolved", "checksum": {"name": "sha256", "checksum": "28b6b68b90edc53466f62e61a3a3ce5b5eb1638f3032ee51da8af160dde4129c"}, "tags": [], "refs": [["ServiceRequest"], ["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent service request", "short_description": "DiagRep ref. SerReq - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent service request", "short_description": "DiagRep ref. SerReq - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864399.1998222, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n),  __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_servicerequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}, {"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_servicerequest_unresolved`"}, "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that do not have a patient reference recorded", "short_description": "MedStat ref. Patient - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that do not have a patient reference recorded\",\n      \"short_description\": \"MedStat ref. Patient - unrecorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationstatement_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_patient_undefined.sql", "name": "medicationstatement_reference_patient_undefined", "alias": "medicationstatement_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "ff5a859460d35f42ee073bd3fd96fbbfa572aae2e14d6af740e168a38e8d2463"}, "tags": [], "refs": [["MedicationStatement"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that do not have a patient reference recorded", "short_description": "MedStat ref. Patient - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that do not have a patient reference recorded", "short_description": "MedStat ref. Patient - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1677864399.2142713, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationStatement_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationstatement_reference_patient_undefined`"}, "model.fhir_dbt_analytics.composition_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have an encounter reference recorded", "short_description": "Comp ref. Enc - unrecorded", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.composition_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Comp ref. Enc - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_encounter_undefined.sql", "name": "composition_reference_encounter_undefined", "alias": "composition_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "76c6f37f8c110aae8374103e1d75e4658a40defe84e8ea7adba1d64d9beabfb6"}, "tags": [], "refs": [["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have an encounter reference recorded", "short_description": "Comp ref. Enc - unrecorded", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have an encounter reference recorded", "short_description": "Comp ref. Enc - unrecorded", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864399.2262595, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent encounter", "short_description": "LDA Proc ref. Enc - non-exist", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that reference a non-existent encounter\",\n      \"short_description\": \"LDA Proc ref. Enc - non-exist\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_encounter_unresolved.sql", "name": "procedure_reference_encounter_unresolved", "alias": "procedure_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "9bc378e878e100a589151394e94e6335667ff67e67b82e7640ad4ba661e88332"}, "tags": [], "refs": [["Encounter"], ["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent encounter", "short_description": "LDA Proc ref. Enc - non-exist", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent encounter", "short_description": "LDA Proc ref. Enc - non-exist", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864399.2397995, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have an observation reference recorded", "short_description": "DiagRep ref. Obs - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_observation_undefined"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have an observation reference recorded\",\n      \"short_description\": \"DiagRep ref. Obs - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['result.observationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('result', 'Observation') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_observation_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_observation_undefined.sql", "name": "diagnosticreport_reference_observation_undefined", "alias": "diagnosticreport_reference_observation_undefined", "checksum": {"name": "sha256", "checksum": "14f253ecc6baa450504a129c52549db745e4b196540763930e5a691b2f58f321"}, "tags": [], "refs": [["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have an observation reference recorded", "short_description": "DiagRep ref. Obs - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_observation_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have an observation reference recorded", "short_description": "DiagRep ref. Obs - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864399.2525768, "compiled_code": "\n\n\nWITH\n   __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      (SELECT c.code FROM UNNEST(category.coding) c WHERE c.system = 'https://g.co/fhir/harmonized/diagnostic_report/category' ORDER BY c.code LIMIT 1) AS category,\n      (SELECT SIGN(COUNT(*)) FROM UNNEST(result) WHERE observationId IS NOT NULL AND observationId NOT IN ('')) AS has_reference_value\n    FROM __dbt__cte__DiagnosticReport AS D\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_observation_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(category AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_observation_undefined`"}, "model.fhir_dbt_analytics.observation_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that do not have a patient reference recorded", "short_description": "Obs ref. Patient - unrecorded", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.observation_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that do not have a patient reference recorded\",\n      \"short_description\": \"Obs ref. Patient - unrecorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/observation_reference_patient_undefined.sql", "name": "observation_reference_patient_undefined", "alias": "observation_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "8e79331f151af6107fa6270d30e289f550c9296b0f77d89205a153bbe3dd4f78"}, "tags": [], "refs": [["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that do not have a patient reference recorded", "short_description": "Obs ref. Patient - unrecorded", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that do not have a patient reference recorded", "short_description": "Obs ref. Patient - unrecorded", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864399.266453, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__Observation AS O\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_reference_patient_undefined`"}, "model.fhir_dbt_analytics.composition_reference_encounter_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent encounter", "short_description": "Comp ref. Enc - non-exist", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Encounter"], "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_encounter_unresolved"], "unique_id": "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent encounter\",\n      \"short_description\": \"Comp ref. Enc - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"secondary_resources\": ['Encounter'],\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/composition_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_encounter_unresolved.sql", "name": "composition_reference_encounter_unresolved", "alias": "composition_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "666569485d74b79e6759fee0fe1ec99b94f5c8432ae86f848207cd70395989a5"}, "tags": [], "refs": [["Encounter"], ["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent encounter", "short_description": "Comp ref. Enc - non-exist", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Encounter"], "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_encounter_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent encounter", "short_description": "Comp ref. Enc - non-exist", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Encounter"], "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864399.2801175, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`composition_reference_encounter_unresolved`"}, "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have a practitioner reference recorded", "short_description": "DiagRep ref. Prac - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_practitioner_undefined"], "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"DiagRep ref. Prac - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['performer.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('performer', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql", "name": "diagnosticreport_reference_practitioner_undefined", "alias": "diagnosticreport_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "594904ddce3c68ecda3c4a76e4ff9ff2119baf13442a28833b8f85e009927700"}, "tags": [], "refs": [["DiagnosticReport"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have a practitioner reference recorded", "short_description": "DiagRep ref. Prac - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have a practitioner reference recorded", "short_description": "DiagRep ref. Prac - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1677864399.2930245, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`DiagnosticReport_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`diagnosticreport_reference_practitioner_undefined`"}, "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that do not have a service request reference recorded", "short_description": "Obs ref. SerReq - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_servicerequest_undefined"], "unique_id": "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that do not have a service request reference recorded\",\n      \"short_description\": \"Obs ref. SerReq - unrecorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": [\n          'encounter.encounterId', \n          'basedOn.serviceRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_reference_servicerequest_undefined.sql", "original_file_path": "models/metrics/data_quality/observation_reference_servicerequest_undefined.sql", "name": "observation_reference_servicerequest_undefined", "alias": "observation_reference_servicerequest_undefined", "checksum": {"name": "sha256", "checksum": "a11a933c00d47ccdcd16b1ffc5899a3c49e807a20fafa0dc26e59b767e04286f"}, "tags": [], "refs": [["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that do not have a service request reference recorded", "short_description": "Obs ref. SerReq - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_servicerequest_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that do not have a service request reference recorded", "short_description": "Obs ref. SerReq - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864399.3064663, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_servicerequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_reference_servicerequest_undefined`"}, "model.fhir_dbt_analytics.binary_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Binary resources", "short_description": "Binary resources", "primary_resource": "Binary", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "binary_count"], "unique_id": "model.fhir_dbt_analytics.binary_count", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Binary resources\",\n      \"short_description\": \"Binary resources\",\n      \"primary_resource\": \"Binary\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      B.id,\n      {{- metric_common_dimensions(table_alias='B', exclude_col='metric_date') }}\n      C.metric_date,\n      {{ get_column_or_default('status', 'Composition', table_alias='C') }} AS status\n    FROM {{ ref('Binary') }} AS B\n    LEFT JOIN {{ ref('Composition') }} AS C\n    {%- if column_exists('section.entry.binaryId', 'Composition') %}\n      ON B.id = (SELECT binaryId FROM UNNEST((SELECT entry FROM UNNEST(section))))\n    {%- else %}\n      ON FALSE\n    {%- endif -%}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/binary_count.sql", "original_file_path": "models/metrics/data_quality/binary_count.sql", "name": "binary_count", "alias": "binary_count", "checksum": {"name": "sha256", "checksum": "f4ec3592730b96fbc073e57b2c92eff83d00f0625c19f99a76f0e8edeb7c0827"}, "tags": [], "refs": [["Binary"], ["Composition"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Binary resources", "short_description": "Binary resources", "primary_resource": "Binary", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/binary_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Binary resources", "short_description": "Binary resources", "primary_resource": "Binary", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1677864399.3189821, "compiled_code": "\n\n\nwith __dbt__cte__Binary as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'binary_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Binary", "sql": " __dbt__cte__Binary as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Binary_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Composition_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`binary_count`"}, "model.fhir_dbt_analytics.careteam_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that do not have a patient reference recorded", "short_description": "CareTeam ref. Patient - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.careteam_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that do not have a patient reference recorded\",\n      \"short_description\": \"CareTeam ref. Patient - unrecorded\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/careteam_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_patient_undefined.sql", "name": "careteam_reference_patient_undefined", "alias": "careteam_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "036cabf63e14b7d9ce5679b671675850d49906fe264f5941a8e4112223eaa094"}, "tags": [], "refs": [["CareTeam"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that do not have a patient reference recorded", "short_description": "CareTeam ref. Patient - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that do not have a patient reference recorded", "short_description": "CareTeam ref. Patient - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1677864399.3335311, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`CareTeam_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`careteam_reference_patient_undefined`"}, "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent service request", "short_description": "SerReq ref. SerReq - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_servicerequest_unresolved"], "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent service request\",\n      \"short_description\": \"SerReq ref. SerReq - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'ServiceRequest') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql", "name": "servicerequest_reference_servicerequest_unresolved", "alias": "servicerequest_reference_servicerequest_unresolved", "checksum": {"name": "sha256", "checksum": "c762e582b42e6ace00fe7797f5d2f8dfd26a9e31e524acac457b2ce5abd630f7"}, "tags": [], "refs": [["ServiceRequest"], ["ServiceRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent service request", "short_description": "SerReq ref. SerReq - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent service request", "short_description": "SerReq ref. SerReq - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1677864399.3457966, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_servicerequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`ServiceRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`servicerequest_reference_servicerequest_unresolved`"}, "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication request", "short_description": "MedAdmin ref. MedReq - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": ["MedicationRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medicationrequest_unresolved"], "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent medication request\",\n      \"short_description\": \"MedAdmin ref. MedReq - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'request.medicationRequestId'],\n      \"secondary_resources\": ['MedicationRequest'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('request', 'MedicationRequest') }} AS has_reference_value,\n      {{ reference_resolves('request', 'MedicationRequest') }} AS reference_resolves  \n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql", "name": "medicationadministration_reference_medicationrequest_unresolved", "alias": "medicationadministration_reference_medicationrequest_unresolved", "checksum": {"name": "sha256", "checksum": "2d9de525f2b4ae917a3b20f0891f4490d025ff5a6d287172d801dcc973ec1df4"}, "tags": [], "refs": [["MedicationRequest"], ["MedicationAdministration"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication request", "short_description": "MedAdmin ref. MedReq - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": ["MedicationRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication request", "short_description": "MedAdmin ref. MedReq - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": ["MedicationRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1677864399.3604033, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medicationrequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationAdministration_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationadministration_reference_medicationrequest_unresolved`"}, "model.fhir_dbt_analytics.procedure_reference_patient_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that do not have a patient reference recorded", "short_description": "LDA Proc ref. Patient - unrecorded", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_patient_undefined"], "unique_id": "model.fhir_dbt_analytics.procedure_reference_patient_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that do not have a patient reference recorded\",\n      \"short_description\": \"LDA Proc ref. Patient - unrecorded\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_patient_undefined.sql", "name": "procedure_reference_patient_undefined", "alias": "procedure_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "a0ecf21405f0013a001985abda2b1feba7268937648861727573cad867eaadca"}, "tags": [], "refs": [["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that do not have a patient reference recorded", "short_description": "LDA Proc ref. Patient - unrecorded", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_patient_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that do not have a patient reference recorded", "short_description": "LDA Proc ref. Patient - unrecorded", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864399.3734865, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value\n    FROM __dbt__cte__Procedure AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_patient_undefined' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(1 - has_reference_value) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(1 - has_reference_value), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_reference_patient_undefined`"}, "model.fhir_dbt_analytics.observation_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that do not have an encounter reference recorded", "short_description": "Obs ref. Enc - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.observation_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Obs ref. Enc - unrecorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/observation_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/observation_reference_encounter_undefined.sql", "name": "observation_reference_encounter_undefined", "alias": "observation_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "7bc7c3ad64df71a6441055cf39aa333ac0ae3aeaf680521d0d924500e6cb8117"}, "tags": [], "refs": [["Observation"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that do not have an encounter reference recorded", "short_description": "Obs ref. Enc - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that do not have an encounter reference recorded", "short_description": "Obs ref. Enc - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1677864399.387071, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Observation_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`observation_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have an medication reference recorded", "short_description": "MedReq ref. Med - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medication_undefined"], "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have an medication reference recorded\",\n      \"short_description\": \"MedReq ref. Med - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/medicationrequest_reference_medication_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medication_undefined.sql", "name": "medicationrequest_reference_medication_undefined", "alias": "medicationrequest_reference_medication_undefined", "checksum": {"name": "sha256", "checksum": "f706bf44f4f2b078864488c9735f456ab0e398a0bea4eb35bc30376537d653cf"}, "tags": [], "refs": [["MedicationRequest"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have an medication reference recorded", "short_description": "MedReq ref. Med - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medication_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have an medication reference recorded", "short_description": "MedReq ref. Med - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1677864399.3995292, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medication_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`MedicationRequest_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`medicationrequest_reference_medication_undefined`"}, "model.fhir_dbt_analytics.procedure_reference_encounter_undefined": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that do not have an encounter reference recorded", "short_description": "LDA Proc ref. Enc - unrecorded", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_encounter_undefined"], "unique_id": "model.fhir_dbt_analytics.procedure_reference_encounter_undefined", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that do not have an encounter reference recorded\",\n      \"short_description\": \"LDA Proc ref. Enc - unrecorded\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/procedure_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_encounter_undefined.sql", "name": "procedure_reference_encounter_undefined", "alias": "procedure_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "7ac4d3cb38a110d6d518ca0b3ad6cee2f79809d72fe329ae12b76a1a90c7798f"}, "tags": [], "refs": [["Procedure"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that do not have an encounter reference recorded", "short_description": "LDA Proc ref. Enc - unrecorded", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_encounter_undefined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that do not have an encounter reference recorded", "short_description": "LDA Proc ref. Enc - unrecorded", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1677864399.412952, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'Synthea-EHR' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'Synthea General Hospital' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Procedure_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`procedure_reference_encounter_undefined`"}, "model.fhir_dbt_analytics.encounter_reference_patient_unresolved": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that reference a non-existent patient", "short_description": "Enc ref. Patient - non-exist", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_patient_unresolved"], "unique_id": "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that reference a non-existent patient\",\n      \"short_description\": \"Enc ref. Patient - non-exist\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "metrics/data_quality/encounter_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_patient_unresolved.sql", "name": "encounter_reference_patient_unresolved", "alias": "encounter_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "570f8004c05d75e2d568e88f6c7f912ce704674945a5037c04a180d53597f41f"}, "tags": [], "refs": [["Patient"], ["Encounter"], ["fhir_table_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that reference a non-existent patient", "short_description": "Enc ref. Patient - non-exist", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_patient_unresolved.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that reference a non-existent patient", "short_description": "Enc ref. Patient - non-exist", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1677864399.4252279, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n),  __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n),A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      status,\n      class.code AS latest_encounter_class,\n      IF(subject.patientId IS NOT NULL AND subject.patientId NOT IN (''), 1, 0) AS has_reference_value,\n      IF(subject.patientId IN (SELECT id FROM __dbt__cte__Patient), 1, 0) AS reference_resolves\n    FROM __dbt__cte__Encounter AS E\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_patient_unresolved' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(status AS STRING) AS dimension_a,\n  CAST(latest_encounter_class AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(has_reference_value - reference_resolves) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(SAFE_DIVIDE(SUM(has_reference_value - reference_resolves), COUNT(id)) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`fhir_table_list`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`\n-- depends_on: `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\nSELECT * FROM `dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`Encounter_view`\n)"}], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`encounter_reference_patient_unresolved`"}, "seed.fhir_dbt_analytics.site_timezones": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "site_timezones"], "unique_id": "seed.fhir_dbt_analytics.site_timezones", "raw_code": "", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "site_timezones.csv", "original_file_path": "seeds/site_timezones.csv", "name": "site_timezones", "alias": "site_timezones", "checksum": {"name": "sha256", "checksum": "76e9d8e03c73429126bbbe5fefaff9aa6dc38da4c4277af67123dee11df62539"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Mapping from site in meta.sourceIdentifier.system to timezone for that site.", "columns": {"site": {"name": "site", "description": "Name of site as stored in meta.sourceIdentifier.system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bq_timezone": {"name": "bq_timezone", "description": "BigQuery-valid timezone, see [list of valid tz database entries](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://seeds/seeds_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1677864399.6155846, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dqi-playground-teams`.`gabbye_dbt_public_synthea_external`.`site_timezones`"}, "seed.fhir_dbt_analytics.clinical_code_groups": {"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"group_type": "string", "group": "string", "code": "string", "display": "string", "system": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "clinical_code_groups"], "unique_id": "seed.fhir_dbt_analytics.clinical_code_groups", "raw_code": "", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "clinical_code_groups.csv", "original_file_path": "seeds/clinical_code_groups.csv", "name": "clinical_code_groups", "alias": "clinical_code_groups", "checksum": {"name": "sha256", "checksum": "5201d3f14090a1f8caa2f69e05f82e6b9e15c3f5ad257f39a60928c77f506fb3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Reference table mapping clinical codes to broader clinical groups.", "columns": {"group_type": {"name": "group_type", "description": "Clinical category that this group belongs to (e.g. Condition, Procedure, Observation).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group": {"name": "group", "description": "Name of the clinical group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code": {"name": "code", "description": "Clinical code that is mapped to the clinical group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display": {"name": "display", "description": "Display name for the clinical code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "system": {"name": "system", "description": "Coding system from which this clinical code is defined (e.g. http://snomed.info/sct).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://seeds/seeds_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"group_type": "string", "group": "string", "code": "string", "display": "string", "system": "string"}}, "created_at": 1677864399.6227832}, "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('metric_definition')", "field": "metric_name", "column_name": "metric_name", "model": "{{ get_where_subquery(ref('metric_latest_execution')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"]}, "config": {"enabled": true, "alias": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "post_processing", "relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_"], "unique_id": "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea.sql", "original_file_path": "models/post_processing/post_processing_config.yml", "name": "relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_", "alias": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_definition"], ["metric_latest_execution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea"}, "created_at": 1677864399.6784296, "column_name": "metric_name", "file_key_name": "models.metric_latest_execution"}, "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["COUNT", "PROPORTION", "RATIO", "DISTRIBUTION"], "column_name": "calculation", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION"], "unique_id": "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION", "alias": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb"}, "created_at": 1677864399.7145967, "column_name": "calculation", "file_key_name": "models.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781": {"test_metadata": {"name": "expect_column_values_to_be_null", "kwargs": {"row_condition": "calculation = 'COUNT'", "column_name": "numerator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_"], "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_", "alias": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68"}, "created_at": 1677864399.726688, "column_name": "numerator", "file_key_name": "models.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1": {"test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "calculation IN ('PROPORTION', 'RATIO')", "column_name": "numerator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_"], "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_", "alias": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9"}, "created_at": 1677864399.7434504, "column_name": "numerator", "file_key_name": "models.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e": {"test_metadata": {"name": "expect_column_values_to_be_null", "kwargs": {"row_condition": "calculation = 'COUNT'", "column_name": "denominator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_"], "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_", "alias": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591"}, "created_at": 1677864399.7524793, "column_name": "denominator", "file_key_name": "models.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885": {"test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "calculation IN ('PROPORTION', 'RATIO')", "column_name": "denominator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_"], "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_", "alias": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9"}, "created_at": 1677864399.759103, "column_name": "denominator", "file_key_name": "models.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3": {"test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 1, "row_condition": "calculation IN ('PROPORTION', 'RATIO')", "column_name": "measure", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_"], "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_", "alias": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1"}, "created_at": 1677864399.7654147, "column_name": "measure", "file_key_name": "models.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure.e4b986a9aa": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "SAFE_DIVIDE(numerator, denominator) = measure", "condition": "calculation IN ('PROPORTION', 'RATIO')", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_m_62658e3359a248f609a28b0fce743a27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external_dbt_test__audit", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure"], "unique_id": "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure.e4b986a9aa", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_m_62658e3359a248f609a28b0fce743a27\") }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "dbt_utils_expression_is_true_m_62658e3359a248f609a28b0fce743a27.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "name": "dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure", "alias": "dbt_utils_expression_is_true_m_62658e3359a248f609a28b0fce743a27", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metric_by_day_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_m_62658e3359a248f609a28b0fce743a27"}, "created_at": 1677864399.7789984, "column_name": null, "file_key_name": "models.metric_by_day_dimensions"}}, "sources": {"source.fhir_dbt_analytics.fhir.AllergyIntolerance": {"fqn": ["fhir_dbt_analytics", "fhir", "AllergyIntolerance"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.AllergyIntolerance", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "AllergyIntolerance", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "AllergyIntolerance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`AllergyIntolerance`", "created_at": 1677864399.8875115}, "source.fhir_dbt_analytics.fhir.Binary": {"fqn": ["fhir_dbt_analytics", "fhir", "Binary"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Binary", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Binary", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Binary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Binary`", "created_at": 1677864399.8877451}, "source.fhir_dbt_analytics.fhir.CarePlan": {"fqn": ["fhir_dbt_analytics", "fhir", "CarePlan"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.CarePlan", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "CarePlan", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "CarePlan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`CarePlan`", "created_at": 1677864399.8878837}, "source.fhir_dbt_analytics.fhir.CareTeam": {"fqn": ["fhir_dbt_analytics", "fhir", "CareTeam"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.CareTeam", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "CareTeam", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "CareTeam", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`CareTeam`", "created_at": 1677864399.8880382}, "source.fhir_dbt_analytics.fhir.Claim": {"fqn": ["fhir_dbt_analytics", "fhir", "Claim"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Claim", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Claim", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Claim`", "created_at": 1677864399.888167}, "source.fhir_dbt_analytics.fhir.Composition": {"fqn": ["fhir_dbt_analytics", "fhir", "Composition"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Composition", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Composition", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Composition", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Composition`", "created_at": 1677864399.888289}, "source.fhir_dbt_analytics.fhir.Condition": {"fqn": ["fhir_dbt_analytics", "fhir", "Condition"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Condition", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Condition", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Condition", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Condition`", "created_at": 1677864399.8884087}, "source.fhir_dbt_analytics.fhir.Device": {"fqn": ["fhir_dbt_analytics", "fhir", "Device"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Device", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Device", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Device", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Device`", "created_at": 1677864399.8885272}, "source.fhir_dbt_analytics.fhir.DiagnosticReport": {"fqn": ["fhir_dbt_analytics", "fhir", "DiagnosticReport"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.DiagnosticReport", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "DiagnosticReport", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "DiagnosticReport", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`DiagnosticReport`", "created_at": 1677864399.8886554}, "source.fhir_dbt_analytics.fhir.DocumentReference": {"fqn": ["fhir_dbt_analytics", "fhir", "DocumentReference"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.DocumentReference", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "DocumentReference", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "DocumentReference", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`DocumentReference`", "created_at": 1677864399.8887742}, "source.fhir_dbt_analytics.fhir.Encounter": {"fqn": ["fhir_dbt_analytics", "fhir", "Encounter"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Encounter", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Encounter", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Encounter", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Encounter`", "created_at": 1677864399.8888943}, "source.fhir_dbt_analytics.fhir.ExplanationOfBenefit": {"fqn": ["fhir_dbt_analytics", "fhir", "ExplanationOfBenefit"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.ExplanationOfBenefit", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "ExplanationOfBenefit", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "ExplanationOfBenefit", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`ExplanationOfBenefit`", "created_at": 1677864399.8890076}, "source.fhir_dbt_analytics.fhir.ImagingStudy": {"fqn": ["fhir_dbt_analytics", "fhir", "ImagingStudy"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.ImagingStudy", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "ImagingStudy", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "ImagingStudy", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`ImagingStudy`", "created_at": 1677864399.8891208}, "source.fhir_dbt_analytics.fhir.Immunization": {"fqn": ["fhir_dbt_analytics", "fhir", "Immunization"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Immunization", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Immunization", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Immunization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Immunization`", "created_at": 1677864399.8892353}, "source.fhir_dbt_analytics.fhir.Location": {"fqn": ["fhir_dbt_analytics", "fhir", "Location"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Location", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Location", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Location", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Location`", "created_at": 1677864399.88935}, "source.fhir_dbt_analytics.fhir.Medication": {"fqn": ["fhir_dbt_analytics", "fhir", "Medication"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Medication", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Medication", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Medication", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Medication`", "created_at": 1677864399.8894618}, "source.fhir_dbt_analytics.fhir.MedicationDispense": {"fqn": ["fhir_dbt_analytics", "fhir", "MedicationDispense"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.MedicationDispense", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "MedicationDispense", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "MedicationDispense", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`MedicationDispense`", "created_at": 1677864399.889579}, "source.fhir_dbt_analytics.fhir.MedicationAdministration": {"fqn": ["fhir_dbt_analytics", "fhir", "MedicationAdministration"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.MedicationAdministration", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "MedicationAdministration", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "MedicationAdministration", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`MedicationAdministration`", "created_at": 1677864399.8896923}, "source.fhir_dbt_analytics.fhir.MedicationRequest": {"fqn": ["fhir_dbt_analytics", "fhir", "MedicationRequest"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.MedicationRequest", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "MedicationRequest", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "MedicationRequest", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`MedicationRequest`", "created_at": 1677864399.8898034}, "source.fhir_dbt_analytics.fhir.Observation": {"fqn": ["fhir_dbt_analytics", "fhir", "Observation"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Observation", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Observation", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Observation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Observation`", "created_at": 1677864399.8899174}, "source.fhir_dbt_analytics.fhir.Organization": {"fqn": ["fhir_dbt_analytics", "fhir", "Organization"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Organization", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Organization", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Organization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Organization`", "created_at": 1677864399.890388}, "source.fhir_dbt_analytics.fhir.Patient": {"fqn": ["fhir_dbt_analytics", "fhir", "Patient"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Patient", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Patient", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Patient", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Patient`", "created_at": 1677864399.8905997}, "source.fhir_dbt_analytics.fhir.Practitioner": {"fqn": ["fhir_dbt_analytics", "fhir", "Practitioner"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Practitioner", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Practitioner", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Practitioner", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Practitioner`", "created_at": 1677864399.8907316}, "source.fhir_dbt_analytics.fhir.PractitionerRole": {"fqn": ["fhir_dbt_analytics", "fhir", "PractitionerRole"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.PractitionerRole", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "PractitionerRole", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "PractitionerRole", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`PractitionerRole`", "created_at": 1677864399.8908699}, "source.fhir_dbt_analytics.fhir.Procedure": {"fqn": ["fhir_dbt_analytics", "fhir", "Procedure"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.Procedure", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "Procedure", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Procedure", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Procedure`", "created_at": 1677864399.8909962}, "source.fhir_dbt_analytics.fhir.allergy_intolerance": {"fqn": ["fhir_dbt_analytics", "fhir", "allergy_intolerance"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.allergy_intolerance", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "allergy_intolerance", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "allergy_intolerance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`allergy_intolerance`", "created_at": 1677864399.8911204}, "source.fhir_dbt_analytics.fhir.binary": {"fqn": ["fhir_dbt_analytics", "fhir", "binary"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.binary", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "binary", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "binary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`binary`", "created_at": 1677864399.8912387}, "source.fhir_dbt_analytics.fhir.care_plan": {"fqn": ["fhir_dbt_analytics", "fhir", "care_plan"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.care_plan", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "care_plan", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "care_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`care_plan`", "created_at": 1677864399.891354}, "source.fhir_dbt_analytics.fhir.care_team": {"fqn": ["fhir_dbt_analytics", "fhir", "care_team"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.care_team", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "care_team", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "care_team", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`care_team`", "created_at": 1677864399.8914688}, "source.fhir_dbt_analytics.fhir.claim": {"fqn": ["fhir_dbt_analytics", "fhir", "claim"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.claim", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "claim", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`claim`", "created_at": 1677864399.8915913}, "source.fhir_dbt_analytics.fhir.composition": {"fqn": ["fhir_dbt_analytics", "fhir", "composition"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.composition", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "composition", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "composition", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`composition`", "created_at": 1677864399.8917115}, "source.fhir_dbt_analytics.fhir.condition": {"fqn": ["fhir_dbt_analytics", "fhir", "condition"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.condition", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "condition", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "condition", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`condition`", "created_at": 1677864399.8918285}, "source.fhir_dbt_analytics.fhir.device": {"fqn": ["fhir_dbt_analytics", "fhir", "device"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.device", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "device", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "device", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`device`", "created_at": 1677864399.891946}, "source.fhir_dbt_analytics.fhir.diagnostic_report": {"fqn": ["fhir_dbt_analytics", "fhir", "diagnostic_report"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.diagnostic_report", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "diagnostic_report", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "diagnostic_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`diagnostic_report`", "created_at": 1677864399.8920872}, "source.fhir_dbt_analytics.fhir.document_reference": {"fqn": ["fhir_dbt_analytics", "fhir", "document_reference"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.document_reference", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "document_reference", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "document_reference", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`document_reference`", "created_at": 1677864399.8922043}, "source.fhir_dbt_analytics.fhir.encounter": {"fqn": ["fhir_dbt_analytics", "fhir", "encounter"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.encounter", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "encounter", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "encounter", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`encounter`", "created_at": 1677864399.8923192}, "source.fhir_dbt_analytics.fhir.imaging_study": {"fqn": ["fhir_dbt_analytics", "fhir", "imaging_study"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.imaging_study", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "imaging_study", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "imaging_study", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`imaging_study`", "created_at": 1677864399.8924358}, "source.fhir_dbt_analytics.fhir.immunization": {"fqn": ["fhir_dbt_analytics", "fhir", "immunization"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.immunization", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "immunization", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "immunization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`immunization`", "created_at": 1677864399.8925657}, "source.fhir_dbt_analytics.fhir.location": {"fqn": ["fhir_dbt_analytics", "fhir", "location"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.location", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "location", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "location", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`location`", "created_at": 1677864399.8926876}, "source.fhir_dbt_analytics.fhir.medication": {"fqn": ["fhir_dbt_analytics", "fhir", "medication"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.medication", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "medication", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication`", "created_at": 1677864399.892808}, "source.fhir_dbt_analytics.fhir.medication_administration": {"fqn": ["fhir_dbt_analytics", "fhir", "medication_administration"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.medication_administration", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "medication_administration", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication_administration", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication_administration`", "created_at": 1677864399.892926}, "source.fhir_dbt_analytics.fhir.medication_dispense": {"fqn": ["fhir_dbt_analytics", "fhir", "medication_dispense"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.medication_dispense", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "medication_dispense", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication_dispense", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication_dispense`", "created_at": 1677864399.8930411}, "source.fhir_dbt_analytics.fhir.medication_request": {"fqn": ["fhir_dbt_analytics", "fhir", "medication_request"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.medication_request", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "medication_request", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication_request", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication_request`", "created_at": 1677864399.893157}, "source.fhir_dbt_analytics.fhir.observation": {"fqn": ["fhir_dbt_analytics", "fhir", "observation"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.observation", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "observation", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "observation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`observation`", "created_at": 1677864399.8932757}, "source.fhir_dbt_analytics.fhir.organization": {"fqn": ["fhir_dbt_analytics", "fhir", "organization"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.organization", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "organization", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "organization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`organization`", "created_at": 1677864399.8933935}, "source.fhir_dbt_analytics.fhir.patient": {"fqn": ["fhir_dbt_analytics", "fhir", "patient"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.patient", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "patient", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "patient", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`patient`", "created_at": 1677864399.893509}, "source.fhir_dbt_analytics.fhir.practitioner": {"fqn": ["fhir_dbt_analytics", "fhir", "practitioner"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.practitioner", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "practitioner", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "practitioner", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`practitioner`", "created_at": 1677864399.893634}, "source.fhir_dbt_analytics.fhir.practitioner_role": {"fqn": ["fhir_dbt_analytics", "fhir", "practitioner_role"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.practitioner_role", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "practitioner_role", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "practitioner_role", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`practitioner_role`", "created_at": 1677864399.8937511}, "source.fhir_dbt_analytics.fhir.procedure": {"fqn": ["fhir_dbt_analytics", "fhir", "procedure"], "database": "bigquery-public-data", "schema": "fhir_synthea", "unique_id": "source.fhir_dbt_analytics.fhir.procedure", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "name": "procedure", "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "procedure", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`procedure`", "created_at": 1677864399.8938737}}, "macros": {"macro.fhir_dbt_analytics.fhir_resource_table_expression": {"unique_id": "macro.fhir_dbt_analytics.fhir_resource_table_expression", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_view_macros/fhir_resource_table_expression.sql", "original_file_path": "macros/fhir_view_macros/fhir_resource_table_expression.sql", "name": "fhir_resource_table_expression", "macro_sql": "{%- macro fhir_resource_table_expression() -%}\n    {%- if execute -%}\n      {%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n      {%- set fhir_resource_view = fhir_resource~\"_view\" -%}\n      {%- set patient_reference_column = model_metadata(meta_key='patient_reference_column', model_name=fhir_resource_view) -%}\n        SELECT * FROM {{ ref(fhir_resource_view) }}\n    {%- else %}\n        SELECT * FROM undefined\n    {%- endif -%}\n        {%- if var('cohort') != 'all_patients' and patient_reference_column != None %}\n        WHERE EXISTS (\n          SELECT cohort.patient_id\n          FROM {{ ref(var('cohort')) }} AS cohort\n          {%- if fhir_resource == 'Patient' %}\n          WHERE id = cohort.patient_id\n          {%- elif fhir_resource == 'Person' %}\n          JOIN UNNEST(link) AS l ON l.target.patientId = cohort.patient_id\n          {%- else %}\n          WHERE {{patient_reference_column}}.patientId = cohort.patient_id\n          {%- endif %}\n        )\n        {% endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata"]}, "description": "Prints SQL for a common table expression for a FHIR resource.\n\nIt is used by models within the `fhir_resources` folder to generate FHIR resource common\ntable expressions (CTE) that incorporate patient cohorting.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.848609, "supported_languages": null}, "macro.fhir_dbt_analytics.fhir_resource_view_expression": {"unique_id": "macro.fhir_dbt_analytics.fhir_resource_view_expression", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_view_macros/fhir_resource_view_expression.sql", "original_file_path": "macros/fhir_view_macros/fhir_resource_view_expression.sql", "name": "fhir_resource_view_expression", "macro_sql": "{%- macro fhir_resource_view_expression() -%}\n\n{%- if execute -%}\n    {%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n{%- else %}\n    {%- set fhir_resource = 'N/A' -%}\n{%- endif -%}\n\n{%- if fhir_resource_exists(fhir_resource) -%}\n{{ query_fhir_table(fhir_resource) }}\n{%- else %}\n{{ create_dummy_table() }}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.fhir_resource_exists", "macro.fhir_dbt_analytics.query_fhir_table", "macro.fhir_dbt_analytics.create_dummy_table"]}, "description": "Prints SQL for views over a FHIR resource.\n\nIt is used by models within the `fhir_resources` folder to generate FHIR resource views\n(e.g Patient_view.sql).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8479495, "supported_languages": null}, "macro.fhir_dbt_analytics.create_dummy_table": {"unique_id": "macro.fhir_dbt_analytics.create_dummy_table", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_view_macros/create_dummy_table.sql", "original_file_path": "macros/fhir_view_macros/create_dummy_table.sql", "name": "create_dummy_table", "macro_sql": "{%- macro create_dummy_table() -%}\n\n{%- if execute -%}\n{%- set patient_reference_column = model_metadata('patient_reference_column') -%}\n{%- endif -%}\n\nSELECT\n  CAST(NULL AS STRING) AS id,\n{%- if patient_reference_column == \"link[].target\" %}\n  [STRUCT(STRUCT('no_data' AS patientId) AS target)] AS link,\n{%- elif patient_reference_column != None %}\n  STRUCT('no_data' AS patientId) AS {{patient_reference_column}},\n{%- endif %}\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  '{{ var('source_system_default') }}' AS source_system,\n  '{{ var('site_default') }}' AS site,\n  '{{ var('data_transfer_type_default') }}' AS data_transfer_type\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata"]}, "description": "Prints SQL to select dummy values when no tables exist for a FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8473616, "supported_languages": null}, "macro.fhir_dbt_analytics.metadata_cols": {"unique_id": "macro.fhir_dbt_analytics.metadata_cols", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_view_macros/metadata_cols.sql", "original_file_path": "macros/fhir_view_macros/metadata_cols.sql", "name": "metadata_cols", "macro_sql": "{% macro metadata_cols() %}\n    {{ source_system() }} AS source_system,\n    {{ site() }} AS site,\n    {{ data_transfer_type() }} AS data_transfer_type\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.source_system", "macro.fhir_dbt_analytics.site", "macro.fhir_dbt_analytics.data_transfer_type"]}, "description": "Prints SQL for metadata columns to be appended to the FHIR resource views.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8467786, "supported_languages": null}, "macro.fhir_dbt_analytics.query_fhir_table": {"unique_id": "macro.fhir_dbt_analytics.query_fhir_table", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_view_macros/query_fhir_table.sql", "original_file_path": "macros/fhir_view_macros/query_fhir_table.sql", "name": "query_fhir_table", "macro_sql": "{%- macro query_fhir_table(fhir_resource) -%}\n    {%- set metric_date_columns = get_metric_date_columns() -%}\n    {%- set date_column_data_type = column_data_type(metric_date_columns[0], get_source_table_name(fhir_resource)) %}\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    {{- metric_date(metric_date_columns, date_column_data_type) }} AS metric_date,\n    {{- metric_hour(metric_date_columns, date_column_data_type) }} AS metric_hour,\n    {{- metadata_cols() -}}\nFROM {{ source('fhir', get_source_table_name(fhir_resource)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_metric_date_columns", "macro.fhir_dbt_analytics.column_data_type", "macro.fhir_dbt_analytics.get_source_table_name", "macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.metric_hour", "macro.fhir_dbt_analytics.metadata_cols"]}, "description": "Prints SQL for selecting from a FHIR resource table with appended metadata columns.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "The FHIR resource to be queried.\n"}], "created_at": 1677864399.8453252, "supported_languages": null}, "macro.fhir_dbt_analytics.run_unit_tests": {"unique_id": "macro.fhir_dbt_analytics.run_unit_tests", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/tests/run_unit_tests.sql", "original_file_path": "macros/tests/run_unit_tests.sql", "name": "run_unit_tests", "macro_sql": "{% macro run_unit_tests() %}\n    {% do test_snake_case() %}\n    {% do test_sql_comparison_expression() %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.test_snake_case", "macro.fhir_dbt_analytics.test_sql_comparison_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.372181, "supported_languages": null}, "macro.fhir_dbt_analytics.test_snake_case": {"unique_id": "macro.fhir_dbt_analytics.test_snake_case", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/tests/string_macros/test_snake_case.sql", "original_file_path": "macros/tests/string_macros/test_snake_case.sql", "name": "test_snake_case", "macro_sql": "{% macro test_snake_case() %}\n\n    {{ dbt_unittest.assert_equals(snake_case(\"abc\"), \"abc\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"Abc\"), \"abc\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"AbC\"), \"ab_c\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"foo_bar\"), \"foo_bar\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"FooBar\"), \"foo_bar\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"FoObAr\"), \"fo_ob_ar\") }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.snake_case"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.3740215, "supported_languages": null}, "macro.fhir_dbt_analytics.test_sql_comparison_expression": {"unique_id": "macro.fhir_dbt_analytics.test_sql_comparison_expression", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/tests/fhir_analysis_macros/test_sql_comparison_expression.sql", "original_file_path": "macros/tests/fhir_analysis_macros/test_sql_comparison_expression.sql", "name": "test_sql_comparison_expression", "macro_sql": "{% macro test_sql_comparison_expression() %}\n\n    {{ dbt_unittest.assert_equals(\n      sql_comparison_expression(\"abc\"),\n      \"= 'abc'\") }}\n\n    {{ dbt_unittest.assert_equals(\n      sql_comparison_expression([\"abc\", \"foo\"]),\n      \"IN ('abc', 'foo')\") }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.sql_comparison_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.3750508, "supported_languages": null}, "macro.fhir_dbt_analytics.calculate_measure": {"unique_id": "macro.fhir_dbt_analytics.calculate_measure", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/calculate_measure.sql", "original_file_path": "macros/metric_processing_macros/calculate_measure.sql", "name": "calculate_measure", "macro_sql": "{% macro calculate_measure(metric_definition_alias=\"D\", metric_alias=\"M\") -%}\n   CASE\n    WHEN {{metric_definition_alias}}.calculation = 'COUNT'\n    THEN SUM({{metric_alias}}.measure)\n    WHEN {{metric_definition_alias}}.calculation IN ('PROPORTION', 'RATIO')\n    THEN SUM({{metric_alias}}.numerator)/NULLIF(SUM({{metric_alias}}.denominator),0)\n    WHEN {{metric_definition_alias}}.calculation = 'DISTRIBUTION'\n    THEN NULL\n    ELSE ERROR(concat('Unknown calculation: ', {{metric_definition_alias}}.calculation))\n   END\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints SQL which formats the measure metric correctly.\n\nIt is used to aggregate metric measures depending on calculation type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "metric_definition_alias", "type": "string", "description": "Alias of the table that contains metric definitions, defaults to \"D\".\n"}, {"name": "metric_alias", "type": "string", "description": "Alias of the table that contains metric values, defaults to \"M\".\n"}], "created_at": 1677864399.8781767, "supported_languages": null}, "macro.fhir_dbt_analytics.union_metric_tables": {"unique_id": "macro.fhir_dbt_analytics.union_metric_tables", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/union_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/union_metric_tables.sql", "name": "union_metric_tables", "macro_sql": "{% macro union_metric_tables() -%}\n    {%- set metric_tables -%}\n        {{ get_metric_tables() }}\n    {%- endset -%}\n    {%- if execute -%}\n        {%- set metrics = run_query(metric_tables).columns[0].values() -%}\n        SELECT * FROM ({{ empty_metric_output() }})\n        WHERE 1=0\n        {%- for metric in metrics -%}\n            {%- set relation = adapter.get_relation(\n                  database = target.project,\n                  schema = target.dataset,\n                  identifier = metric\n            ) %}\n            UNION ALL\n            SELECT * FROM {{ relation.database }}.{{ relation.schema }}.{{ relation.name }}\n        {%- endfor -%}\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_metric_tables", "macro.dbt.run_query", "macro.fhir_dbt_analytics.empty_metric_output"]}, "description": "Prints SQL that unions all metric output tables that have been materialized.\n\nIt is used for unioning all metric outputs and writing to the `metric` table during metric\npost-processing.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8750856, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_output": {"unique_id": "macro.fhir_dbt_analytics.metric_output", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/metric_output.sql", "original_file_path": "macros/metric_processing_macros/metric_output.sql", "name": "metric_output", "macro_sql": "{% macro metric_output(numerator=None, denominator=None, measure=None) %}\n\n  {%- set dimension_a = model_metadata('dimension_a', value_if_missing='NULL') -%}\n  {%- set dimension_b = model_metadata('dimension_b', value_if_missing='NULL') -%}\n  {%- set dimension_c = model_metadata('dimension_c', value_if_missing='NULL') -%}\n\n  {%- if model_metadata(meta_key='calculation') == 'COUNT' -%}\n    {%- set numerator = 'CAST(NULL AS INT64)' -%}\n    {%- set denominator = 'CAST(NULL AS INT64)' -%}\n    {%- if measure == None -%}\n      {%- set measure = 'CAST(COUNT(DISTINCT id) AS FLOAT64)' -%}\n    {%- endif -%}\n  {%- endif -%}\n  {%- if model_metadata(meta_key='calculation') in ['PROPORTION', 'RATIO'] -%}\n    {%- if measure == None -%}\n      {%- set measure = \"CAST(SAFE_DIVIDE(\" ~ numerator ~ \", \" ~ denominator ~ \") AS FLOAT64)\" -%}\n    {%- endif -%}\n  {%- endif -%}\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  '{{this.name}}' AS metric_name,\n  {{- metric_common_dimensions() }}\n  CAST({{ dimension_a }} AS STRING) AS dimension_a,\n  CAST({{ dimension_b }} AS STRING) AS dimension_b,\n  CAST({{ dimension_c }} AS STRING) AS dimension_c,\n  {{ numerator }} AS numerator,\n  {{ denominator }} AS denominator,\n  {{ measure }} AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.metric_common_dimensions"]}, "description": "Prints a SQL query that calculates a metric over a structured input table (\"A\") to produce an\noutput consistent with the project's data model.\n\nThe macro extracts values from the metric metadata to populate the dimension fields and\ncalculate the measure field according to the metric calculation type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "numerator", "type": "string", "description": "SQL to calculate the numerator value for proportion or ratio metrics. Not required for\ncount metrics.\n"}, {"name": "denominator", "type": "string", "description": "SQL to calculate the denominator value for proportion or ratio calculations. Not required\nfor count metrics.\n"}], "created_at": 1677864399.873885, "supported_languages": null}, "macro.fhir_dbt_analytics.maybe_drop_metric_tables": {"unique_id": "macro.fhir_dbt_analytics.maybe_drop_metric_tables", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/maybe_drop_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/maybe_drop_metric_tables.sql", "name": "maybe_drop_metric_tables", "macro_sql": "{% macro maybe_drop_metric_tables() %}\n    {%- if not var('drop_metric_tables') -%}\n       {% do return('') %}\n    {%- endif -%}\n\n    {%- set metric_tables_dict = dbt_utils.get_query_results_as_dict(get_metric_tables()) -%}\n    {%- for fully_qualified_bq_table in metric_tables_dict['fully_qualified_bq_table'] %}\n       DROP TABLE {{fully_qualified_bq_table}};\n    {%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict", "macro.fhir_dbt_analytics.get_metric_tables"]}, "description": "Optionally prints SQL which drops individual metric output tables.\n\nIt is used to drop these tables after the outputs have been written to the `metric` table\nduring metric post-processing.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8757107, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_common_dimensions": {"unique_id": "macro.fhir_dbt_analytics.metric_common_dimensions", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/metric_common_dimensions.sql", "original_file_path": "macros/metric_processing_macros/metric_common_dimensions.sql", "name": "metric_common_dimensions", "macro_sql": "{%- macro metric_common_dimensions(table_alias=None, exclude_col=None) -%}\n\n{%- set exclude_cols = [exclude_col] -%}\n{%- set common_dimensions = [\n  'fhir_mapping',\n  'source_system',\n  'data_transfer_type',\n  'metric_date',\n  'site'\n] -%}\n{%- set columns = common_dimensions | reject('in', exclude_cols) -%}\n\n{%- if table_alias != None -%}\n  {%- set prefix = table_alias ~ '.' -%}\n{%- else -%}\n  {%- set prefix = '' -%}\n{%- endif -%}\n\n{%- for col in columns %}\n  {{ prefix ~ col }},\n{%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints the field names of the common dimensions that all metrics are segmented by.\n\nIt is used when scripting metrics to save writing out these fields in each query.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "table_alias", "type": "string", "description": "Alias assigned to the table in which the dimension columns are located. Only required if\ndisambiguation of columns is needed in the query join.\n"}, {"name": "exclude_cols", "type": "string", "description": "Columns to exclude from the returned SQL. Required if this column is to be calculated\nwithin the query itself.\n"}], "created_at": 1677864399.8687618, "supported_languages": null}, "macro.fhir_dbt_analytics.calculate_metric": {"unique_id": "macro.fhir_dbt_analytics.calculate_metric", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/calculate_metric.sql", "original_file_path": "macros/metric_processing_macros/calculate_metric.sql", "name": "calculate_metric", "macro_sql": "{%- macro calculate_metric(inner_sql, numerator=None, denominator=None, measure=None) -%}\n\n{% if _are_inputs_available() %}\nWITH\n  A AS (\n    {{ inner_sql }}\n  )\n{{ metric_output(numerator, denominator, measure) }}\n{%- else %}\n{{- empty_metric_output() -}}\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics._are_inputs_available", "macro.fhir_dbt_analytics.metric_output", "macro.fhir_dbt_analytics.empty_metric_output"]}, "description": "Prints a SQL query that caculates a metric given the inner query which calls into\n`metric_common_dimensions` and adds any specific columns.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "numerator", "type": "string", "description": "SQL to calculate the numerator value for proportion or ratio metrics. Not required for\ncount metrics.\n"}, {"name": "denominator", "type": "string", "description": "SQL to calculate the denominator value for proportion or ratio calculations. Not required\nfor count metrics.\n"}], "created_at": 1677864399.8712032, "supported_languages": null}, "macro.fhir_dbt_analytics._are_inputs_available": {"unique_id": "macro.fhir_dbt_analytics._are_inputs_available", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/calculate_metric.sql", "original_file_path": "macros/metric_processing_macros/calculate_metric.sql", "name": "_are_inputs_available", "macro_sql": "\n{%- macro _are_inputs_available() %}\n    {% if not fhir_resource_exists(model_metadata('primary_resource')) %}\n        {% do return(False) %}\n    {% endif %}\n    {% for secondary_resource in model_metadata('secondary_resources', value_if_missing=[])\n        if not fhir_resource_exists(secondary_resource) %}\n        {% do return(False) %}\n    {% endfor %}\n    {% for primary_field in model_metadata('primary_fields', value_if_missing=[])\n        if not column_exists(primary_field) %}\n        {% do return(False) %}\n    {% endfor %}\n\n    {% do return(True) %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_exists", "macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.column_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.3884773, "supported_languages": null}, "macro.fhir_dbt_analytics.get_metric_tables": {"unique_id": "macro.fhir_dbt_analytics.get_metric_tables", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/get_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/get_metric_tables.sql", "name": "get_metric_tables", "macro_sql": "{% macro get_metric_tables() %}\n  SELECT\n    T.table_name,\n    CONCAT('`', T.table_catalog, '`.`', T.table_schema, '`.`', T.table_name, '`') AS fully_qualified_bq_table\n  FROM {{target.project}}.{{target.dataset}}.INFORMATION_SCHEMA.TABLES AS T\n  JOIN {{ ref('metric_all_definitions') }} AS D ON T.table_name = D.metric_name\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints SQL for selecting metric output tables that have been materialized.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8744867, "supported_languages": null}, "macro.fhir_dbt_analytics.create_metric_view": {"unique_id": "macro.fhir_dbt_analytics.create_metric_view", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/metric_processing_macros/create_metric_view.sql", "original_file_path": "macros/metric_processing_macros/create_metric_view.sql", "name": "create_metric_view", "macro_sql": "{% macro create_metric_view(\n  segment_by_date=None,\n  segment_by_dimensions=None\n) -%}\n\n{%- if segment_by_dimensions == None -%}\n  {%- set segment_by_dimensions = [] -%}\n{%- endif -%}\n\n{%- set group_by_count = 11 -%}\n\nSELECT\n\n{#- base segments, present in all views #}\n  D.metric_name,\n  D.description,\n  D.short_description,\n  D.primary_resource,\n  ARRAY_TO_STRING(D.primary_fields, \",\") AS primary_fields,\n  ARRAY_TO_STRING(D.secondary_resources, \",\") AS secondary_resources,\n  D.category,\n  D.calculation,\n  M.source_system,\n  M.site,\n  M.fhir_mapping,\n\n\n{#- date segments -#}\n{%- if segment_by_date %}\n  {%- set group_by_count = group_by_count + 2 %}\n  D.metric_date_field,\n  D.metric_date_description,\n{%- endif -%}\n\n{%- if segment_by_date == 'YEAR' %}\n  {%- set group_by_count = group_by_count + 1 %}\n  EXTRACT(YEAR FROM M.metric_date) AS metric_year,\n{%- endif -%}\n\n{%- if segment_by_date == 'DAY' %}\n  {%- set group_by_count = group_by_count + 2 %}\n  EXTRACT(YEAR FROM M.metric_date) AS metric_year,\n  M.metric_date,\n{%- endif -%}\n\n\n{#- dimension segments -#}\n{%- if 'dimension_a' in segment_by_dimensions %}\n  {%- set group_by_count = group_by_count + 3 %}\n  {{ snake_case_to_proper_case('D.dimension_a') }} AS dimension_a_name,\n  D.dimension_a_description,\n  M.dimension_a,\n{%- endif -%}\n\n{%- if 'dimension_b' in segment_by_dimensions %}\n  {%- set group_by_count = group_by_count + 3 %}\n  {{ snake_case_to_proper_case('D.dimension_b') }} AS dimension_b_name,\n  D.dimension_b_description,\n  M.dimension_b,\n{%- endif -%}\n\n{%- if 'dimension_c' in segment_by_dimensions %}\n  {%- set group_by_count = group_by_count + 3 %}\n  {{ snake_case_to_proper_case('D.dimension_c') }} AS dimension_c_name,\n  D.dimension_c_description,\n  M.dimension_c,\n{%- endif -%}\n\n\n{#- measure calculation #}\n  SUM(M.numerator) AS numerator,\n  SUM(M.denominator) AS denominator,\n  {{ calculate_measure() }} AS measure\n\nFROM {{ ref('metric_definition') }} AS D\nJOIN {{ ref('metric') }} AS M USING(metric_name)\n\n{{ dbt_utils.group_by(group_by_count)|upper }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.snake_case_to_proper_case", "macro.fhir_dbt_analytics.calculate_measure", "macro.dbt_utils.group_by"]}, "description": "Prints SQL which creates a table joining the metric and metric definition tables. \n\nUsed for views, configurable to include or exclude dimensions & date aggregation.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "segment_by_date", "type": "string", "description": "Specify the time-period granularity to segement the metrics by.\n\nSupported values: 'DAY', 'YEAR'.\n\nIf no value is provided then the view will not segment by any time-period.\n"}, {"name": "segment_by_dimensions", "type": "list", "description": "Specify the metric-specific dimensions to segment the metrics by.\n\nSupported values: 'dimension_a', 'dimension_b', 'dimension_c'.\n\nIf no value is provided then the view will not segment by any metric-specific dimensions.\n"}], "created_at": 1677864399.880653, "supported_languages": null}, "macro.fhir_dbt_analytics.snake_case_to_proper_case": {"unique_id": "macro.fhir_dbt_analytics.snake_case_to_proper_case", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/string_macros/snake_case_to_proper_case.sql", "original_file_path": "macros/string_macros/snake_case_to_proper_case.sql", "name": "snake_case_to_proper_case", "macro_sql": "{%- macro snake_case_to_proper_case(snake_case_column) -%}\nREPLACE(INITCAP({{ snake_case_column }}, '_'), '_', ' ')\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Converts a snake_case column (e.g. encounter_class) to Proper Case (e.g Encounter Class).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "snake_case_column", "type": "string", "description": "Column with snake_case value to be converted to Proper Case.\n"}], "created_at": 1677864399.8839993, "supported_languages": null}, "macro.fhir_dbt_analytics.snake_case": {"unique_id": "macro.fhir_dbt_analytics.snake_case", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/string_macros/snake_case.sql", "original_file_path": "macros/string_macros/snake_case.sql", "name": "snake_case", "macro_sql": "{% macro snake_case(str) %}\n    {#- Add underscore before capital letters which follow lowercase letters -#}\n    {% set str = modules.re.sub(\"([a-z])([A-Z])\", \"\\\\1_\\\\2\", str) %}\n    {#- Lower case the string -#}\n    {{ return(str | lower) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Returns a snake_case version of a CamelCase string.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "str", "type": "string", "description": "String in CamelCase to be converted to snake_case.\n"}], "created_at": 1677864399.8824315, "supported_languages": null}, "macro.fhir_dbt_analytics.linking_api_datasource": {"unique_id": "macro.fhir_dbt_analytics.linking_api_datasource", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/data_visualization_macros/linking_api_datasource.sql", "original_file_path": "macros/data_visualization_macros/linking_api_datasource.sql", "name": "linking_api_datasource", "macro_sql": "{%- macro linking_api_datasource(report_id, datasource_list) -%}\n  CONCAT(\n    'https://lookerstudio.google.com/reporting/create?',\n    'c.reportId=', '{{ report_id|urlencode }}',\n    {%- for datasource in datasource_list %}\n      {%- set alias = datasource[0] -%}\n    '&ds.{{ alias }}.type=TABLE',\n    '&ds.{{ alias }}.projectId=', '{{ this.database|urlencode }}',\n    '&ds.{{ alias }}.datasetId=', '{{ this.schema|urlencode }}',\n    '&ds.{{ alias }}.tableId=', '{{ datasource[1]|urlencode }}'\n    {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n  )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Returns a URL to create a Looker Studio dashboard from a template dashboard using the Looker\nStudio [Linking API](https://developers.google.com/looker-studio/integrate/linking-api).\n\nThis URL contains the bigquery project and dataset, as defined in profiles.yml, as parameters.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "report_id", "type": "string", "description": "Report ID of the Looker studio template dashboard to be cloned.\n"}, {"name": "datasource_list", "type": "list", "description": "List of Looker Studio datasources used by the template dashboard."}], "created_at": 1677864399.8863552, "supported_languages": null}, "macro.fhir_dbt_analytics.sql_comparison_expression": {"unique_id": "macro.fhir_dbt_analytics.sql_comparison_expression", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/sql_comparison_expression.sql", "original_file_path": "macros/fhir_analysis_macros/sql_comparison_expression.sql", "name": "sql_comparison_expression", "macro_sql": "{% macro sql_comparison_expression(code_string_or_list) -%}\n {%- if code_string_or_list is string -%}\n  = '{{ code_string_or_list }}'\n  {%- elif code_string_or_list is iterable -%}\n  IN ('{{ code_string_or_list|join(\"', '\") }}')\n  {%- else -%}\n  {{ exceptions.raise_compiler_error(\"Invalid argument \" ~ code_string_or_list) }}\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Converts a string or list of codes into a format compatible with a SQL comparison expression.\n\nIf the input is a string then format as a sql equality expression. Example: column = 'string'\n\nIf the input is a list then format as a sql \"IN\" expression with comma-separated values\nenclosed within parentheses. Example: column IN ('list_item_1', 'list_item_2')\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "code_string_or_list", "type": "string or list", "description": "String or list of strings to evaluate field against.\n"}], "created_at": 1677864399.825928, "supported_languages": null}, "macro.fhir_dbt_analytics.site": {"unique_id": "macro.fhir_dbt_analytics.site", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/site.sql", "original_file_path": "macros/fhir_analysis_macros/site.sql", "name": "site", "macro_sql": "{% macro site() -%}\n        '{{ var('site_default') }}'\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Extracts the provider code from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8271353, "supported_languages": null}, "macro.fhir_dbt_analytics.reference_resolves": {"unique_id": "macro.fhir_dbt_analytics.reference_resolves", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/reference_resolves.sql", "original_file_path": "macros/fhir_analysis_macros/reference_resolves.sql", "name": "reference_resolves", "macro_sql": "{% macro reference_resolves(\n  reference_column,\n  reference_resource\n) -%}\n\n{%- set reference_paths = get_reference_paths(reference_column, reference_resource) -%}\n{%- set direct_reference = reference_paths['direct_reference'] -%}\n{%- set direct_reference_path = reference_paths['direct_reference_path'] -%}\n{%- set indirect_reference_path = reference_paths['indirect_reference_path'] -%}\n{%- set reference_column_is_array = reference_paths['reference_column_is_array']-%}\n\n{%- if reference_column_is_array -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM UNNEST({{reference_column}}) AS RC JOIN {{ref(reference_resource)}} AS RR ON RC.{{direct_reference}} = RR.id)\n  {%- elif column_exists(indirect_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM UNNEST({{reference_column}}) AS RC JOIN {{ref(reference_resource)}} AS RR ON RC.reference = RR.id AND RC.type = '{{reference_resource}}')\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- else -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    IF({{direct_reference_path}} IN (SELECT id FROM {{ ref(reference_resource) }}), 1, 0)\n  {%- elif column_exists(indirect_reference_path) -%}\n    IF({{reference_column}}.type = '{{reference_resource}}' AND {{indirect_reference_path}} IN (SELECT id FROM {{ref(reference_resource)}}), 1, 0)\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_reference_paths", "macro.fhir_dbt_analytics.column_exists"]}, "description": "Prints SQL for evaluating whether a reference field value exists within the refererred FHIR\nresource, returning an integer flag of 1 if so and 0 if not.\n\nMacro will preferentially use direct resource references (e.g. 'subject.patientId') defined by\nthe [SQL-on-FHIR](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#references)\nprojections. If this field does not exist in the FHIR resource, then the standard FHIR\nresource references are used (e.g. 'subject.reference' and 'subject.type').\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "reference_column", "type": "string", "description": "FHIR reference field to evaluate. Only include the top-level reference field.\nFor example,'subject' rather than 'subject.patientId'\n"}, {"name": "reference_resource", "type": "string", "description": "FHIR resource to to check for the presence of the reference field value (e.g. 'Patient).\n"}], "created_at": 1677864399.8243864, "supported_languages": null}, "macro.fhir_dbt_analytics.active_encounters": {"unique_id": "macro.fhir_dbt_analytics.active_encounters", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/active_encounters.sql", "original_file_path": "macros/fhir_analysis_macros/active_encounters.sql", "name": "active_encounters", "macro_sql": "{%- macro active_encounters(encounter_classes=['IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB']) %}\n      WITH\n        Enc AS (\n          SELECT\n            id,\n            subject.patientId AS patientId,\n            {{ metric_date(['period.start'])|indent(2) }} AS period_start,\n            {{ metric_date(['period.end'])|indent(2) }} AS period_end,\n            {{- metric_common_dimensions(exclude_col='metric_date')|indent }}\n            CASE WHEN UPPER(class.code) IN ('IMP', 'ACUTE', 'NONAC') THEN 'IMP/ACUTE/NONAC' ELSE class.code END AS encounter_class,\n            {{ encounter_class_group('class.code')|indent(6) }} AS encounter_class_group,\n            serviceProvider.organizationId AS encounter_service_provider,\n            {{ date_array()|indent(6) }} as date_array\n          FROM {{ ref('Encounter') }}\n          WHERE\n            UPPER(class.code) {{ sql_comparison_expression(encounter_classes) }}\n            AND status IN ('in-progress', 'finished')\n            AND period.start IS NOT NULL\n            AND period.start <> ''\n        )\n        SELECT *\n        FROM Enc\n        JOIN UNNEST(date_array) as metric_date\n          ON Enc.period_start <= metric_date\n          AND {{ cap_encounter_end_date()|indent }} >= metric_date\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.encounter_class_group", "macro.fhir_dbt_analytics.date_array", "macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.cap_encounter_end_date"]}, "description": "Prints SQL for extracting active encounters per day over a set period of time.\n\nThe output is one row per date per patient with an active encounter that spans (at least\npartially) that date.\n\nAmbulatory encounters are joined on matching period.start only.\n\nNon-ambulatory encounters are capped at 90 days to reduce the impact of encounters that are\ncomplete but period.end is missing or recorded incorrectly.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "encounter_classes", "type": "list", "description": "List of encounter class code from\n[ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode) to restrict\nthe list of active encounters to.\n\nIf not specified, the macro will default to including encounters with the following codes:\n'IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB'.\n"}], "created_at": 1677864399.8382244, "supported_languages": null}, "macro.fhir_dbt_analytics.local_date": {"unique_id": "macro.fhir_dbt_analytics.local_date", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/local_date.sql", "original_file_path": "macros/fhir_analysis_macros/local_date.sql", "name": "local_date", "macro_sql": "{% macro local_date(date_column, date_column_data_type) -%}\n{%- if date_column_data_type == 'TIMESTAMP' -%}\n    DATE(\n      {{ date_column }},\n      {{ data_timezone()|indent(6) }}\n    )\n{%- else -%}\n    IF(\n      CHAR_LENGTH({{ date_column }}) = 10,\n      SAFE_CAST({{ date_column }} AS DATE),\n      DATE(\n        SAFE_CAST({{ date_column }} AS TIMESTAMP),\n        {{- data_timezone()|indent(8) }}\n      )\n    )\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.data_timezone"]}, "description": "Prints SQL for returning the local date from a specified date, datetime or timestamp column.\n\nLocal date is the date where the clinical event took place.\n\nThe macro uses the `timezone_default` project variable.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "date_column", "type": "String, date, datetime or timestamp", "description": "String, date, datetime or timestamp column from which to derive the local date.\n"}, {"name": "date_column_data_type", "type": "string", "description": "The datatype of `date_column`.\n"}], "created_at": 1677864399.830976, "supported_languages": null}, "macro.fhir_dbt_analytics.data_timezone": {"unique_id": "macro.fhir_dbt_analytics.data_timezone", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/data_timezone.sql", "original_file_path": "macros/fhir_analysis_macros/data_timezone.sql", "name": "data_timezone", "macro_sql": "{%- macro data_timezone() -%}\n'{{ var('timezone_default') }}'\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Extracts the timezone code from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8286014, "supported_languages": null}, "macro.fhir_dbt_analytics.data_transfer_type": {"unique_id": "macro.fhir_dbt_analytics.data_transfer_type", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/data_transfer_type.sql", "original_file_path": "macros/fhir_analysis_macros/data_transfer_type.sql", "name": "data_transfer_type", "macro_sql": "{% macro data_transfer_type() -%}\n        '{{ var('data_transfer_type_default') }}'\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Extracts the mechanism of data transfer from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8277407, "supported_languages": null}, "macro.fhir_dbt_analytics.cap_encounter_end_date": {"unique_id": "macro.fhir_dbt_analytics.cap_encounter_end_date", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/cap_encounter_end_date.sql", "original_file_path": "macros/fhir_analysis_macros/cap_encounter_end_date.sql", "name": "cap_encounter_end_date", "macro_sql": "{%- macro cap_encounter_end_date(\n  period_start='period_start',\n  period_end='period_end',\n  encounter_class='encounter_class',\n  length_of_stay_cap=None\n) -%}\n{%- if length_of_stay_cap == None -%}\n{%- set length_of_stay_cap = var('length_of_stay_cap') -%}\n{%- endif -%}\nLEAST(\n  IFNULL({{period_end}}, CURRENT_DATE()),\n  DATE_ADD({{period_start}}, INTERVAL {{length_of_stay_cap}} DAY),\n  IF({{encounter_class}} = 'AMB', {{period_start}}, CURRENT_DATE())\n)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints SQL for returning a capped encounter end date.\n\nIt is used to limit the effect of long stay encounters on metrics, which may be due to missing\nor incorrect recording of the encounter end date.\n\nIt takes the provided encounter end date (`period_end`) and converts this date to an earlier\ndate if criteria are met.\n\nFor ambulatory encounters, the encounter end date is set to the encounter start date.\n\nFor non-ambulatory encounters, the encounter end date is set to n days after the encounter\nstart date if this is earlier than the recorded encounter end date. The value for n is\ndetermined by the `cap_length_of_stay` argument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "period_start", "type": "string", "description": "The column name containing the encounter start date. Default: `period_start`.\n"}, {"name": "period_end", "type": "string", "description": "The column name containing the encounter end date. Default: `period_end`.\n"}, {"name": "encounter_class", "type": "string", "description": "The column name containing the encounter class. Default: `encounter_class`.\n"}, {"name": "length_of_stay_cap", "type": "int", "description": "The number of days to cap non-ambulatory encounter length of stay. Default:\n`length_of_stay_cap` project variable.\n"}], "created_at": 1677864399.8422587, "supported_languages": null}, "macro.fhir_dbt_analytics.has_reference_value": {"unique_id": "macro.fhir_dbt_analytics.has_reference_value", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/has reference_value.sql", "original_file_path": "macros/fhir_analysis_macros/has reference_value.sql", "name": "has_reference_value", "macro_sql": "{% macro has_reference_value(\n  reference_column,\n  reference_resource\n) %}\n\n{%- set reference_paths = get_reference_paths(reference_column, reference_resource) -%}\n{%- set direct_reference = reference_paths['direct_reference'] -%}\n{%- set direct_reference_path = reference_paths['direct_reference_path'] -%}\n{%- set indirect_reference_path = reference_paths['indirect_reference_path'] -%}\n{%- set reference_column_is_array = reference_paths['reference_column_is_array']-%}\n\n{%- if reference_column_is_array -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM UNNEST({{reference_column}}) WHERE {{has_value(direct_reference)}})\n  {%- elif column_exists(indirect_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM UNNEST({{reference_column}}) WHERE type = '{{reference_resource}}' AND {{has_value('reference')}})\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- else -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    IF({{has_value(direct_reference_path)}}, 1, 0)\n  {%- elif column_exists(indirect_reference_path) -%}\n    IF({{reference_column}}.type = '{{reference_resource}}' AND {{has_value(indirect_reference_path)}}, 1, 0)\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_reference_paths", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.has_value"]}, "description": "Prints SQL for evaluating whether a reference field has a value recorded, returning TRUE if so\nand FALSE if not.\n\nA field is evaluated as not recorded if it is NULL or contains a value matching any value\nwithin the `null_values` list argument.\n\nMacro will preferentially use direct resource references (e.g. 'subject.patientId') defined by\nthe [SQL-on-FHIR](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#references)\nprojections. If this field does not exist in the FHIR resource, then the standard FHIR\nresource references are used (e.g. 'subject.reference' and 'subject.type').\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "reference_column", "type": "string", "description": "FHIR reference field to evaluate. Only include the top-level reference field.\nFor example,'subject' rather than 'subject.patientId'\n"}, {"name": "reference_resource", "type": "string", "description": "FHIR resource for which this reference value refers to (e.g. 'Patient).\n"}], "created_at": 1677864399.8220217, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_hour": {"unique_id": "macro.fhir_dbt_analytics.metric_hour", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/metric_hour.sql", "original_file_path": "macros/fhir_analysis_macros/metric_hour.sql", "name": "metric_hour", "macro_sql": "{%- macro metric_hour(metric_date_columns, date_column_data_type) -%}\n{%- if metric_date_columns == None %}\n    CAST(NULL AS TIMESTAMP)\n{%- else -%}\n    {%- if metric_date_columns | length > 1 -%}\n      {%- set date_column = \"COALESCE(\" + metric_date_columns|join(\", \") + \")\" -%}\n    {%- else %}\n      {%- set date_column = metric_date_columns[0] -%}\n    {%- endif -%}\n    {{ local_hour(date_column, date_column_data_type) }}\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.local_hour"]}, "description": "Prints SQL for returining the local hour from an ordered list of FHIR fields.\n\nIt is used for returning the most clinically-relevant local hour for a given FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "metric_date_columns", "type": "list", "description": "Ordered list of columns to use to derive the metric date.\n"}, {"name": "date_column_data_type", "type": "string", "description": "The datatype of `metric_date_columns`.\n"}], "created_at": 1677864399.8357644, "supported_languages": null}, "macro.fhir_dbt_analytics.code_from_codeableconcept": {"unique_id": "macro.fhir_dbt_analytics.code_from_codeableconcept", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "original_file_path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "name": "code_from_codeableconcept", "macro_sql": "{% macro code_from_codeableconcept(\n  field_name,\n  code_system,\n  fhir_resource=None,\n  index=None,\n  null_values=var('null_values'),\n  return_field='code',\n  return_int=False\n) -%}\n\n{%- if execute and fhir_resource == None -%}\n  {%- set fhir_resource = model_metadata(meta_key='primary_resource') -%}\n{%- endif -%}\n\n{%- set column_dict = get_column_datatype_dict(fhir_resource) -%}\n\n{%- if execute and (\n      field_name ~ '.coding.code' not in column_dict or\n      field_name ~ '.coding.system' not in column_dict\n    )\n-%}\n  {{ return(0) if return_int else return(\"'missing_or_invalid_codeableconcept_field'\") }}\n{%- endif -%}\n\n{%- set field_is_array =\n      execute\n      and field_name in column_dict\n      and column_dict[field_name].startswith('ARRAY')\n-%}\n\n{%- if index != None -%}\n  {%- set field_name = field_name~'[SAFE_OFFSET('~index~')]' -%}\n{%- endif -%}\n\n{%- if return_int == True %}\n      (\n        SELECT SIGN(COUNT(*))\n        {%- if field_is_array and index==None %}\n        FROM UNNEST({{field_name}}) f, UNNEST(f.coding) c\n        {%- else %}\n        FROM UNNEST({{field_name}}.coding) AS c\n        {%- endif %}\n        WHERE c.system = '{{code_system}}'\n        AND c.code IS NOT NULL\n        {%- if null_values|length > 0 %}\n        AND c.code NOT IN ('{{null_values|join(\"', '\")}}')\n        {%- endif %}\n      )\n{%- else -%}\n  {%- if field_is_array and index==None %}\n    (SELECT c.{{return_field}} FROM UNNEST({{field_name}}) f, UNNEST(f.coding) c WHERE c.system = '{{code_system}}' ORDER BY c.code LIMIT 1)\n  {%- else -%}\n    (SELECT c.{{return_field}} FROM UNNEST({{field_name}}.coding) c WHERE c.system = '{{code_system}}' ORDER BY c.code LIMIT 1)\n  {%- endif -%}\n{%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.get_column_datatype_dict"]}, "description": "Attempts to extract a code for a specified code system from a FHIR codeableConcept field.\n\nIf coding.code is not informative, then can return coding.display instead by setting the\nreturn_field argument to 'display'.\n\nTo return an integer flag for whether a code exists, set return_int to True.\n\nIf the field specified does not exist in the table, then \"missing_field\" or 0 is returned,\ndepending on the return_int agument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field that is of type codeableConcept. If this field in an array, then the macro will\nunnest this field.\n"}, {"name": "code_system", "type": "string", "description": "Coding system to filter the search of the codeableConcept field.\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `field_name` exists. If not specified,\nthe macro will default to using the `primary_resource` for the metric.\n"}, {"name": "index", "type": "int", "description": "For codeableConcept fields that are repeatable, return the field specified by this index\nvalue.\n"}, {"name": "null_values", "type": "list", "description": "List of string values considered as NULL. If the extracted code matches any of these\nvalues, the macro will return a 0. Default: `null_values` project variable.\n"}, {"name": "return_field", "type": "string", "description": "If set to 'display', the macro will return the coding.display field from the\ncodeableConcept. By default, coding.code will be returned.\n"}, {"name": "return_int", "type": "boolean", "description": "If set to True, the macro will return an integer flag for whether a code exists, rather\nthan the code or display value itself.\n"}], "created_at": 1677864399.8170042, "supported_languages": null}, "macro.fhir_dbt_analytics.local_hour": {"unique_id": "macro.fhir_dbt_analytics.local_hour", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/local_hour.sql", "original_file_path": "macros/fhir_analysis_macros/local_hour.sql", "name": "local_hour", "macro_sql": "{% macro local_hour(date_column, date_column_data_type) -%}\n{%- if date_column_data_type == 'TIMESTAMP' -%}\n    TIMESTAMP_TRUNC(\n      {{ date_column }}, \n      HOUR,\n      {{ data_timezone()|indent(6) }}\n    )\n\n{%- else -%}\n    IF(\n      CHAR_LENGTH({{ date_column }}) = 10,\n      SAFE_CAST(NULL AS TIMESTAMP),\n      TIMESTAMP_TRUNC(\n        SAFE_CAST({{ date_column }} AS TIMESTAMP),\n        HOUR,\n        {{- data_timezone()|indent(8) }}\n      )\n    )\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.data_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4201286, "supported_languages": null}, "macro.fhir_dbt_analytics.encounter_class_group": {"unique_id": "macro.fhir_dbt_analytics.encounter_class_group", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/encounter_class_group.sql", "original_file_path": "macros/fhir_analysis_macros/encounter_class_group.sql", "name": "encounter_class_group", "macro_sql": "{%- macro encounter_class_group(class_code) -%}\nCASE\n  WHEN UPPER({{class_code}}) = 'AMB' THEN 'Ambulatory'\n  WHEN UPPER({{class_code}}) IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER') THEN 'Non-Ambulatory'\n  ELSE 'Other' END\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Aggregates encounter class codes into two broader groups (Ambulatory and\nNon-Ambulatory).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "class_code", "type": "string", "description": "Encounter class code from\n[ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode)\n"}], "created_at": 1677864399.8437755, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_date": {"unique_id": "macro.fhir_dbt_analytics.metric_date", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/metric_date.sql", "original_file_path": "macros/fhir_analysis_macros/metric_date.sql", "name": "metric_date", "macro_sql": "{%- macro metric_date(metric_date_columns, date_column_data_type) -%}\n{%- if metric_date_columns == None %}\n    CAST(NULL AS DATE)\n{%- else -%}\n    {%- if metric_date_columns | length > 1 -%}\n      {%- set date_column = \"COALESCE(\" + metric_date_columns|join(\", \") + \")\" -%}\n    {%- else %}\n      {%- set date_column = metric_date_columns[0] -%}\n    {%- endif -%}\n      {{ local_date(date_column, date_column_data_type) }}\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.local_date"]}, "description": "Prints SQL for returining the local date from an ordered list of FHIR fields.\n\nIt is used for returning the most clinically-relevant local date for a given FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "metric_date_columns", "type": "list", "description": "Ordered list of columns to use to derive the metric date.\n"}, {"name": "date_column_data_type", "type": "string", "description": "The datatype of `metric_date_columns`.\n"}], "created_at": 1677864399.8333812, "supported_languages": null}, "macro.fhir_dbt_analytics.get_column_or_default": {"unique_id": "macro.fhir_dbt_analytics.get_column_or_default", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/get_column_or_default.sql", "original_file_path": "macros/fhir_analysis_macros/get_column_or_default.sql", "name": "get_column_or_default", "macro_sql": "{% macro get_column_or_default(column_name, fhir_resource=None, table_alias=None) %}\n\n    {%- if execute and fhir_resource == None -%}\n        {%- set fhir_resource = model_metadata(meta_key='primary_resource') -%}\n    {%- endif -%}\n\n    {%- if column_exists(column_name, fhir_resource) -%}\n        {%- if table_alias != None -%}\n          {{ return(table_alias ~ \".\" ~ column_name) }}\n        {%- else -%}\n          {{ return(column_name) }}\n        {%- endif -%}\n    {%- else -%}\n        {{ return('NULL') }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.column_exists"]}, "description": "Returns a specified column if it exists within a resource, defaulting to NULL if it does not\nexist.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Fully qualified column name to evaluate (e.g. code.coding.display).\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `column_name` exists.\n\nIf not specified, the macro will default to using the `primary_resource` for the metric.\n"}, {"name": "table_alias", "type": "string", "description": "Alias assigned to the table in which `column_name` is located. Only required if\ndisambiguation of columns is needed in the query join.\n"}], "created_at": 1677864399.8100631, "supported_languages": null}, "macro.fhir_dbt_analytics.date_array": {"unique_id": "macro.fhir_dbt_analytics.date_array", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/date_array.sql", "original_file_path": "macros/fhir_analysis_macros/date_array.sql", "name": "date_array", "macro_sql": "{%- macro date_array() -%}\nGENERATE_DATE_ARRAY(\n{%- if var('static_dataset') %}\n  PARSE_DATE(\"%F\", \"{{ var('earliest_date') }}\"),\n  PARSE_DATE(\"%F\", \"{{ var('latest_date') }}\")\n{%- else %}\n  DATE_SUB(CURRENT_DATE(), INTERVAL {{ var('months_history') }} MONTH),\n  CURRENT_DATE()\n{%- endif %}\n)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints SQL for generating an array of dates based on the FHIR dataset.\n\nIf the static_dataset project variable is TRUE then this array includes all dates between\nearliest_date and latest_date inclusive.\n\nIf the static_dataset project variable is FALSE then this array includes dates up to and\nincluding the current date, going back the number of months defined by the months_history\nproject variable.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8364344, "supported_languages": null}, "macro.fhir_dbt_analytics.source_system": {"unique_id": "macro.fhir_dbt_analytics.source_system", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/source_system.sql", "original_file_path": "macros/fhir_analysis_macros/source_system.sql", "name": "source_system", "macro_sql": "{% macro source_system() -%}\n        '{{ var('source_system_default') }}'\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Extracts the data source from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8265269, "supported_languages": null}, "macro.fhir_dbt_analytics.has_value": {"unique_id": "macro.fhir_dbt_analytics.has_value", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/fhir_analysis_macros/has_value.sql", "original_file_path": "macros/fhir_analysis_macros/has_value.sql", "name": "has_value", "macro_sql": "{% macro has_value(field_name, null_values=var('null_values')) -%}\n\n{{field_name}} IS NOT NULL {%- if null_values|length > 0 %} AND {{field_name}} NOT IN ('{{null_values|join(\"', '\")}}') {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints SQL for evaluating whether a field has a value recorded, returning TRUE if so and\nFALSE if not.\n\nA field is evaluated as not recorded if it is NULL or contains a value matching any value\nwithin the `null_values` list argument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field to evaluate.\n"}, {"name": "null_values", "type": "list", "description": "List of string values considered as NULL. If `field_name` matches any of these values, the\nSQL will return FALSE. Default: `null_values` project variable.\n"}], "created_at": 1677864399.8196487, "supported_languages": null}, "macro.fhir_dbt_analytics.empty_metric_output": {"unique_id": "macro.fhir_dbt_analytics.empty_metric_output", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/empty_metric_output.sql", "original_file_path": "macros/infrastructure_macros/empty_metric_output.sql", "name": "empty_metric_output", "macro_sql": "{%- macro empty_metric_output() %}\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  '{{this.name}}' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  '{{var('source_system_default')}}' AS source_system,\n  '{{var('data_transfer_type_default')}}' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  '{{var('site_default')}}' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prints SQL select statement that writes a default row as the output of a metric. This is used\nwhen a metric is not evaluated because the required FHIR resources do not exist in the\ndataset.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.866401, "supported_languages": null}, "macro.fhir_dbt_analytics.is_public_synthea_dataset": {"unique_id": "macro.fhir_dbt_analytics.is_public_synthea_dataset", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/is_public_synthea_dataset.sql", "original_file_path": "macros/infrastructure_macros/is_public_synthea_dataset.sql", "name": "is_public_synthea_dataset", "macro_sql": "{%- macro is_public_synthea_dataset() -%}\n    {{ return(var('schema') == 'fhir_synthea' and var('database') == 'bigquery-public-data') }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Returns TRUE if project schema and database variables are pointing to the [Synthea public\nBiqQuery dataset](https://console.cloud.google.com/marketplace/details/mitre/synthea-fhir)\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8628438, "supported_languages": null}, "macro.fhir_dbt_analytics.get_column_datatype_dict": {"unique_id": "macro.fhir_dbt_analytics.get_column_datatype_dict", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/get_column_datatype_dict.sql", "original_file_path": "macros/infrastructure_macros/get_column_datatype_dict.sql", "name": "get_column_datatype_dict", "macro_sql": "{% macro get_column_datatype_dict(fhir_resource=None) %}\n\n    {%- if not execute -%}\n        {% do return(True) %}\n    {% endif %}\n\n    {%- if fhir_resource == None -%}\n        {%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n    {%- endif -%}\n    {%- if fhir_resource == None -%}\n        {%- set fhir_resource = model_metadata(meta_key='primary_resource') -%}\n    {%- endif -%}\n\n    {%- set relation = adapter.get_relation(\n        database = this.project,\n        schema = this.dataset,\n        identifier = fhir_resource ~ \"_view\") -%}\n\n    {% if not relation %}\n        {% do return (False) %}\n    {% endif %}\n\n    {%- set column_dict = {} -%}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n    {% for top_level_column in columns %}\n        {%- do column_dict.update({top_level_column.column: top_level_column.data_type}) -%}\n        {% for column in top_level_column.flatten() %}\n            {%- do column_dict.update({column.column: column.data_type}) -%}\n        {% endfor %}\n    {%- endfor -%}\n\n    {%- do return(column_dict) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata"]}, "description": "Returns a dictionary object containing all columns (keys) in a FHIR resource view and their\ndata types (values).\n\nIncluded in the dictionary are both top-level columns (e.g. code) and nested columns (e.g\ncode.coding.display).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "The FHIR resource from which to return a dictionary of columns contained in the FHIR\nresource view.\n\nIf not specified, the macro will default to using the `primary_resource` for the metric.\n"}], "created_at": 1677864399.8516357, "supported_languages": null}, "macro.fhir_dbt_analytics.column_data_type": {"unique_id": "macro.fhir_dbt_analytics.column_data_type", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/column_data_type.sql", "original_file_path": "macros/infrastructure_macros/column_data_type.sql", "name": "column_data_type", "macro_sql": "{% macro column_data_type(column_name, source_table) %}\n\n    {%- set relation = adapter.get_relation(\n          database = var('database'),\n          schema = var('schema'),\n          identifier = source_table\n        )\n    -%}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n    {%- for top_level_column in columns -%}\n        {% for column in top_level_column.flatten() %}\n            {% if column_name == column.name %}\n                {% do return (column.data_type) %}\n            {% endif %}\n        {%- endfor -%}\n    {%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Returns the data type of a specified column in a source table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Fully qualified column name to evaluate (e.g. code.coding.display).\n"}, {"name": "source_table", "type": "string", "description": "The source table in which `column_name` exists.\n"}], "created_at": 1677864399.856656, "supported_languages": null}, "macro.fhir_dbt_analytics.model_metadata": {"unique_id": "macro.fhir_dbt_analytics.model_metadata", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/model_metadata.sql", "original_file_path": "macros/infrastructure_macros/model_metadata.sql", "name": "model_metadata", "macro_sql": "{% macro model_metadata(meta_key, model_name=this.name, value_if_missing=None) %}\n\n  {%- if execute -%}\n    {% set model_id = \"model.\" ~ project_name ~ \".\" ~ model_name %}\n    {% set meta_value = graph[\"nodes\"][model_id][\"meta\"][meta_key] %}\n  {%- endif -%}\n\n  {% do return(meta_value if meta_value else value_if_missing) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Returns the value for a specified key defined in a dbt model's metadata config.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "meta_key", "type": "string", "description": "Meta key for which to return the value (e.g. category)\n"}, {"name": "model_name", "type": "string", "description": "The dbt model from which to extract the metadata value.\n\nIf not specified, the macro will default to using the model within which this macro is\ncalled.\n"}, {"name": "value_if_missing", "type": "string", "description": "Default value to return when no value is returned for the specified key.\n"}], "created_at": 1677864399.862224, "supported_languages": null}, "macro.fhir_dbt_analytics.get_reference_paths": {"unique_id": "macro.fhir_dbt_analytics.get_reference_paths", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/get_reference_paths.sql", "original_file_path": "macros/infrastructure_macros/get_reference_paths.sql", "name": "get_reference_paths", "macro_sql": "{% macro get_reference_paths(\n  reference_column,\n  reference_resource\n) %}\n\n{#- For a reference_resource FooBar, direct reference is fooBarId. -#}\n{%- set direct_reference = reference_resource[:1]|lower ~ reference_resource[1:] ~ 'Id' -%}\n\n{#- For a reference_resource FooBar and reference_column foo, direct reference path is foo.fooBarId. -#}\n{%- set direct_reference_path = reference_column ~ '.' ~ direct_reference -%}\n\n{#- For a reference_column foo, indirect reference path is foo.reference. -#}\n{%- set indirect_reference_path = reference_column ~ '.reference' -%}\n\n{%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n{%- set column_dict = get_column_datatype_dict(fhir_resource) -%}\n\n{%- set reference_column_is_array = \n      execute \n      and reference_column in column_dict \n      and column_dict[reference_column].startswith('ARRAY')\n-%}\n\n{%- do return({\n      \"direct_reference\": direct_reference,\n      \"direct_reference_path\": direct_reference_path,\n      \"indirect_reference_path\": indirect_reference_path,\n      \"reference_column_is_array\": reference_column_is_array\n}) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.get_column_datatype_dict"]}, "description": "Get a dictionary containing direct and indirect FHIR references based in an input reference\ncolumn and reference resource.\n\nFor example, the Encounter resource contains the column \"subject\" for references to the\nPatient resource. In this example the reference_column argument would be \"subject\" and the\nreference_resource argument would be \"Patient\". The macro will return the following\ndictionary:\n\ndirect_reference_path: \"subject.patientId\"\nindirect_reference_path: \"subject.reference\"\nreference_column_is_array: False\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "reference_column", "type": "string", "description": "FHIR reference field. Only include the top-level reference field.\nFor example,'subject' rather than 'subject.patientId'\n"}, {"name": "reference_resource", "type": "string", "description": "FHIR resource for which this reference value refers to (e.g. 'Patient).\n"}], "created_at": 1677864399.8590095, "supported_languages": null}, "macro.fhir_dbt_analytics.column_exists": {"unique_id": "macro.fhir_dbt_analytics.column_exists", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/column_exists.sql", "original_file_path": "macros/infrastructure_macros/column_exists.sql", "name": "column_exists", "macro_sql": "{% macro column_exists(column_name, fhir_resource=None) %}\n\n    {%- if not execute -%}\n        {% do return(True) %}\n    {% endif %}\n\n    {% set column_dict = get_column_datatype_dict(fhir_resource) %}\n\n    {% do return(column_name in column_dict) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_column_datatype_dict"]}, "description": "Returns TRUE if a specified column exists within a FHIR resource view.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Column name to evaluate. Can be a top-level column (e.g. code) or nested column (e.g.\ncode.coding.display).\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `column_name` exists.\n\nIf not specified, the macro will default to using the `primary_resource` for the metric.\n"}], "created_at": 1677864399.8540137, "supported_languages": null}, "macro.fhir_dbt_analytics.get_source_specific_category_index": {"unique_id": "macro.fhir_dbt_analytics.get_source_specific_category_index", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/get_source_specific_category_index.sql", "original_file_path": "macros/infrastructure_macros/get_source_specific_category_index.sql", "name": "get_source_specific_category_index", "macro_sql": "{%- macro get_source_specific_category_index() -%}\n    {% if is_public_synthea_dataset() %}\n        {{ return(None) }}\n    {% else %}\n        {{ return(0) }}\n    {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.is_public_synthea_dataset"]}, "description": "Returns the index for category codes, with the correct value for the Synthea public BigQuery\ndataset.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.865814, "supported_languages": null}, "macro.fhir_dbt_analytics.fhir_resource_exists": {"unique_id": "macro.fhir_dbt_analytics.fhir_resource_exists", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/fhir_resource_exists.sql", "original_file_path": "macros/infrastructure_macros/fhir_resource_exists.sql", "name": "fhir_resource_exists", "macro_sql": "{%- macro fhir_resource_exists(test_fhir_resource) -%}\n\n    {# Query all available FHIR resources #}\n    {% set resource_list =\n        dbt_utils.get_column_values(table=ref('fhir_table_list'), column='fhir_resource') %}\n\n    {# Check for resource of interest #}\n    {% for resource in resource_list %}\n       {% if get_source_table_name(resource) == get_source_table_name(test_fhir_resource) %}\n          {{ return(True) }}\n       {% endif %}\n    {% endfor %}\n\n    {{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.fhir_dbt_analytics.get_source_table_name"]}, "description": "Returns TRUE if a specified FHIR resource exists within the source schema defined by the\n`database` and `schema` variables in dbt_project.yml.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "test_fhir_resource", "type": "string", "description": "FHIR resource to evaluate in Pascal case (e.g AllergyIntolerance).\n"}], "created_at": 1677864399.8501146, "supported_languages": null}, "macro.fhir_dbt_analytics.get_source_table_name": {"unique_id": "macro.fhir_dbt_analytics.get_source_table_name", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/get_source_table_name.sql", "original_file_path": "macros/infrastructure_macros/get_source_table_name.sql", "name": "get_source_table_name", "macro_sql": "{%- macro get_source_table_name(fhir_resource) -%}\n    {% if is_public_synthea_dataset() %}\n        {{ return(snake_case(fhir_resource)) }}\n    {% else %}\n        {{ return(fhir_resource) }}\n    {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.is_public_synthea_dataset", "macro.fhir_dbt_analytics.snake_case"]}, "description": "Returns FHIR resource name in the correct case depending on the source dataset.\n\nIf the source dataset is the Synthea public BiqQuery dataset, then FHIR resource table names\nare converted to snake case (e.g. allergy_intolerance).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "FHIR resource name in Pascal case (e.g AllergyIntolerance).\n"}], "created_at": 1677864399.8646226, "supported_languages": null}, "macro.fhir_dbt_analytics.get_metric_date_columns": {"unique_id": "macro.fhir_dbt_analytics.get_metric_date_columns", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/infrastructure_macros/get_metric_date_columns.sql", "original_file_path": "macros/infrastructure_macros/get_metric_date_columns.sql", "name": "get_metric_date_columns", "macro_sql": "{%- macro get_metric_date_columns() -%}\n    {% set columns = model_metadata('metric_date_columns') -%}\n    {% if not columns %}\n        {{ return(None) }}\n    {% endif %}\n\n    {% if is_public_synthea_dataset() %}\n        {% if columns == ['recordedDate'] %}\n            {{ return(['assertedDate']) }}\n        {% endif %}\n    {% endif %}\n\n    {{ return(columns if columns|length else None) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.is_public_synthea_dataset"]}, "description": "Returns the metric date columns from metric metadata, with corrected values for the Synthea\npublic BigQuery dataset.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.8652163, "supported_languages": null}, "macro.fhir_dbt_analytics.alive": {"unique_id": "macro.fhir_dbt_analytics.alive", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/alive.sql", "original_file_path": "macros/cohort_macros/alive.sql", "name": "alive", "macro_sql": "{% macro alive() -%}\n (P.deceased.dateTime IS NULL OR DATE(P.deceased.dateTime) > {{get_snapshot_date()}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient was alive on a given date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.787822, "supported_languages": null}, "macro.fhir_dbt_analytics.has_medication_request": {"unique_id": "macro.fhir_dbt_analytics.has_medication_request", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/has_medication_request.sql", "original_file_path": "macros/cohort_macros/has_medication_request.sql", "name": "has_medication_request", "macro_sql": "{% macro has_medication_request(medication, code_system=None, lookback=None) -%}\n{%- set snapshot_date = get_snapshot_date() -%}\n EXISTS (\n  SELECT cc.code\n  FROM {{ ref('MedicationRequest_view') }} AS M, UNNEST(medication.codeableConcept.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{medication}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(M.authoredOn) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n  WHERE P.id = M.subject.patientId\n)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.sql_comparison_expression"]}, "description": "Evaluates whether a patient had a medication request based on codes defined in\n`clinical_code_groups.csv`.\n\nBy default the evaluation will be based on today's date and therefore include medication\nrequests recorded up to today. If a date is specified by the `cohort_snapshot_date` project\nvariable, then the macro will ignore medication requests recorded after this snapshot date to\ndetermine whether the patient had medication requested prior to that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "medication", "type": "string", "description": "Name of the medication as defined in the `group` field within `clinical_code_groups.csv`.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for a medication request to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a medication to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1677864399.8067842, "supported_languages": null}, "macro.fhir_dbt_analytics.has_observation": {"unique_id": "macro.fhir_dbt_analytics.has_observation", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/has_observation.sql", "original_file_path": "macros/cohort_macros/has_observation.sql", "name": "has_observation", "macro_sql": "{% macro has_observation(observation, code_system=None, value_greater_than=None, value_less_than=None, lookback=None) -%}\n EXISTS (\n  SELECT cc.code\n  FROM {{ ref('Observation_view') }} AS O, UNNEST(code.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{observation}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(O.effective.dateTime) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n    {%- if value_greater_than != None %}\n    AND O.value.quantity.value > {{ value_greater_than }}\n    {%- endif %}\n    {%- if value_less_than != None %}\n    AND O.value.quantity.value < {{ value_less_than }}\n    {%- endif %}\n  WHERE P.id = O.subject.patientId\n)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient had an observation based on codes defined in\n`clinical_code_groups.csv`.\n\nThis search can be further refined by evaluating whether the value for that observation was\nabove or below a specified value.\n\nBy default the evaluation will be based on today's date and therefore include observation\ncodes recorded up to today. If a date is specified by the `cohort_snapshot_date` project\nvariable, then the macro will ignore codes recorded after this snapshot date to determine\nwhether the patient had the observation prior to that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "observation", "type": "string", "description": "Name of the observation as defined in the `group` field within `clinical_code_groups.csv`\n"}, {"name": "value_less_than", "type": "float", "description": "The observation value (`Observation.value.quantity.value`) must be less than this value.\n"}, {"name": "value_greater_than", "type": "float", "description": "The observation value (`Observation.value.quantity.value`) must be greater than this\nvalue.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for an observation to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a observation to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1677864399.8035786, "supported_languages": null}, "macro.fhir_dbt_analytics.has_procedure": {"unique_id": "macro.fhir_dbt_analytics.has_procedure", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/has_procedure.sql", "original_file_path": "macros/cohort_macros/has_procedure.sql", "name": "has_procedure", "macro_sql": "{% macro has_procedure(procedure, code_system=None, lookback=None) -%}\n EXISTS (\n  SELECT cc.code\n  FROM {{ ref('Procedure_view') }} AS Pr, UNNEST(code.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{procedure}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(COALESCE(Pr.performed.dateTime, Pr.performed.period.start)) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n  WHERE P.id = Pr.subject.patientId\n)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient had a procedure based on codes defined in\n`clinical_code_groups.csv`.\n\nBy default the evaluation will be based on today's date and therefore include procedure codes\nrecorded up to today. If a date is specified by the `cohort_snapshot_date` project variable,\nthen the macro will ignore codes recorded after this snapshot date to determine whether the\npatient had the procedure prior to that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "procedure", "type": "string", "description": "Name of the procedure as defined in the `group` field within `clinical_code_groups.csv`.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for a procedure to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a procedure to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1677864399.7985668, "supported_languages": null}, "macro.fhir_dbt_analytics.age": {"unique_id": "macro.fhir_dbt_analytics.age", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/age.sql", "original_file_path": "macros/cohort_macros/age.sql", "name": "age", "macro_sql": "{% macro age(date_of_birth='birthDate') -%}\n DATE_DIFF({{get_snapshot_date()}}, DATE({{date_of_birth}}), YEAR) - IF(EXTRACT(DAYOFYEAR FROM DATE({{date_of_birth}})) > EXTRACT(DAYOFYEAR FROM DATE({{get_snapshot_date()}})), 1, 0)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Calculates a patient's age on a given date from their date of birth.\n\nBy default this macro will calculate the patient's age as of today's date. If a date is\nspecified by the `cohort_snapshot_date` project variable, then the macro will calculate the\npatient's age on that date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "date_of_birth", "type": "string", "description": "Patient's date of birth. Default argument is the `birthDate` field from the Patient FHIR\nresource.\n"}], "created_at": 1677864399.789366, "supported_languages": null}, "macro.fhir_dbt_analytics.get_snapshot_date": {"unique_id": "macro.fhir_dbt_analytics.get_snapshot_date", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/get_snapshot_date.sql", "original_file_path": "macros/cohort_macros/get_snapshot_date.sql", "name": "get_snapshot_date", "macro_sql": "{% macro get_snapshot_date()-%}\n  {%- if var('cohort_snapshot_date') == 'today' -%}\n    {%- do return('CURRENT_DATE()') -%}\n  {%- else -%}\n    {%- do return(\"'\" ~ var('cohort_snapshot_date') ~ \"'\") -%}\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Returns the snapshot date declared by the `cohort_snapshot_date` variable.\n\nIf cohort_snapshot_date = 'today', then CURRENT_DATE is returned.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1677864399.787192, "supported_languages": null}, "macro.fhir_dbt_analytics.has_encounter": {"unique_id": "macro.fhir_dbt_analytics.has_encounter", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/has_encounter.sql", "original_file_path": "macros/cohort_macros/has_encounter.sql", "name": "has_encounter", "macro_sql": "{% macro has_encounter(class=None, lookback=None) -%}\n EXISTS (\n  SELECT E.id\n  FROM {{ ref('Encounter_view') }} AS E\n  WHERE P.id = E.subject.patientId\n  AND E.status IN ('in-progress', 'finished')\n  {%- if class != None %}\n  AND class.code {{ sql_comparison_expression(class) }}\n  {%- endif %}\n  AND DATE(E.period.start) <= {{ get_snapshot_date() }}\n  {%- if lookback != None %}\n  AND DATE(E.period.start) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n  {%- endif %}\n)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient had an encounter in the past.\n\nBy default the evaluation will be based on today's date, looking back. If a date is specified\nby the `cohort_snapshot_date` project variable, then the macro will only look for encounters\nprior to that date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "class", "type": "list", "description": "Restrict the search to a list of specified encounter types as per HL7\n[ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode) value set,\nnoting case-sensitivity.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for an encounter to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}], "created_at": 1677864399.7917132, "supported_languages": null}, "macro.fhir_dbt_analytics.has_condition": {"unique_id": "macro.fhir_dbt_analytics.has_condition", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "macros/cohort_macros/has_condition.sql", "original_file_path": "macros/cohort_macros/has_condition.sql", "name": "has_condition", "macro_sql": "{% macro has_condition(condition, code_system=None, lookback=None) -%}\n EXISTS (\n  SELECT cc.code\n  FROM {{ ref('Condition_view') }} AS C, UNNEST(code.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{condition}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(C.recordedDate) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n  WHERE P.id = C.subject.patientId\n)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient has a condition based on codes defined in\n`clinical_code_groups.csv`.\n\nBy default the evaluation will be based on today's date and therefore include condition codes\nrecorded up to today. If a date is specified by the `cohort_snapshot_date` project variable,\nthen the macro will ignore codes recorded after this snapshot date to determine whether the\npatient had the condition at that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "condition", "type": "string", "description": "Name of the condition as defined in the `group` field within `clinical_code_groups.csv`.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for a condition to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a condition to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1677864399.795329, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4634223, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4712543, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4723623, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.473227, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4738517, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4761686, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.476788, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4778073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4781737, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4786549, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4790242, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4793699, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4797354, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4801776, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4808364, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4812098, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4815695, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4824972, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.483437, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4852743, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4857316, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4864008, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4874413, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4879231, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.488555, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4902093, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.490782, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.491333, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4942272, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.4956524, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.497188, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5042846, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"unique_id": "macro.dbt_bigquery.py_write_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5051115, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5060155, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5064023, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5077991, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5089521, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5093887, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5097206, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, complied_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in complied_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.514635, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5157597, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, compiled_code) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5189652, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5212986, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           create_table_as(True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5292013, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__array_append": {"unique_id": "macro.dbt_bigquery.bigquery__array_append", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5301259, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5309093, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5316691, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"unique_id": "macro.dbt_bigquery.bigquery__array_concat", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5323308, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5328188, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"unique_id": "macro.dbt_bigquery.bigquery__array_construct", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.533753, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5344396, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5357792, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5364435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5371869, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5376954, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5388098, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5394347, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5400338, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.540662, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5411038, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5412986, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5419862, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5435314, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5471494, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5485015, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5492125, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.552623, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5555105, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.557394, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5579855, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5596359, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5601916, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5607164, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5611353, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5617497, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5628693, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5662336, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5665412, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5669346, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.567219, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5681899, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5686696, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5689378, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.569461, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.569916, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5704253, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5708582, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.571394, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5730548, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5735323, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5741353, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.574684, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.577374, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5786219, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.579607, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5858724, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5864322, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5870233, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5877552, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5883768, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5893204, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5897985, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5903096, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5907466, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5911627, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.591663, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5923798, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5930915, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5945594, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5951855, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.595557, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5960617, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.5974324, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.597931, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.598351, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.598822, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6002147, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6006145, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6009884, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6012695, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6016889, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.60189, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6029103, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6034238, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6064427, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.607093, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6075356, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.607925, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6083736, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6089807, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.609472, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6102023, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6107883, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6112087, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.612546, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6129117, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6133, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6143339, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6175375, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6179583, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6187108, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6797743, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6807427, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.681335, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6827087, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6833246, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6852028, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6864676, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6872296, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6880312, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6913347, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6918488, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6923048, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.692676, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.693027, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.6942747, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.694931, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.70168, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7025864, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7030065, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7032535, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.703786, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7041678, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7046757, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7066681, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.707153, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7077582, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7088587, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7161596, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7166283, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.71716, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7188404, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.719262, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7196987, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7232413, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7263758, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7384176, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7467413, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7488375, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7493963, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7506092, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7511034, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7514317, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7517798, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.752159, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7525454, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7529132, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7540545, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7545083, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.757564, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7645965, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.769269, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7704923, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.771218, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7723029, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7732518, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7789106, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7800295, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7804253, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.780857, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.781497, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.782437, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.783013, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7867098, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7883983, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.7976332, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8004818, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8033354, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8055646, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8134456, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8173947, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8180387, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8197896, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.820486, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8222392, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.824415, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8250046, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8254678, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8261046, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8265574, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.827213, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8278677, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8285441, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8290195, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8293867, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8300624, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8335567, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8348837, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.836708, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8373299, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8391826, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.850291, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8518093, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8523407, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.853419, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.854406, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8601055, "supported_languages": ["sql"]}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8631933, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.864326, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8654118, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8663538, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8665493, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8679216, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.868587, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8692775, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8704107, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8710263, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8721235, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.872693, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8737082, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8753915, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8764086, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8772159, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8780603, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8784595, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8793495, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8796961, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8805914, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.88093, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8819206, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8823316, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8832183, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8835535, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8843708, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8845823, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8855805, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8862329, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8865874, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8874087, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8879135, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8890657, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8896778, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8905375, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.890905, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8918924, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8923247, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8933947, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8938177, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8947294, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.895082, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8958912, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8962014, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.897114, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8975027, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.898286, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8985195, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8993526, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.8996978, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.902047, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.902434, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9029071, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9033015, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9037416, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9041808, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9045906, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9050775, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9055467, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9059436, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9063377, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9066985, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9070854, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9074624, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9090192, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.909997, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.910865, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9112546, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9121559, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9124603, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.913316, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9138212, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9147806, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9151223, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.916419, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9168332, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9173808, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9187064, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9192693, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9199388, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9206057, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9345658, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.940406, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dateadd('day', '-1', dateadd('month', '3', date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9456105, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9480019, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9497218, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9512873, "supported_languages": null}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9520893, "supported_languages": null}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9531984, "supported_languages": null}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9542618, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9546328, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9549897, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.955434, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.957772, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9584095, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9588141, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9592242, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9597821, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9602768, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9617214, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9622056, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9625552, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9629133, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9634838, "supported_languages": null}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.965045, "supported_languages": null}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9655542, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.966113, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9666023, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9672203, "supported_languages": null}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9686606, "supported_languages": null}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9690375, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9697454, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dateadd('day', -1, date_trunc('week', dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.970325, "supported_languages": null}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9711878, "supported_languages": null}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9723027, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9737215, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9741223, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.97447, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.97482, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.975165, "supported_languages": null}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9765465, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9771495, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.977929, "supported_languages": null}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.978796, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9792583, "supported_languages": null}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9801433, "supported_languages": null}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9808416, "supported_languages": null}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9815347, "supported_languages": null}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9822888, "supported_languages": null}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9831083, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.98419, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9852655, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9865925, "supported_languages": null}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9873698, "supported_languages": null}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9880862, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9893188, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9898455, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9901817, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.990546, "supported_languages": null}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9912322, "supported_languages": null}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.994834, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9957619, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9967902, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9975274, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.998607, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864395.9994855, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"unique_id": "macro.dbt_date.round_timestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "name": "round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ date_trunc(\"day\", dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0004256, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0029657, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.003675, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0043895, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0055766, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0066586, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0077662, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0087643, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0091383, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0094907, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0097864, "supported_languages": null}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0106921, "supported_languages": null}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0115423, "supported_languages": null}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0129676, "supported_languages": null}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0133038, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0138283, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.014563, "supported_languages": null}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0159304, "supported_languages": null}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.016495, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0170052, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.017511, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0180242, "supported_languages": null}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0190423, "supported_languages": null}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0193858, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0197322, "supported_languages": null}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.020496, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0234847, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0248518, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.026755, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.028006, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0284843, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0298603, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0308142, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0318298, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0322998, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0342019, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0363896, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0385263, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0392752, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.040946, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0420854, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0435817, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.045195, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.046535, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0473306, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0491035, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.04998, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0559206, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0598416, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.06097, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0614061, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0625432, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0633035, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0644617, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0652468, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0667827, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0682654, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0694532, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0706651, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0719814, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0727584, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0740716, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0746229, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0853581, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.086531, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.0874221, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.088651, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.101488, "supported_languages": ["sql"]}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1027315, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.103571, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.10491, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1062756, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1072972, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1084695, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1105683, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1119657, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1128974, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1133, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1142137, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1146848, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1156754, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1161766, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.117512, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1188755, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1192446, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.119867, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1203375, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.121688, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.122016, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1223204, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1226363, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1243925, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1246905, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1248844, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1250708, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1256845, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.125977, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1263237, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1265852, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1268938, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.128566, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1291852, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.129547, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1299107, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1302598, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.bigquery__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1318135, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1321933, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.13288, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1332135, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1334734, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1343575, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1350107, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.136332, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1366508, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.136897, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1379554, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1386943, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1397378, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1405425, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1422272, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1428773, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1433933, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.144101, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1445105, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1451757, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1457582, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1463985, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1468303, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.147456, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1478736, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.148581, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1500425, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1507452, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.151594, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1522338, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.153312, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1540673, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1549695, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1556334, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1566246, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1573431, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1583667, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1591475, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1602035, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.161609, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1625876, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.163321, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.164248, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.164913, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.165866, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.166577, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1674163, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1680841, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.169018, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1696968, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1708665, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1718297, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1727746, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1734452, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1743586, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1750531, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1759636, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1768804, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1778872, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1786127, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1796436, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.180485, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1817672, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.183478, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1844318, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1850586, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1865325, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1887832, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.19038, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1924388, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1943288, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1968546, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1979282, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1987572, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.1998026, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2001965, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.200538, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2056396, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2062175, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2067156, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2072914, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2077463, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.208239, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2112806, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2124956, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2136147, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.214079, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.215265, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2168872, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2179086, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2187543, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2218955, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2227418, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.224479, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2259376, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2279158, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.229348, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2299173, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2307248, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2324247, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2344253, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2379546, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.242872, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2477593, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2547653, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2570205, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.257708, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.259017, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2609096, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2620747, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2627387, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2645469, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.26555, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2660043, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2671747, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.268301, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2690232, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.271293, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2734683, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2758753, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.279426, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.2862587, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.287503, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_utils.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dateadd(period, -test_periods, date_trunc(period, dbt_date.now())) }}\n            as {{ type_timestamp() }})\n    and\n    metric_period < {{ date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.290855, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ type_int() }}),\n            cast({{interval}} as {{ type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.299157, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3011434, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_utils.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3024569, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3039196, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.306199, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3085706, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.310937, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3118782, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3142269, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.316065, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3176386, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3189778, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3203087, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3219616, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.324818, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3270218, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ type_timestamp() }}))\n        <\n        cast({{ dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3287704, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3318787, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3330564, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.33403, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3352249, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.337978, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3406272, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.344515, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_utils.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_utils.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3468227, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3493366, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3512995, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3520432, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.353198, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.354347, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3559463, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3572848, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3603063, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3618248, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3635716, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "name": "test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3651047, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3668451, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3689275, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3710508, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3728092, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.37486, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3766422, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3782022, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3800344, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3818097, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.383742, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3856711, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3887415, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3907492, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3932097, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3941107, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3959973, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "name": "ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3972108, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "name": "default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.3986552, "supported_languages": null}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4067168, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4080284, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4091513, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4121516, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4143999, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4162335, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.417095, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4173875, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4193263, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.420045, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.421594, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.422402, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4244483, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.42557, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4279654, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.42921, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4321294, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4342499, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4373312, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4385252, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.440205, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4410312, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4439454, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4470954, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4513774, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4530692, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.456006, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4575953, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4595392, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.461184, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4616904, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4624033, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.463141, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.463518, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4640298, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4649296, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.465187, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4654262, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4656708, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4668074, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4672863, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4677453, "supported_languages": null}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4686754, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4690623, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4692647, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4694674, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4696555, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4698417, "supported_languages": null}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4707062, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4717612, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4719636, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4721713, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.472355, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4727557, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.472953, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.473124, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4732985, "supported_languages": null}, "macro.dbt_unittest.assert_not_in": {"unique_id": "macro.dbt_unittest.assert_not_in", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_not_in.sql", "original_file_path": "macros/assert_not_in.sql", "name": "assert_not_in", "macro_sql": "{% macro assert_not_in(value, expected) %}\n  {% if value not in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4745557, "supported_languages": null}, "macro.dbt_unittest.assert_list_equals": {"unique_id": "macro.dbt_unittest.assert_list_equals", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_list_equals.sql", "original_file_path": "macros/assert_list_equals.sql", "name": "assert_list_equals", "macro_sql": "{% macro assert_list_equals(value, expected) %}\n  {% if value is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not iterable.\") %}\n  {% endif %}\n  {% if expected is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not iterable.\") %}\n  {% endif %}\n\n  {% set length_of_1st_arg = value | length %}\n  {% set length_of_2nd_arg = expected | length %}\n\n  {% if length_of_1st_arg != length_of_2nd_arg %}\n      {% do exceptions.raise_compiler_error(\"FAILED: lengths of the two are not equal.\") %}\n  {% endif %}\n\n  {% for i in range(length_of_1st_arg) %}\n    {% if value[i] != expected[i] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values at the index {{ i }} is not equal.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4777284, "supported_languages": null}, "macro.dbt_unittest.assert_dict_equals": {"unique_id": "macro.dbt_unittest.assert_dict_equals", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_dict_equals.sql", "original_file_path": "macros/assert_dict_equals.sql", "name": "assert_dict_equals", "macro_sql": "{% macro assert_dict_equals(value, expected) %}\n  {% if value is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not a mapping.\") %}\n  {% endif %}\n  {% if expected is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not a mapping.\") %}\n  {% endif %}\n\n  {% for k, v in value.items() %}\n    {% if k not in expected %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 1st argument is not in \" ~ expected ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and expected[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != expected[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% for k, v in expected.items() %}\n    {% if k not in value %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 2nd argument is not in \" ~ value ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and value[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != value[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4829974, "supported_languages": null}, "macro.dbt_unittest.assert_not_equals": {"unique_id": "macro.dbt_unittest.assert_not_equals", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_not_equals.sql", "original_file_path": "macros/assert_not_equals.sql", "name": "assert_not_equals", "macro_sql": "{% macro assert_not_equals(value, expected) %}\n  {% if value != expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4842517, "supported_languages": null}, "macro.dbt_unittest.assert_true": {"unique_id": "macro.dbt_unittest.assert_true", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_true.sql", "original_file_path": "macros/assert_true.sql", "name": "assert_true", "macro_sql": "{% macro assert_true(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is true %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not true.\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4858844, "supported_languages": null}, "macro.dbt_unittest.assert_in": {"unique_id": "macro.dbt_unittest.assert_in", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_in.sql", "original_file_path": "macros/assert_in.sql", "name": "assert_in", "macro_sql": "{% macro assert_in(value, expected) %}\n  {% if value in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4871585, "supported_languages": null}, "macro.dbt_unittest.assert_equals": {"unique_id": "macro.dbt_unittest.assert_equals", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_equals.sql", "original_file_path": "macros/assert_equals.sql", "name": "assert_equals", "macro_sql": "{% macro assert_equals(value, expected) %}\n  {% if value == expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4883127, "supported_languages": null}, "macro.dbt_unittest.assert_is_none": {"unique_id": "macro.dbt_unittest.assert_is_none", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_is_none.sql", "original_file_path": "macros/assert_is_none.sql", "name": "assert_is_none", "macro_sql": "{% macro assert_is_none(value) %}\n  {% if value is none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not none.\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4894512, "supported_languages": null}, "macro.dbt_unittest.assert_false": {"unique_id": "macro.dbt_unittest.assert_false", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_false.sql", "original_file_path": "macros/assert_false.sql", "name": "assert_false", "macro_sql": "{% macro assert_false(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is false %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not false.\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4909086, "supported_languages": null}, "macro.dbt_unittest.assert_is_not_none": {"unique_id": "macro.dbt_unittest.assert_is_not_none", "package_name": "dbt_unittest", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara/dbt_packages/dbt_unittest", "path": "macros/assert_is_not_none.sql", "original_file_path": "macros/assert_is_not_none.sql", "name": "assert_is_not_none", "macro_sql": "{% macro assert_is_not_none(value) %}\n  {% if value is not none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is none.\") %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1677864396.4919167, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/google/home/gabbye/dbt-env/lib/python3.10/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {"all_metrics": {"name": "all_metrics", "description": "All metrics from metric library", "default": true, "definition": {"union": [{"method": "path", "value": "models/metrics/", "parents": true}, {"method": "path", "value": "models/fhir_resources/"}, {"method": "path", "value": "models/metadata/"}]}}, "fhir_resources": {"name": "fhir_resources", "description": "Views and CTEs for each FHIR resource", "definition": {"union": [{"method": "path", "value": "models/fhir_resources/"}]}}, "metadata": {"name": "metadata", "description": "Project and metric metadata", "definition": {"union": [{"method": "path", "value": "models/metadata/"}]}}, "post_processing": {"name": "post_processing", "description": "Metric post-processing transformations", "definition": {"union": [{"method": "path", "value": "models/post_processing/"}, {"method": "path", "value": "models/metric_views/"}]}}, "anomaly_detection": {"name": "anomaly_detection", "description": "Metric anomaly detection calculations", "definition": {"union": [{"method": "path", "value": "models/anomaly_detection/"}]}}, "category_resource_count": {"name": "category_resource_count", "description": "Metrics that count the number of valid FHIR resources", "definition": {"union": [{"method": "config.meta.category", "value": "Resource count", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_referential_integrity": {"name": "category_referential_integrity", "description": "Metrics that evaluate references between FHIR resources", "definition": {"union": [{"method": "config.meta.category", "value": "Referential integrity", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_encounter_daily": {"name": "category_encounter_daily", "description": "Metrics quantifying patient encounters each day", "definition": {"union": [{"method": "config.meta.category", "value": "Encounter daily", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_resource_count_per_patient_day": {"name": "category_resource_count_per_patient_day", "description": "Metrics calculating the average number of FHIR resources per patient per day", "definition": {"union": [{"method": "config.meta.category", "value": "Resource count per patient-day", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_active_patients_with_resource": {"name": "category_active_patients_with_resource", "description": "Metrics calculating the proportion of active patients with at least one resource that day", "definition": {"union": [{"method": "config.meta.category", "value": "Active patients with resource", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_data_completeness": {"name": "category_data_completeness", "description": "Metrics quantifying how often a particular data item is completed correctly", "definition": {"union": [{"method": "config.meta.category", "value": "Data completeness", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_data_consistency": {"name": "category_data_consistency", "description": "Metrics quantifying how often data items contain conflicting or incompatible information over time", "definition": {"union": [{"method": "config.meta.category", "value": "Data consistency", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_code_system": {"name": "category_code_system", "description": "Metrics that measure the proportion of coded fields that have data recorded in a particular coding system", "definition": {"union": [{"method": "config.meta.category", "value": "Code system", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_allergyintolerance": {"name": "resource_allergyintolerance", "description": "Metrics for which the primary resource evaluated is AllergyIntolerance", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "AllergyIntolerance", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_binary": {"name": "resource_binary", "description": "Metrics for which the primary resource evaluated is Binary", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Binary", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_careteam": {"name": "resource_careteam", "description": "Metrics for which the primary resource evaluated is CareTeam", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "CareTeam", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_composition": {"name": "resource_composition", "description": "Metrics for which the primary resource evaluated is Composition", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Composition", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_condition": {"name": "resource_condition", "description": "Metrics for which the primary resource evaluated is Condition", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Condition", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_diagnosticreport": {"name": "resource_diagnosticreport", "description": "Metrics for which the primary resource evaluated is DiagnosticReport", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "DiagnosticReport", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_documentreference": {"name": "resource_documentreference", "description": "Metrics for which the primary resource evaluated is DocumentReference", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "DocumentReference", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_encounter": {"name": "resource_encounter", "description": "Metrics for which the primary resource evaluated is Encounter", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Encounter", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_location": {"name": "resource_location", "description": "Metrics for which the primary resource evaluated is Location", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Location", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medication": {"name": "resource_medication", "description": "Metrics for which the primary resource evaluated is Medication", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Medication", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationadministration": {"name": "resource_medicationadministration", "description": "Metrics for which the primary resource evaluated is MedicationAdministration", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationAdministration", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationdispense": {"name": "resource_medicationdispense", "description": "Metrics for which the primary resource evaluated is MedicationDispense", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationDispense", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationrequest": {"name": "resource_medicationrequest", "description": "Metrics for which the primary resource evaluated is MedicationRequest", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationRequest", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationstatement": {"name": "resource_medicationstatement", "description": "Metrics for which the primary resource evaluated is MedicationStatement", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationStatement", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_observation": {"name": "resource_observation", "description": "Metrics for which the primary resource evaluated is Observation", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Observation", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_organization": {"name": "resource_organization", "description": "Metrics for which the primary resource evaluated is Organization", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Organization", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_patient": {"name": "resource_patient", "description": "Metrics for which the primary resource evaluated is Patient", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Patient", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_person": {"name": "resource_person", "description": "Metrics for which the primary resource evaluated is Person", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Person", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_practitioner": {"name": "resource_practitioner", "description": "Metrics for which the primary resource evaluated is Practitioner", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Practitioner", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_practitionerrole": {"name": "resource_practitionerrole", "description": "Metrics for which the primary resource evaluated is PractitionerRole", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "PractitionerRole", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_procedure": {"name": "resource_procedure", "description": "Metrics for which the primary resource evaluated is Procedure", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Procedure", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_servicerequest": {"name": "resource_servicerequest", "description": "Metrics for which the primary resource evaluated is ServiceRequest", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "ServiceRequest", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}}, "disabled": {"model.fhir_dbt_analytics.metric_all_executions": [{"resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dqi-playground-teams", "schema": "gabbye_dbt_public_synthea_external", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_all_executions"], "unique_id": "model.fhir_dbt_analytics.metric_all_executions", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    enabled = var('persist_all_metric_executions'),\n    materialized = 'incremental'\n) -}}\n\nSELECT *\nFROM {{ ref('metric_latest_execution') }}", "language": "sql", "package_name": "fhir_dbt_analytics", "root_path": "/tmp/fhir_dbt_analytics/target/compiled/fhir_dbt_analytics/copybara", "path": "post_processing/metric_all_executions.sql", "original_file_path": "models/post_processing/metric_all_executions.sql", "name": "metric_all_executions", "alias": "metric_all_executions", "checksum": {"name": "sha256", "checksum": "6c215514bd930c86728ac40fa75030553c8542cf82f6fc0f9568d6ac4954b0ba"}, "tags": [], "refs": [["metric_latest_execution"]], "sources": [], "metrics": [], "description": "Incrementally inserts all rows from `metric_latest_execution` with each execution, to maintain\na history of all metric execution results.\n\nThis model is disabled by default, but can be enables by setting the\n`persist_all_metric_executions` project variable to TRUE.\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "materialized": "incremental"}, "created_at": 1677864399.6661043, "config_call_dict": {"enabled": false, "materialized": "incremental"}}]}, "parent_map": {"model.fhir_dbt_analytics.metric_execution_log": ["model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.metric_latest_execution": ["model.fhir_dbt_analytics.metric_all_definitions"], "model.fhir_dbt_analytics.metric_definition": ["model.fhir_dbt_analytics.metric_all_definitions", "model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.metric": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution", "model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.adults": ["model.fhir_dbt_analytics.Patient_view"], "model.fhir_dbt_analytics.hypertension": ["model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Procedure_view", "seed.fhir_dbt_analytics.clinical_code_groups", "seed.fhir_dbt_analytics.clinical_code_groups", "seed.fhir_dbt_analytics.clinical_code_groups", "seed.fhir_dbt_analytics.clinical_code_groups"], "model.fhir_dbt_analytics.fhir_table_list": [], "model.fhir_dbt_analytics.metric_all_definitions": [], "model.fhir_dbt_analytics.project_variables": [], "model.fhir_dbt_analytics.metric_overall": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_year": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_day_dimensions": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_year_dimensions": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_day": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.Procedure_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.AllergyIntolerance_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Patient_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Encounter_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationStatement_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationAdministration_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.PractitionerRole_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Practitioner": ["model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Practitioner_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ImagingStudy": ["model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Medication_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationRequest_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Person_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ImagingStudy_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Location": ["model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ServiceRequest_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.CareTeam": ["model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Location_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DiagnosticReport": ["model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Procedure": ["model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Person": ["model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ServiceRequest": ["model.fhir_dbt_analytics.ServiceRequest_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Organization_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationDispense": ["model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationAdministration": ["model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Encounter": ["model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DiagnosticReport_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Condition": ["model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.PractitionerRole": ["model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Composition": ["model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Binary": ["model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Observation_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.CareTeam_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationDispense_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Condition_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Binary_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Composition_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationRequest": ["model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Patient": ["model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Medication": ["model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DocumentReference": ["model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Organization": ["model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Observation": ["model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DocumentReference_view": ["model.fhir_dbt_analytics.fhir_table_list", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.AllergyIntolerance": ["model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationStatement": ["model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_patient_undefined": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_count": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medication_count": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_patient_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_count": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_patient_unresolved": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_count": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.practitionerrole_count": ["model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_count": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_binary_unresolved": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_encounter_undefined": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_patient_unresolved": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.person_count": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_count": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.location_count": ["model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_count": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_encounter_undefined": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_count": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_count": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_count": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_patient_unresolved": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_patient_undefined": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.organization_count": ["model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.practitioner_count": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_count": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_patient_unresolved": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_quantity_value": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_count": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_binary_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_count": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_location_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_patient_unresolved": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_count": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_location_undefined": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_practitioner_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_count": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_encounter_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_patient_undefined": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.binary_count": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_patient_undefined": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_patient_undefined": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_encounter_undefined": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_encounter_undefined": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_patient_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "seed.fhir_dbt_analytics.site_timezones": [], "seed.fhir_dbt_analytics.clinical_code_groups": [], "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"], "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure.e4b986a9aa": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "source.fhir_dbt_analytics.fhir.AllergyIntolerance": [], "source.fhir_dbt_analytics.fhir.Binary": [], "source.fhir_dbt_analytics.fhir.CarePlan": [], "source.fhir_dbt_analytics.fhir.CareTeam": [], "source.fhir_dbt_analytics.fhir.Claim": [], "source.fhir_dbt_analytics.fhir.Composition": [], "source.fhir_dbt_analytics.fhir.Condition": [], "source.fhir_dbt_analytics.fhir.Device": [], "source.fhir_dbt_analytics.fhir.DiagnosticReport": [], "source.fhir_dbt_analytics.fhir.DocumentReference": [], "source.fhir_dbt_analytics.fhir.Encounter": [], "source.fhir_dbt_analytics.fhir.ExplanationOfBenefit": [], "source.fhir_dbt_analytics.fhir.ImagingStudy": [], "source.fhir_dbt_analytics.fhir.Immunization": [], "source.fhir_dbt_analytics.fhir.Location": [], "source.fhir_dbt_analytics.fhir.Medication": [], "source.fhir_dbt_analytics.fhir.MedicationDispense": [], "source.fhir_dbt_analytics.fhir.MedicationAdministration": [], "source.fhir_dbt_analytics.fhir.MedicationRequest": [], "source.fhir_dbt_analytics.fhir.Observation": [], "source.fhir_dbt_analytics.fhir.Organization": [], "source.fhir_dbt_analytics.fhir.Patient": [], "source.fhir_dbt_analytics.fhir.Practitioner": [], "source.fhir_dbt_analytics.fhir.PractitionerRole": [], "source.fhir_dbt_analytics.fhir.Procedure": [], "source.fhir_dbt_analytics.fhir.allergy_intolerance": [], "source.fhir_dbt_analytics.fhir.binary": [], "source.fhir_dbt_analytics.fhir.care_plan": [], "source.fhir_dbt_analytics.fhir.care_team": [], "source.fhir_dbt_analytics.fhir.claim": [], "source.fhir_dbt_analytics.fhir.composition": [], "source.fhir_dbt_analytics.fhir.condition": [], "source.fhir_dbt_analytics.fhir.device": [], "source.fhir_dbt_analytics.fhir.diagnostic_report": [], "source.fhir_dbt_analytics.fhir.document_reference": [], "source.fhir_dbt_analytics.fhir.encounter": [], "source.fhir_dbt_analytics.fhir.imaging_study": [], "source.fhir_dbt_analytics.fhir.immunization": [], "source.fhir_dbt_analytics.fhir.location": [], "source.fhir_dbt_analytics.fhir.medication": [], "source.fhir_dbt_analytics.fhir.medication_administration": [], "source.fhir_dbt_analytics.fhir.medication_dispense": [], "source.fhir_dbt_analytics.fhir.medication_request": [], "source.fhir_dbt_analytics.fhir.observation": [], "source.fhir_dbt_analytics.fhir.organization": [], "source.fhir_dbt_analytics.fhir.patient": [], "source.fhir_dbt_analytics.fhir.practitioner": [], "source.fhir_dbt_analytics.fhir.practitioner_role": [], "source.fhir_dbt_analytics.fhir.procedure": []}, "child_map": {"model.fhir_dbt_analytics.metric_execution_log": [], "model.fhir_dbt_analytics.metric_latest_execution": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_execution_log", "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef"], "model.fhir_dbt_analytics.metric_definition": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_by_day", "model.fhir_dbt_analytics.metric_by_day_dimensions", "model.fhir_dbt_analytics.metric_by_year", "model.fhir_dbt_analytics.metric_by_year_dimensions", "model.fhir_dbt_analytics.metric_overall", "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef"], "model.fhir_dbt_analytics.metric": ["model.fhir_dbt_analytics.metric_by_day", "model.fhir_dbt_analytics.metric_by_day_dimensions", "model.fhir_dbt_analytics.metric_by_year", "model.fhir_dbt_analytics.metric_by_year_dimensions", "model.fhir_dbt_analytics.metric_overall"], "model.fhir_dbt_analytics.adults": [], "model.fhir_dbt_analytics.hypertension": [], "model.fhir_dbt_analytics.fhir_table_list": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.ImagingStudy", "model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.ServiceRequest_view", "model.fhir_dbt_analytics.ServiceRequest_view", "model.fhir_dbt_analytics.allergyintolerance_count", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "model.fhir_dbt_analytics.binary_count", "model.fhir_dbt_analytics.careteam_count", "model.fhir_dbt_analytics.careteam_reference_encounter_undefined", "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "model.fhir_dbt_analytics.careteam_reference_patient_undefined", "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined", "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved", "model.fhir_dbt_analytics.composition_count", "model.fhir_dbt_analytics.composition_reference_binary_undefined", "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "model.fhir_dbt_analytics.composition_reference_encounter_undefined", "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "model.fhir_dbt_analytics.composition_reference_patient_undefined", "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "model.fhir_dbt_analytics.composition_reference_practitioner_undefined", "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "model.fhir_dbt_analytics.condition_count", "model.fhir_dbt_analytics.condition_reference_encounter_undefined", "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "model.fhir_dbt_analytics.condition_reference_patient_undefined", "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_count", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.documentreference_count", "model.fhir_dbt_analytics.encounter_count", "model.fhir_dbt_analytics.encounter_reference_location_undefined", "model.fhir_dbt_analytics.encounter_reference_location_unresolved", "model.fhir_dbt_analytics.encounter_reference_patient_undefined", "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "model.fhir_dbt_analytics.location_count", "model.fhir_dbt_analytics.medication_count", "model.fhir_dbt_analytics.medicationadministration_count", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_count", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.medicationstatement_count", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_count", "model.fhir_dbt_analytics.observation_quantity_value", "model.fhir_dbt_analytics.observation_reference_encounter_undefined", "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "model.fhir_dbt_analytics.observation_reference_patient_undefined", "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined", "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.organization_count", "model.fhir_dbt_analytics.patient_count", "model.fhir_dbt_analytics.person_count", "model.fhir_dbt_analytics.practitioner_count", "model.fhir_dbt_analytics.practitionerrole_count", "model.fhir_dbt_analytics.procedure_count", "model.fhir_dbt_analytics.procedure_reference_encounter_undefined", "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "model.fhir_dbt_analytics.procedure_reference_patient_undefined", "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined", "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_count", "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined", "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined", "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved"], "model.fhir_dbt_analytics.metric_all_definitions": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.project_variables": [], "model.fhir_dbt_analytics.metric_overall": [], "model.fhir_dbt_analytics.metric_by_year": [], "model.fhir_dbt_analytics.metric_by_day_dimensions": ["test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1", "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure.e4b986a9aa"], "model.fhir_dbt_analytics.metric_by_year_dimensions": [], "model.fhir_dbt_analytics.metric_by_day": [], "model.fhir_dbt_analytics.Procedure_view": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.hypertension"], "model.fhir_dbt_analytics.AllergyIntolerance_view": ["model.fhir_dbt_analytics.AllergyIntolerance"], "model.fhir_dbt_analytics.Patient_view": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.adults", "model.fhir_dbt_analytics.hypertension"], "model.fhir_dbt_analytics.Encounter_view": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.hypertension"], "model.fhir_dbt_analytics.MedicationStatement_view": ["model.fhir_dbt_analytics.MedicationStatement"], "model.fhir_dbt_analytics.MedicationAdministration_view": ["model.fhir_dbt_analytics.MedicationAdministration"], "model.fhir_dbt_analytics.PractitionerRole_view": ["model.fhir_dbt_analytics.PractitionerRole"], "model.fhir_dbt_analytics.Practitioner": ["model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved", "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.practitioner_count", "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.Practitioner_view": ["model.fhir_dbt_analytics.Practitioner"], "model.fhir_dbt_analytics.ImagingStudy": [], "model.fhir_dbt_analytics.Medication_view": ["model.fhir_dbt_analytics.Medication"], "model.fhir_dbt_analytics.MedicationRequest_view": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.hypertension"], "model.fhir_dbt_analytics.Person_view": ["model.fhir_dbt_analytics.Person"], "model.fhir_dbt_analytics.ImagingStudy_view": ["model.fhir_dbt_analytics.ImagingStudy"], "model.fhir_dbt_analytics.Location": ["model.fhir_dbt_analytics.encounter_reference_location_unresolved", "model.fhir_dbt_analytics.location_count"], "model.fhir_dbt_analytics.ServiceRequest_view": ["model.fhir_dbt_analytics.ServiceRequest"], "model.fhir_dbt_analytics.CareTeam": ["model.fhir_dbt_analytics.careteam_count", "model.fhir_dbt_analytics.careteam_reference_encounter_undefined", "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "model.fhir_dbt_analytics.careteam_reference_patient_undefined", "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined", "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.Location_view": ["model.fhir_dbt_analytics.Location"], "model.fhir_dbt_analytics.DiagnosticReport": ["model.fhir_dbt_analytics.diagnosticreport_count", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved"], "model.fhir_dbt_analytics.Procedure": ["model.fhir_dbt_analytics.procedure_count", "model.fhir_dbt_analytics.procedure_reference_encounter_undefined", "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "model.fhir_dbt_analytics.procedure_reference_patient_undefined", "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined", "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.Person": ["model.fhir_dbt_analytics.person_count"], "model.fhir_dbt_analytics.ServiceRequest": ["model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.servicerequest_count", "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined", "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined", "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved"], "model.fhir_dbt_analytics.Organization_view": ["model.fhir_dbt_analytics.Organization"], "model.fhir_dbt_analytics.MedicationDispense": [], "model.fhir_dbt_analytics.MedicationAdministration": ["model.fhir_dbt_analytics.medicationadministration_count", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved"], "model.fhir_dbt_analytics.Encounter": ["model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "model.fhir_dbt_analytics.encounter_count", "model.fhir_dbt_analytics.encounter_reference_location_undefined", "model.fhir_dbt_analytics.encounter_reference_location_unresolved", "model.fhir_dbt_analytics.encounter_reference_patient_undefined", "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "model.fhir_dbt_analytics.patient_count", "model.fhir_dbt_analytics.person_count", "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved"], "model.fhir_dbt_analytics.DiagnosticReport_view": ["model.fhir_dbt_analytics.DiagnosticReport"], "model.fhir_dbt_analytics.Condition": ["model.fhir_dbt_analytics.condition_count", "model.fhir_dbt_analytics.condition_reference_encounter_undefined", "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "model.fhir_dbt_analytics.condition_reference_patient_undefined", "model.fhir_dbt_analytics.condition_reference_patient_unresolved"], "model.fhir_dbt_analytics.PractitionerRole": ["model.fhir_dbt_analytics.practitionerrole_count"], "model.fhir_dbt_analytics.Composition": ["model.fhir_dbt_analytics.binary_count", "model.fhir_dbt_analytics.composition_count", "model.fhir_dbt_analytics.composition_reference_binary_undefined", "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "model.fhir_dbt_analytics.composition_reference_encounter_undefined", "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "model.fhir_dbt_analytics.composition_reference_patient_undefined", "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "model.fhir_dbt_analytics.composition_reference_practitioner_undefined", "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.Binary": ["model.fhir_dbt_analytics.binary_count", "model.fhir_dbt_analytics.composition_reference_binary_unresolved"], "model.fhir_dbt_analytics.Observation_view": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.hypertension"], "model.fhir_dbt_analytics.CareTeam_view": ["model.fhir_dbt_analytics.CareTeam"], "model.fhir_dbt_analytics.MedicationDispense_view": ["model.fhir_dbt_analytics.MedicationDispense"], "model.fhir_dbt_analytics.Condition_view": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.hypertension"], "model.fhir_dbt_analytics.Binary_view": ["model.fhir_dbt_analytics.Binary"], "model.fhir_dbt_analytics.Composition_view": ["model.fhir_dbt_analytics.Composition"], "model.fhir_dbt_analytics.MedicationRequest": ["model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_count", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.Patient": ["model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "model.fhir_dbt_analytics.patient_count", "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved"], "model.fhir_dbt_analytics.Medication": ["model.fhir_dbt_analytics.medication_count", "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved"], "model.fhir_dbt_analytics.DocumentReference": ["model.fhir_dbt_analytics.documentreference_count"], "model.fhir_dbt_analytics.Organization": ["model.fhir_dbt_analytics.organization_count"], "model.fhir_dbt_analytics.Observation": ["model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "model.fhir_dbt_analytics.observation_count", "model.fhir_dbt_analytics.observation_quantity_value", "model.fhir_dbt_analytics.observation_reference_encounter_undefined", "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "model.fhir_dbt_analytics.observation_reference_patient_undefined", "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined", "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved"], "model.fhir_dbt_analytics.DocumentReference_view": ["model.fhir_dbt_analytics.DocumentReference"], "model.fhir_dbt_analytics.AllergyIntolerance": ["model.fhir_dbt_analytics.allergyintolerance_count", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved"], "model.fhir_dbt_analytics.MedicationStatement": ["model.fhir_dbt_analytics.medicationstatement_count", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved"], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined": [], "model.fhir_dbt_analytics.encounter_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined": [], "model.fhir_dbt_analytics.medicationadministration_count": [], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.medication_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.composition_reference_patient_undefined": [], "model.fhir_dbt_analytics.encounter_count": [], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved": [], "model.fhir_dbt_analytics.procedure_reference_patient_unresolved": [], "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.allergyintolerance_count": [], "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.practitionerrole_count": [], "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.patient_count": [], "model.fhir_dbt_analytics.composition_reference_binary_unresolved": [], "model.fhir_dbt_analytics.careteam_reference_encounter_undefined": [], "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined": [], "model.fhir_dbt_analytics.condition_reference_patient_unresolved": [], "model.fhir_dbt_analytics.person_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved": [], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined": [], "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined": [], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved": [], "model.fhir_dbt_analytics.servicerequest_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved": [], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.location_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined": [], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationstatement_count": [], "model.fhir_dbt_analytics.condition_reference_encounter_undefined": [], "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_count": [], "model.fhir_dbt_analytics.documentreference_count": [], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined": [], "model.fhir_dbt_analytics.careteam_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined": [], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.careteam_reference_patient_unresolved": [], "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined": [], "model.fhir_dbt_analytics.observation_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined": [], "model.fhir_dbt_analytics.condition_reference_patient_undefined": [], "model.fhir_dbt_analytics.organization_count": [], "model.fhir_dbt_analytics.practitioner_count": [], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined": [], "model.fhir_dbt_analytics.medicationrequest_count": [], "model.fhir_dbt_analytics.observation_reference_patient_unresolved": [], "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.observation_quantity_value": [], "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined": [], "model.fhir_dbt_analytics.condition_count": [], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined": [], "model.fhir_dbt_analytics.composition_reference_binary_undefined": [], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.composition_count": [], "model.fhir_dbt_analytics.encounter_reference_location_unresolved": [], "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.composition_reference_patient_unresolved": [], "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved": [], "model.fhir_dbt_analytics.procedure_count": [], "model.fhir_dbt_analytics.encounter_reference_location_undefined": [], "model.fhir_dbt_analytics.composition_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined": [], "model.fhir_dbt_analytics.condition_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined": [], "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.observation_count": [], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved": [], "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined": [], "model.fhir_dbt_analytics.composition_reference_encounter_undefined": [], "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined": [], "model.fhir_dbt_analytics.observation_reference_patient_undefined": [], "model.fhir_dbt_analytics.composition_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined": [], "model.fhir_dbt_analytics.binary_count": [], "model.fhir_dbt_analytics.careteam_reference_patient_undefined": [], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved": [], "model.fhir_dbt_analytics.procedure_reference_patient_undefined": [], "model.fhir_dbt_analytics.observation_reference_encounter_undefined": [], "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined": [], "model.fhir_dbt_analytics.procedure_reference_encounter_undefined": [], "model.fhir_dbt_analytics.encounter_reference_patient_unresolved": [], "seed.fhir_dbt_analytics.site_timezones": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.ImagingStudy", "model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.ServiceRequest_view"], "seed.fhir_dbt_analytics.clinical_code_groups": ["model.fhir_dbt_analytics.hypertension", "model.fhir_dbt_analytics.hypertension", "model.fhir_dbt_analytics.hypertension", "model.fhir_dbt_analytics.hypertension"], "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef": [], "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3": [], "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions_calculation_IN_PROPORTION_RATIO___SAFE_DIVIDE_numerator_denominator_measure.e4b986a9aa": [], "source.fhir_dbt_analytics.fhir.AllergyIntolerance": [], "source.fhir_dbt_analytics.fhir.Binary": [], "source.fhir_dbt_analytics.fhir.CarePlan": [], "source.fhir_dbt_analytics.fhir.CareTeam": [], "source.fhir_dbt_analytics.fhir.Claim": [], "source.fhir_dbt_analytics.fhir.Composition": [], "source.fhir_dbt_analytics.fhir.Condition": [], "source.fhir_dbt_analytics.fhir.Device": [], "source.fhir_dbt_analytics.fhir.DiagnosticReport": [], "source.fhir_dbt_analytics.fhir.DocumentReference": [], "source.fhir_dbt_analytics.fhir.Encounter": [], "source.fhir_dbt_analytics.fhir.ExplanationOfBenefit": [], "source.fhir_dbt_analytics.fhir.ImagingStudy": [], "source.fhir_dbt_analytics.fhir.Immunization": [], "source.fhir_dbt_analytics.fhir.Location": [], "source.fhir_dbt_analytics.fhir.Medication": [], "source.fhir_dbt_analytics.fhir.MedicationDispense": [], "source.fhir_dbt_analytics.fhir.MedicationAdministration": [], "source.fhir_dbt_analytics.fhir.MedicationRequest": [], "source.fhir_dbt_analytics.fhir.Observation": [], "source.fhir_dbt_analytics.fhir.Organization": [], "source.fhir_dbt_analytics.fhir.Patient": [], "source.fhir_dbt_analytics.fhir.Practitioner": [], "source.fhir_dbt_analytics.fhir.PractitionerRole": [], "source.fhir_dbt_analytics.fhir.Procedure": [], "source.fhir_dbt_analytics.fhir.allergy_intolerance": [], "source.fhir_dbt_analytics.fhir.binary": [], "source.fhir_dbt_analytics.fhir.care_plan": [], "source.fhir_dbt_analytics.fhir.care_team": [], "source.fhir_dbt_analytics.fhir.claim": [], "source.fhir_dbt_analytics.fhir.composition": [], "source.fhir_dbt_analytics.fhir.condition": [], "source.fhir_dbt_analytics.fhir.device": [], "source.fhir_dbt_analytics.fhir.diagnostic_report": [], "source.fhir_dbt_analytics.fhir.document_reference": [], "source.fhir_dbt_analytics.fhir.encounter": [], "source.fhir_dbt_analytics.fhir.imaging_study": [], "source.fhir_dbt_analytics.fhir.immunization": [], "source.fhir_dbt_analytics.fhir.location": [], "source.fhir_dbt_analytics.fhir.medication": [], "source.fhir_dbt_analytics.fhir.medication_administration": [], "source.fhir_dbt_analytics.fhir.medication_dispense": [], "source.fhir_dbt_analytics.fhir.medication_request": [], "source.fhir_dbt_analytics.fhir.observation": [], "source.fhir_dbt_analytics.fhir.organization": [], "source.fhir_dbt_analytics.fhir.patient": [], "source.fhir_dbt_analytics.fhir.practitioner": [], "source.fhir_dbt_analytics.fhir.practitioner_role": [], "source.fhir_dbt_analytics.fhir.procedure": []}}